@article{rayyan-727967009,
  title={What is DevOps?: A Systematic Mapping Study on Definitions and Practices},
  year={2016},
  journal={XP '16 Workshops: Scientific Workshop Proceedings of XP2016},
  issn={978-1-4503-4134-9},
  pages={1-11},
  author={Jabbari, Ramtin and bin Ali, Nauman and Petersen, Kai and Tanveer, Binish},
  url={https://dl.acm.org/doi/10.1145/2962695.2962707},
  language={en},
  publisher={ACM},
  keywords={DevOps definition, DevOps practice, Software development method},
  abstract={Context: DevOps, the combination of Development and Operations, is a new way of thinking in the software engi- neering domain that recently received much attention. Given that DevOps is a new term and novel concept recently in- troduced, no common understanding of what it entails has been achieved yet. Consequently, definitions of DevOps of- ten only represent a part that is relevant to the concept.     Objective:This study aims to characterize DevOps by ex- ploring central components of DevOps definitions reported in the literature, specifying practices explicitly proposed for DevOps and investigating the similarities and differences be- tween DevOps and other existing methods in software engi- neering.     Method: A systematic mapping study was conducted that used six electronic databases: IEEE, ACM, Inspec, Sco- pus, Wiley Online Library and Web of Science.     Result: 44 studies have been selected that report a defi- nition of DevOps, 15 studies explicitly stating DevOps prac- tices, and 15 studies stating how DevOps is related to other existing methods. Papers in some cases stated a combina- tion of a definition, practices, and relations to other meth- ods, the total number of primary studies was 49.     Conclusion: We proposed a definition for DevOps which may overcome inconsistencies over the various existing defi- nitions of individual research studies. In addition, the prac- tices explicitly proposed for DevOps have been presented as well as the relation to other software development methods.}
}

@article{rayyan-727967016,
  title={Tools to Support Systematic Literature Reviews in Software Engineering: A Mapping Study},
  year={2013},
  journal={2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement},
  pages={296-299},
  author={Marshall, C. and Brereton, P.},
  keywords={Software, systematic literature review, software engineering, automated search strategy, automated tool, mapping study, SE domain, SLR process, Software engineering, Software measurement, support systematic literature reviews, Systematics, Text mining, visualisation techniques, Visualization},
  abstract={Background: Systematic literature reviews (SLRs) have become an established methodology in software engineering (SE) research however they can be very time consuming and error prone. Aim: The aims of this study are to identify and classify tools that can help to automate part or all of the SLR process within the SE domain. Method: A mapping study was performed using an automated search strategy plus snowballing to locate relevant papers. A set of known papers was used to validate the search string. Results: 14 papers were accepted into the final set. Eight presented text mining tools and six discussed the use of visualisation techniques. The stage most commonly targeted was study selection. Only two papers reported an independent evaluation of the tool presented. The majority were evaluated through small experiments and examples of their use. Conclusions: A variety of tools are available to support the SLR process although many are in the early stages of development and usage.}
}

@article{rayyan-727967054,
  title={Ontology-based context modeling in service-oriented computing: A systematic mapping},
  year={2017},
  journal={Data & Knowledge Engineering},
  issn={0169-023X},
  volume={110},
  pages={24-53},
  author={Cabrera, Oscar and Franch, Xavier and Marco, Jordi},
  url={https://www.sciencedirect.com/science/article/pii/S0169023X16301380},
  keywords={Systematic mapping, Context modeling, Context-aware computing, Ontology, Service-oriented computing},
  abstract={Context Service-oriented computing and context-aware computing are two consolidated paradigms that are changing the way of providing and consuming software services. Whilst service-oriented computing is based on service-oriented architectures for providing flexible software services, context-aware computing articulates different phases of a context life cycle for changing the behavior of such services. The synergy between both paradigms provides the context to this study. Objective This study analyzes the current state of the art of context models, specifically: (1) which are these proposals and how are they related; (2) what are their structural characteristics; (3) what context information is the most addressed; and (4) what are their most consolidated definitions. Given their dominance on the field, the study focuses on ontology-based approaches. Method We conducted a systematic mapping by establishing a review protocol that integrates automatic and manual searches from different sources. We applied a rigorous method to elicit the keywords from the research questions and selection criteria to retrieve the papers to evaluate. Results Overall, 138 primary studies were selected to answer our research questions. These proposals were studied in depth by analyzing: 1) distribution along time and their relationships; 2) size correlated with the number of classes and levels of the context model, and coverage of the definitions provided as indicator of quality provided; 3) most addressed context information; 4) most consolidated definitions of context information. Conclusions The contribution of this survey is to make available a unified and consolidated body of knowledge on context for service-oriented computing that could be instantiated and used as starting point in a variety of use cases. This sweeping view on the anatomy of context models may help avoiding the postulation of new proposals not aligned with the current research.}
}

@article{rayyan-727967058,
  title={Privacy in smart toys: Risks and proposed solutions},
  year={2020},
  journal={Electronic Commerce Research and Applications},
  issn={1567-4223},
  volume={39},
  pages={100922},
  author={de Paula Albuquerque, Otávio and Fantinato, Marcelo and Kelner, Judith and de Albuquerque, Anna Priscilla},
  url={https://www.sciencedirect.com/science/article/pii/S1567422319300997},
  keywords={Literature review, Children, Connected toys, Data privacy, Internet of Toys, Scoping review, Privacy},
  abstract={Smart toys have become popular as technological solutions offer a better experience for children. However, the technology employed greatly increases the risks to children's privacy, which does not seem to have become a real concern for toy makers. We investigated this issue through a study driven by two major research questions: which are the major smart toys-related children's privacy risks and which are the major mitigation so to such risks. To answer these questions, we conducted a scoping review. As a result, we selected 26 primary studies and elaborated two classifications of risks and proposed solutions – technical and domain-specific. The most mentioned technical risk is data disclosure, while from a domain-specific perspective there is much concern on the children's physical and psychological safety. From a mitigation standpoint, many recommendations and solutions have been proposed, but without a more common type of contribution. As a main conclusion, we observed that toy makers and privacy regulations are not yet ready regarding children's privacy for a more active smart toys market.}
}

@article{rayyan-727967060,
  title={Graphical user interface (GUI) testing: Systematic mapping and repository},
  year={2013},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={55},
  number={10},
  pages={1679-1694},
  author={Banerjee, Ishan and Nguyen, Bao and Garousi, Vahid and Memon, Atif},
  url={https://www.sciencedirect.com/science/article/pii/S0950584913000669},
  keywords={Bibliometrics, Systematic mapping, GUI application, Paper repository, Testing},
  abstract={Context GUI testing is system testing of a software that has a graphical-user interface (GUI) front-end. Because system testing entails that the entire software system, including the user interface, be tested as a whole, during GUI testing, test cases—modeled as sequences of user input events—are developed and executed on the software by exercising the GUI's widgets (e.g., text boxes and clickable buttons). More than 230 articles have appeared in the area of GUI testing since 1991. Objective In this paper, we study this existing body of knowledge using a systematic mapping (SM). Method The SM is conducted using the guidelines proposed by Petersen et al. We pose three sets of research questions. We define selection and exclusion criteria. From the initial pool of 230 articles, published in years 1991–2011, our final pool consisted of 136 articles. We systematically develop a classification scheme and map the selected articles to this scheme. Results We present two types of results. First, we report the demographics and bibliometrics trends in this domain, including: top-cited articles, active researchers, top venues, and active countries in this research area. Moreover, we derive the trends, for instance, in terms of types of articles, sources of information to derive test cases, types of evaluations used in articles, etc. Our second major result is a publicly-accessible repository that contains all our mapping data. We plan to update this repository on a regular basis, making it a “live” resource for all researchers. Conclusion Our SM provides an overview of existing GUI testing approaches and helps spot areas in the field that require more attention from the research community. For example, much work is needed to connect academic model-based techniques with commercially available tools. To this end, studies are needed to compare the state-of-the-art in GUI testing in academic techniques and industrial tools.}
}

@article{rayyan-727967061,
  title={Finding faults: A scoping study of fault diagnostics for Industrial Cyber–Physical Systems},
  year={2020},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={168},
  pages={110638},
  author={Dowdeswell, Barry and Sinha, Roopak and MacDonell, Stephen G},
  url={https://www.sciencedirect.com/science/article/pii/S0164121220301114},
  keywords={Aerospace, Automotive, Avionics, Faults, Industrial control, Industrial cyber–physical systems},
  abstract={Context: As Industrial Cyber–Physical Systems (ICPS) become more connected and widely-distributed, often operating in safety-critical environments, we require innovative approaches to detect and diagnose the faults that occur in them. Objective: We profile fault identification and diagnosis techniques employed in the aerospace, automotive, and industrial control domains. Each of these sectors has adopted particular methods to meet their differing diagnostic needs. By examining both theoretical presentations as well as case studies from production environments, we present a profile of the current approaches being employed and identify gaps. Methodology: A scoping study was used to identify and compare fault detection and diagnosis methodologies that are presented in the current literature. We created categories for the different diagnostic approaches via a pilot study and present an analysis of the trends that emerged. We then compared the maturity of these approaches by adapting and using the NASA Technology Readiness Level (TRL) scale. Results: Fault identification and analysis studies from 127 papers published from 2004 to 2019 reveal a wide diversity of promising techniques, both emerging and in-use. These range from traditional Physics-based Models to Data-Driven Artificial Intelligence (AI) and Knowledge-Based approaches. Hybrid techniques that blend aspects of these three broad categories were also encountered. Predictive diagnostics or prognostics featured prominently across all sectors, along with discussions of techniques including Fault trees, Petri nets and Markov approaches. We also profile some of the techniques that have reached the highest Technology Readiness Levels, showing how those methods are being applied in real-world environments beyond the laboratory. Conclusions: Our results suggest that the continuing wide use of both Model-Based and Data-Driven AI techniques across all domains, especially when they are used together in hybrid configuration, reflects the complexity of the current ICPS application space. While creating sufficiently-complete models is labor intensive, Model-free AI techniques were evidenced as a viable way of addressing aspects of this challenge, demonstrating the increasing sophistication of current machine learning systems. Connecting ICPS together to share sufficient telemetry to diagnose and manage faults is difficult when the physical environment places demands on ICPS. Despite these challenges, the most mature papers present robust fault diagnosis and analysis techniques which have moved beyond the laboratory and are proving valuable in real-world environments.}
}

@article{rayyan-727967072,
  title={Process mining techniques and applications – A systematic mapping study},
  year={2019},
  journal={Expert Systems with Applications},
  issn={0957-4174},
  volume={133},
  pages={260-295},
  author={dos Santos Garcia, Cleiton and Meincheim, Alex and Faria Junior, Elio Ribeiro and Dallagassa, Marcelo Rosano and Sato, Denise Maria Vecino and Carvalho, Deborah Ribeiro and Santos, Eduardo Alves Portela and Scalabrin, Edson Emilio},
  url={https://www.sciencedirect.com/science/article/pii/S0957417419303161},
  keywords={Process mining, Process mining applications, Process mining case studies, Workflow mining},
  abstract={Process mining is a growing and promising study area focused on understanding processes and to help capture the more significant findings during real execution rather than, those methods that, only observed idealized process model. The objective of this article is to map the active research topics of process mining and their main publishers by country, periodicals, and conferences. We also extract the reported application studies and classify these by exploration domains or industry segments that are taking advantage of this technique. The applied research method was systematic mapping, which began with 3713 articles. After applying the exclusion criteria, 1278 articles were selected for review. In this article, an overview regarding process mining is presented, the main research topics are identified, followed by identification of the most applied process mining algorithms, and finally application domains among different business segments are reported on. It is possible to observe that the most active research topics are associated with the process discovery algorithms, followed by conformance checking, and architecture and tools improvements. In application domains, the segments with major case studies are healthcare followed by information and communication technology, manufacturing, education, finance, and logistics.}
}

@article{rayyan-727967075,
  title={Skill assessment in learning experiences based on serious games: A Systematic Mapping Study},
  year={2017},
  journal={Computers & Education},
  issn={0360-1315},
  volume={113},
  pages={42-60},
  author={Caballero-Hernández, Juan Antonio and Palomo-Duarte, Manuel and Dodero, Juan Manuel},
  url={https://www.sciencedirect.com/science/article/pii/S0360131517301136},
  keywords={Interactive learning environments, Game Based Learning, Serious games, Skill assessment, Systematic Mapping Study},
  abstract={Serious games are games with an educational purpose. In these games, players develop their skills by facing a number of challenges, and students are assessed according to their game playing behaviour. Assessment of serious game-based learning experiences has to take into account diverse features as game genre, pedagogical aim or game context. This paper analyses how skills are usually assessed in learning experiences based on serious games. To reach this objective, a systematic mapping study of more than 400 papers is undertaken. Papers were identified and classified according to a framework based on four categories: assessment aim, implementation, integration and primary assessment type. The reviewed literature mainly deals with contributions on methods and approaches for serious games. Results have revealed that most assessment methods are applied for a formative purpose more than for a certification purpose. Most frequent implementations such as game scoring and integrations like monitoring states were also uncovered. The main primary type of assessment detected was in-process. In addition, several limitations were found in the assessment methods: regarding the aim of assessment, certification of previous or attained skills was usually implemented out of the game; the scope of some implementations was limited because results were predefined earlier; and most of methods analysed present scalability issues because they rely on manual assessments. Such findings are analysed and discussed to clarify the state of the art and provide recommendations for further work in the area of serious games-based learning.}
}

@article{rayyan-727967079,
  title={A systematic mapping study of clone visualization},
  year={2020},
  journal={Computer Science Review},
  issn={1574-0137},
  volume={37},
  pages={100266},
  author={Hammad, Muhammad and Basit, Hamid Abdul and Jarzabek, Stan and Koschke, Rainer},
  url={https://www.sciencedirect.com/science/article/pii/S1574013719302679},
  keywords={Clone, Feature analysis, Human–computer interaction, Information needs, User goals, Visualization techniques},
  abstract={Knowing code clones (similar code fragments) is helpful in software maintenance and re-engineering. As clone detectors return huge numbers of clones, visualization techniques have been proposed to make cloning information more comprehensible and useful for programmers. We present a mapping study of clone visualization techniques, classifying visualizations in respect to the user goals to be achieved by means of clone visualizations and relevant clone-related information needs. Our mapping study will aid tool users in selecting clone visualization tools suitable for the task at hand, tool vendors in improving capabilities of their tools, and researchers in identifying open problems in clone visualization research.}
}

@article{rayyan-727967081,
  title={Source code metrics: A systematic mapping study},
  year={2017},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={128},
  pages={164-197},
  author={Nuñez-Varela, Alberto S and Pérez-Gonzalez, Héctor G and Martínez-Perez, Francisco E and Soubervielle-Montalvo, Carlos},
  url={https://www.sciencedirect.com/science/article/pii/S0164121217300663},
  keywords={Systematic mapping study, Aspect-oriented metrics, Feature-oriented metrics, Object-oriented metrics, Software metrics, Source code metrics, Metronidazole},
  abstract={Context Source code metrics are essential components in the software measurement process. They are extracted from the source code of the software, and their values allow us to reach conclusions about the quality attributes measured by the metrics. Objectives This paper aims to collect source code metrics related studies, review them, and perform an analysis, while providing an overview on the current state of source code metrics and their current trends. Method A systematic mapping study was conducted. A total of 226 studies, published between the years 2010 and 2015, were selected and analyzed. Results Almost 300 source code metrics were found. Object oriented programming is the most commonly studied paradigm with the Chidamber and Kemerer metrics, lines of code, McCabe's cyclomatic complexity, and number of methods and attributes being the most used metrics. Research on aspect and feature oriented programming is growing, especially for the current interest in programming concerns and software product lines. Conclusions Object oriented metrics have gained much attention, but there is a current need for more studies on aspect and feature oriented metrics. Software fault prediction, complexity and quality assessment are recurrent topics, while concerns, big scale software and software product lines represent current trends.}
}

@article{rayyan-727967084,
  title={Combining service-orientation and software product line engineering: A systematic mapping study},
  year={2013},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={55},
  number={11},
  pages={1845-1859},
  author={Mohabbati, Bardia and Asadi, Mohsen and Gašević, Dragan and Hatala, Marek and Müller, Hausi A},
  url={https://www.sciencedirect.com/science/article/pii/S0950584913001274},
  keywords={Software product lines, Systematic mapping, Service-oriented architecture, Software},
  abstract={Context Service-Orientation (SO) is a rapidly emerging paradigm for the design and development of adaptive and dynamic software systems. Software Product Line Engineering (SPLE) has also gained attention as a promising and successful software reuse development paradigm over the last decade and proven to provide effective solutions to deal with managing the growing complexity of software systems. Objective This study aims at characterizing and identifying the existing research on employing and leveraging SO and SPLE. Method We conducted a systematic mapping study to identify and analyze related literature. We identified 81 primary studies, dated from 2000–2011 and classified them with respect to research focus, types of research and contribution. Result The mapping synthesizes the available evidence about combining the synergy points and integration of SO and SPLE. The analysis shows that the majority of studies focus on service variability modeling and adaptive systems by employing SPLE principles and approaches. In particular, SPLE approaches, especially feature-oriented approaches for variability modeling, have been applied to the design and development of service-oriented systems. While SO is employed in software product line contexts for the realization of product lines to reconcile the flexibility, scalability and dynamism in product derivations thereby creating dynamic software product lines. Conclusion Our study summarizes and characterizes the SO and SPLE topics researchers have investigated over the past decade and identifies promising research directions as due to the synergy generated by integrating methods and techniques from these two areas.}
}

@article{rayyan-727967086,
  title={Defining multi-tenancy: A systematic mapping study on the academic and the industrial perspective},
  year={2015},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={100},
  pages={139-148},
  author={Kabbedijk, Jaap and Bezemer, Cor-Paul and Jansen, Slinger and Zaidman, Andy},
  url={https://www.sciencedirect.com/science/article/pii/S0164121214002313},
  keywords={Systematic mapping study, Definition, Multi-tenancy},
  abstract={Software as a service is frequently offered in a multi-tenant style, where customers of the application and their end-users share resources such as software and hardware among all users, without necessarily sharing data. It is surprising that, with such a popular paradigm, little agreement exists with regard to the definition, domain, and challenges of multi-tenancy. This absence is detrimental to the research community and the industry, as it hampers progress in the domain of multi-tenancy and enables organizations and academics to wield their own definitions to further their commercial or research agendas. In this article, a systematic mapping study on multi-tenancy is described in which 761 academic papers and 371 industrial blogs are analysed. Both the industrial and academic perspective are assessed, in order to get a complete overview. The definition and topic maps provide a comprehensive overview of the domain, while the research agenda, listing four important research topics, provides a roadmap for future research efforts.}
}

@article{rayyan-727967092,
  title={Usability evaluation methods for the web: A systematic mapping study},
  year={2011},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={53},
  number={8},
  pages={789-817},
  author={Fernandez, Adrian and Insfran, Emilio and Abrahão, Silvia},
  url={https://www.sciencedirect.com/science/article/pii/S0950584911000607},
  keywords={Systematic mapping, Usability evaluation methods, Web development},
  abstract={Context In recent years, many usability evaluation methods (UEMs) have been employed to evaluate Web applications. However, many of these applications still do not meet most customers' usability expectations and many companies have folded as a result of not considering Web usability issues. No studies currently exist with regard to either the use of usability evaluation methods for the Web or the benefits they bring. Objective The objective of this paper is to summarize the current knowledge that is available as regards the usability evaluation methods (UEMs) that have been employed to evaluate Web applications over the last 14years. Method A systematic mapping study was performed to assess the UEMs that have been used by researchers to evaluate Web applications and their relation to the Web development process. Systematic mapping studies are useful for categorizing and summarizing the existing information concerning a research question in an unbiased manner. Results The results show that around 39% of the papers reviewed reported the use of evaluation methods that had been specifically crafted for the Web. The results also show that the type of method most widely used was that of User Testing. The results identify several research gaps, such as the fact that around 90% of the studies applied evaluations during the implementation phase of the Web application development, which is the most costly phase in which to perform changes. A list of the UEMs that were found is also provided in order to guide novice usability practitioners. Conclusions From an initial set of 2703 papers, a total of 206 research papers were selected for the mapping study. The results obtained allowed us to reach conclusions concerning the state-of-the-art of UEMs for evaluating Web applications. This allowed us to identify several research gaps, which subsequently provided us with a framework in which new research activities can be more appropriately positioned, and from which useful information for novice usability practitioners can be extracted.}
}

@article{rayyan-727967096,
  title={A systematic mapping study of API usability evaluation methods},
  year={2019},
  journal={Computer Science Review},
  issn={1574-0137},
  volume={33},
  pages={49-68},
  author={Rauf, Irum and Troubitsyna, Elena and Porres, Ivan},
  url={https://www.sciencedirect.com/science/article/pii/S1574013718301515},
  keywords={Usability evaluation methods, API developers, API usability, Cognitive dimensions, Usability factors},
  abstract={An Application Programming Interface (API) provides a programmatic interface to a software component that is often offered publicly and may be used by programmers who are not the API's original designers. APIs play a key role in software reuse. By reusing high quality components and services, developers can increase their productivity and avoid costly defects. The usability of an API is a qualitative characteristic that evaluates how easy it is to use an API. Recent years have seen a considerable increase in research efforts aiming at evaluating the usability of APIs. An API usability evaluation can identify problem areas and provide recommendations for improving the API. In this systematic mapping study, we focus on 47 primary studies to identify the aim and the method of the API usability studies. We investigate which API usability factors are evaluated, at which phases of API development is the usability of API evaluated and what are the current limitations and open issues in API usability evaluation. We believe that the results of this literature review would be useful for both researchers and industry practitioners interested in investigating the usability of API and new API usability evaluation methods.}
}

@article{rayyan-727967103,
  title={Quality attributes and quality models for ambient assisted living software systems: A systematic mapping},
  year={2017},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={82},
  pages={121-138},
  author={Garcés, Lina and Ampatzoglou, Apostolos and Avgeriou, Paris and Nakagawa, Elisa Yumi},
  url={https://www.sciencedirect.com/science/article/pii/S0950584916302932},
  keywords={Systematic mapping, Quality model, Ambient assisted living, ISO/IEC 25010, Quality attribute, Software},
  abstract={Context: Ambient Assisted Living (AAL) has become an essential, multidisciplinary research topic, aiming at providing software systems and services that assist people in their everyday life activities. Considering the critical nature of AAL systems, several initiatives have already contributed to the improvement of their quality, by mainly focusing on their non-functional requirements. Despite the importance of quality assurance in AAL systems, there is a lack of a comprehensive analysis on how quality assurance is performed in such systems. This fact might in turn lead to an absence of standardization with regard to the quality assurance process of these systems. Objective: We provide a broad, detailed panorama about the state of the art on quality models (QMs) and quality attributes (QAs) that are important for the AAL domain. Method: We performed a Systematic Mapping (SM). We used six publication databases to cover all published material pertinent for our SM. We initially obtained 287 studies that were filtered based on a set of well-defined inclusion/exclusion criteria, resulting into a set of 27 studies that were used for exploring QAs for AAL systems. Results: The most common QAs used in the development of AAL systems were identified and defined. We also characterized important critical attributes for software systems in the AAL domain. Additionally, QAs for some AAL sub-domains were defined. Furthermore, we investigated how QM&QA have been defined, evaluated, and used in that domain. Finally, we offered an analysis of the maturity of the studies identified in our SM. Conclusion: It is necessary to develop a complete QM that: (i) defines all common QAs for AAL systems; (ii) considers variability of QAs among AAL sub-domains; (iii) analyses dependences among QAs; (iv) offers indicators or metrics to measure QAs; and (v) offers means to assess and predict quality of AAL systems.}
}

@article{rayyan-727967104,
  title={Modeling and automatic code generation for wireless sensor network applications using model-driven or business process approaches: A systematic mapping study},
  year={2017},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={132},
  pages={50-71},
  author={Teixeira, Sergio and Agrizzi, Bruno Alves and Filho, José Gonçalves Pereira and Rossetto, Silvana and de Lima Baldam, Roquemar},
  url={https://www.sciencedirect.com/science/article/pii/S0164121217301255},
  keywords={Systematic mapping study, Model-driven development, Business process, Wireless sensor networks},
  abstract={This systematic mapping study investigates the modeling and automatic code generation initiatives for wireless sensor network applications based on the IEEE 802.15.4 standard, trying to understand the reasons, characteristics and methods used in the approaches available in the scientific literature, identifying research gaps and potential approaches that can be better exploited, indicating new possibilities of research. The focus is on studies that follow the Model-Driven or Business Process approaches.}
}

@article{rayyan-727967109,
  title={A systematic mapping study of web application testing},
  year={2013},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={55},
  number={8},
  pages={1374-1396},
  author={Garousi, Vahid and Mesbah, Ali and Betin-Can, Aysu and Mirshokraie, Shabnam},
  url={https://www.sciencedirect.com/science/article/pii/S0950584913000396},
  keywords={Bibliometrics, Systematic mapping, Paper repository, Testing, Web application},
  abstract={Context The Web has had a significant impact on all aspects of our society. As our society relies more and more on the Web, the dependability of web applications has become increasingly important. To make these applications more dependable, for the past decade researchers have proposed various techniques for testing web-based software applications. Our literature search for related studies retrieved 147 papers in the area of web application testing, which have appeared between 2000 and 2011. Objective As this research area matures and the number of related papers increases, it is important to systematically identify, analyze, and classify the publications and provide an overview of the trends in this specialized field. Method We review and structure the body of knowledge related to web application testing through a systematic mapping (SM) study. As part of this study, we pose two sets of research questions, define selection and exclusion criteria, and systematically develop and refine a classification schema. In addition, we conduct a bibliometrics analysis of the papers included in our study. Results Our study includes a set of 79 papers (from the 147 retrieved papers) published in the area of web application testing between 2000 and 2011. We present the results of our systematic mapping study. Our mapping data is available through a publicly-accessible repository. We derive the observed trends, for instance, in terms of types of papers, sources of information to derive test cases, and types of evaluations used in papers. We also report the demographics and bibliometrics trends in this domain, including top-cited papers, active countries and researchers, and top venues in this research area. Conclusion We discuss the emerging trends in web application testing, and discuss the implications for researchers and practitioners in this area. The results of our systematic mapping can help researchers to obtain an overview of existing web application testing approaches and indentify areas in the field that require more attention from the research community.}
}

@article{rayyan-727967112,
  title={Legal ontologies over time: A systematic mapping study},
  year={2019},
  journal={Expert Systems with Applications},
  issn={0957-4174},
  volume={130},
  pages={12-30},
  author={de Oliveira Rodrigues, Cleyton Mário and de Freitas, Frederico Luiz Gonçalves and Barreiros, Emanoel Francisco Spósito and de Azevedo, Ryan Ribeiro and de Almeida Filho, Adauto Trigueiro},
  url={https://www.sciencedirect.com/science/article/pii/S0957417419302398},
  keywords={Systematic mapping study, Legal expert system, Legal ontology, Legal theory, Semantic web},
  abstract={Over the last 30 years, AI & Law has provided breakthroughs in studies involving case-based reasoning, rule-based reasoning, information retrieval and, most recently, conceptual models for knowledge representation and reasoning, known as Legal Ontologies. Ontologies have been widely used by legal practitioners, scholars, and lay people in a variety of situations, such as simulating legal actions, semantic search and indexing, and to keep up-to-date with the continual change of laws and regulations. Given the high number of legal ontologies produced, the need to summarize this research realm through a well-defined methodological procedure is urgent need. This study presents the results of a systematic mapping of the literature, aiming at categorizing legal ontologies along certain dimensions, such as purpose, level of generality, underlying legal theories, among other aspects. The reasons to carry out a systematic mapping are twofold: in addition to explaining the maturation of the area over recent decades, it helps to avoid the old problem of reinventing the wheel. Through organizing and classifying what has already been produced, it is possible to realize that the development of legal ontologies can rise to the level of reusability where prefabricated models might be coupled with new and more complex ontologies for practical law.}
}

@article{rayyan-727967114,
  title={A systematic mapping study of mobile application testing techniques},
  year={2016},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={117},
  pages={334-356},
  author={Zein, Samer and Salleh, Norsaremah and Grundy, John},
  url={https://www.sciencedirect.com/science/article/pii/S0164121216300140},
  keywords={Software testing, Systematic mapping, Mobile application testing},
  abstract={The importance of mobile application specific testing techniques and methods has been attracting much attention of software engineers over the past few years. This is due to the fact that mobile applications are different than traditional web and desktop applications, and more and more they are moving to being used in critical domains. Mobile applications require a different approach to application quality and dependability and require an effective testing approach to build high quality and more reliable software. We performed a systematic mapping study to categorize and to structure the research evidence that has been published in the area of mobile application testing techniques and challenges that they have reported. Seventy nine (79) empirical studies are mapped to a classification schema. Several research gaps are identified and specific key testing issues for practitioners are identified: there is a need for eliciting testing requirements early during development process; the need to conduct research in real-world development environments; specific testing techniques targeting application life-cycle conformance and mobile services testing; and comparative studies for security and usability testing.}
}

@article{rayyan-727967118,
  title={Distributed virtual machine consolidation: A systematic mapping study},
  year={2018},
  journal={Computer Science Review},
  issn={1574-0137},
  volume={28},
  pages={118-130},
  author={Ashraf, Adnan and Byholm, Benjamin and Porres, Ivan},
  url={https://www.sciencedirect.com/science/article/pii/S1574013717300953},
  keywords={Cloud computing, Consolidation, Data center, Energy-efficiency, Placement, Virtual machine},
  abstract={Background: Virtual Machine (VM) consolidation is an effective technique to improve resource utilization and reduce energy footprint in cloud data centers. It can be implemented in a centralized or a distributed fashion. Distributed VM consolidation approaches are currently gaining popularity because they are often more scalable than their centralized counterparts and they avoid a single point of failure. Objective: To present a comprehensive, unbiased overview of the state-of-the-art on distributed VM consolidation approaches. Method: A Systematic Mapping Study (SMS) of the existing distributed VM consolidation approaches. Results: 19 papers on distributed VM consolidation categorized in a variety of ways. The results show that the existing distributed VM consolidation approaches use four types of algorithms, optimize a number of different objectives, and are often evaluated with experiments involving simulations. Conclusion: There is currently an increasing amount of interest on developing and evaluating novel distributed VM consolidation approaches. A number of research gaps exist where the focus of future research may be directed.}
}

@article{rayyan-727967123,
  title={Exploring software security approaches in software development lifecycle: A systematic mapping study},
  year={2017},
  journal={Computer Standards & Interfaces},
  issn={0920-5489},
  volume={50},
  pages={107-115},
  author={Mohammed, Nabil M and Niazi, Mahmood and Alshayeb, Mohammad and Mahmood, Sajjad},
  url={https://www.sciencedirect.com/science/article/pii/S0920548916301155},
  keywords={Systematic mapping study, Empirical study, Software development life cycle, Software security, Software},
  abstract={There is an increase use of security driven approaches to support software development activities, such as requirements, design and implementation. The objective of this paper is to identify the existing software security approaches used in the software development lifecycle (SDLC). In order to meet our goal, we conducted a systematic mapping study to identify the primary studies on the use of software security techniques in SDLC. In total, we selected and categorized 118 primary studies. After analyzing the selected studies, we identified 52 security approaches and we categorized them in to five main categories, namely, ‘secure requirements modeling', ‘vulnerability identification, adaption and mitigation', ‘software security focused process', ‘extended UML-based secure modeling profiles', ‘non UML-based secure modeling notations'. The results show that the most frequently used approaches are static analysis and dynamic analysis that provide security checks in the coding phase. In addition, our results show that many studies in this review considered security checks around the coding stage of software development. This work will assist software development organizations in better understanding the existing software security approaches used in the software development lifecycle. It can also provide researchers with a firm basis on which to develop new software security approaches.}
}

@article{rayyan-727967126,
  title={Model-based testing using UML activity diagrams: A systematic mapping study},
  year={2019},
  journal={Computer Science Review},
  issn={1574-0137},
  volume={33},
  pages={98-112},
  author={Ahmad, Tanwir and Iqbal, Junaid and Ashraf, Adnan and Truscan, Dragos and Porres, Ivan},
  url={https://www.sciencedirect.com/science/article/pii/S1574013718302314},
  keywords={Software testing, Systematic mapping study, Model-based testing, Test generation, UML activity diagram},
  abstract={Context: The Unified Modeling Language (UML) has become the de facto standard for software modeling. UML models are often used to visualize, understand, and communicate the structure and behavior of a system. UML activity diagrams (ADs) are often used to elaborate and visualize individual use cases. Due to their higher level of abstraction and process-oriented perspective, UML ADs are also highly suitable for model-based test generation. In the last two decades, different researchers have used UML ADs for test generation. Despite the growing use of UML ADs for model-based testing, there are currently no comprehensive and unbiased studies on the topic. Objective: To present a comprehensive and unbiased overview of the state-of-the-art on model-based testing using UML ADs. Method: We review and structure the current body of knowledge on model-based testing using UML ADs by performing a systematic mapping study using well-known guidelines. We pose nine research questions, outline our selection criteria, and develop a classification scheme. Results: The results comprise 41 primary studies analyzed against nine research questions. We also highlight the current trends and research gaps in model-based testing using UML ADs and discuss some shortcomings for researchers and practitioners working in this area. The results show that the existing approaches on model-based testing using UML ADs tend to rely on intermediate formats and formalisms for model verification and test generation, employ a multitude of graph-based coverage criteria, and use graph search algorithms. Conclusion: We present a comprehensive overview of the existing approaches on model-based testing using UML ADs. We conclude that (1) UML ADs are not being used for non-functional testing, (2) only a few approaches have been validated against realistic, industrial case studies, (3) most approaches target very restricted application domains, and (4) there is currently a clear lack of holistic approaches for model-based testing using UML ADs.}
}

@article{rayyan-727967127,
  title={Systematic mapping study in small business: The quest for contemporary understanding},
  year={2014},
  journal={Procedia - Social and Behavioral Sciences},
  issn={1877-0428},
  volume={143},
  pages={916-920},
  author={Moraes, Caroline and Philippsen, Luiz and Lirani, Heloisa and Yamanaka, Lie and Rosim, Daniela and Filho, Edmundo Escrivão},
  url={https://www.sciencedirect.com/science/article/pii/S1877042814044553},
  keywords={systematic mapping, A unified theory, mapping},
  abstract={A unified theory of small businesses has been widely proposed. Nevertheless there are very few studies about the main concerns in small business literature. Thus, a systematic mapping study of the available literature was conducted. The main purpose of this article is the classification and thematic analysis of the most relevant articles on small business research. Using the Web of Science® database, over 500 articles were selected with the string “small business” and its plural on the title. The articles were published from 2005 to 2013 and received over 10 citations. Titles and abstracts were analyzed in order to provide a view of the major themes and tendencies of the literature on small business. One major thematic area was established, “organizational environment”, which has grown in the last decade. On the other hand, classic themes such as “specificity”, “creation, failure and success”, “owner”, and “strategy” have declined considerably since the eighties, to be replaced by growing areas such as “management” and “new processes”. “Public policy”, “financing” and “functional areas” have remained fairly popular. Systematic mapping studies can provide an overview of the major contemporary themes and concerns regarding small business theory. Besides the academic contribution, understanding the major concerns will also have an impact on public policy, highlighting specific needs and priority projects. Additional studies should be performed, using more strings, such as “small firm(s)” or “small enterprise(s)”, and other relevant databases to determine possible gaps in the existing research.}
}

@article{rayyan-727967129,
  title={A systematic mapping study on text analysis techniques in software architecture},
  year={2018},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={144},
  pages={533-558},
  author={Bi, Tingting and Liang, Peng and Tang, Antony and Yang, Chen},
  url={https://www.sciencedirect.com/science/article/pii/S0164121218301493},
  keywords={Systematic mapping study, Software architecture, Text analysis technique, Software},
  abstract={Context Information from artifacts in each phase of the software development life cycle can potentially be mined to enhance architectural knowledge. Many text analysis techniques have been proposed for mining such artifacts. However, there is no comprehensive understanding of what artifacts these text analysis techniques analyze, what information they are able to extract or how they enhance architecting activities. Objective This systematic mapping study aims to study text analysis techniques for mining architecture-related artifacts and how these techniques have been used, and to identify the benefits and limitations of these techniques and tools with respect to enhancing architecting activities. Method We conducted a systematic mapping study and defined five research questions. We analyzed the results using descriptive statistics and qualitative analysis methods. Results Fifty-five studies were finally selected with the following results: (1) Current text analysis research emphasizes on architectural understanding and recovery. (2) A spectrum of text analysis techniques have been used in textual architecture information analysis. (3) Five categories of benefits and three categories of limitations were identified. Conclusions This study shows a steady interest in textual architecture information analysis. The results give clues for future research directions on improving architecture practice through using these text analysis techniques.}
}

@article{rayyan-727967133,
  title={The diffusion stages of business intelligence & analytics (BI&A): A systematic mapping study},
  year={2014},
  journal={Procedia Technology},
  issn={2212-0173},
  volume={16},
  pages={172-179},
  author={Côrte-Real, Nadine and Ruivo, Pedro and Oliveira, Tiago},
  url={https://www.sciencedirect.com/science/article/pii/S2212017314003077},
  keywords={adoption, benefits, BI&A, business intelligence & analytics, impacts, implementation, systematic mapping study, use, Intelligence},
  abstract={Business intelligence & analytics (BI&A) has evolved to become a foundational cornerstone of enterprise decision support. Since the way BI&A is implemented and assimilated is quite different among organizations is important to approach BI&A literature by four selected diffusion stages (adoption, implementation, use and impacts of use). The diffusion stages assume a crucial importance to track the BI&A evolution in organizations and justify the investment made. The main focus of this paper is to evidence BI&A research on its several diffusion stages. It provides an updated bibliography of BI&A articles published in the IS journal and conferences during the period of 2000 and 2013. A total of 30 articles from 11 journals and 8 conferences are reviewed. This study contributes to the BI&A research in three ways. This is the first systematic mapping study focused on BI&A diffusion stages. It contributes to see how BI&A stages have been analyzed (theories used, data collection methods, analysis methods and publication source). Finally, it observes that little attention has been given to BI&A post-adoption stages and proposes future research line on this area.}
}

@article{rayyan-727967135,
  title={Software business models from a distribution perspective: A systematic mapping study},
  year={2015},
  journal={Procedia Computer Science},
  issn={1877-0509},
  volume={64},
  pages={395-402},
  author={Heredia, Alberto and Colomo-Palacios, Ricardo and de Amescua, Antonio},
  url={https://www.sciencedirect.com/science/article/pii/S1877050915026514},
  keywords={systematic mapping, mobile apps., on-premise software, open-source software, SaaS, software business models, Software},
  abstract={Business models (BMs) describe how a company creates and delivers value to customers, the products or services that it offers and the compensation for them. Software companies need to be able to adopt different BMs to be successful in modern economy. Despite the number of publications on the field, there is still not a clear picture of software BMs. The purpose of this study is to structure and characterize the state of the art on software BMs with focus on sales and distribution models to help discover possible research gaps. The authors of this study conducted a systematic mapping study using relevant keywords to identify primary studies in the existing literature related to software BMs from a business management perspective. The search strategy returned 1871 papers and 51 were selected as primary studies. The analysis of results helps clarify the picture of software BMs and highlights the most relevant sources of papers. Results also reveal the broad interest of researchers on this topic. Most of the primary studies were related to service-based BMs, and to a lesser extent on product-based or open-source-based BMs; there is also an increase in the attention of researchers towards models built around mobile apps. While many authors report experience papers, only some authors validate or evaluate new proposals of sales and distribution models.}
}

@article{rayyan-727967136,
  title={Aspect-oriented model-driven code generation: A systematic mapping study},
  year={2013},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={55},
  number={2},
  pages={395-411},
  author={Mehmood, Abid and Jawawi, Dayang N A},
  url={https://www.sciencedirect.com/science/article/pii/S0950584912001863},
  keywords={Aspect-oriented software development, Code generation, Model-driven engineering, Systematic map},
  abstract={Context Model-driven code generation is being increasingly applied to enhance software development from perspectives of maintainability, extensibility and reusability. However, aspect-oriented code generation from models is an area that is currently underdeveloped. Objective In this study we provide a survey of existing research on aspect-oriented modeling and code generation to discover current work and identify needs for future research. Method A systematic mapping study was performed to find relevant studies. Classification schemes have been defined and the 65 selected primary studies have been classified on the basis of research focus, contribution type and research type. Results The papers of solution proposal research type are in a majority. All together aspect-oriented modeling appears being the most focused area divided into modeling notations and process (36%) and model composition and interaction management (26%). The majority of contributions are methods. Conclusion Aspect-oriented modeling and composition mechanisms have been significantly discussed in existing literature while more research is needed in the area of model-driven code generation. Furthermore, we have observed that previous research has frequently focused on proposing solutions and thus there is need for research that validates and evaluates the existing proposals in order to provide firm foundations for aspect-oriented model-driven code generation.}
}

@article{rayyan-727967138,
  title={Reducing test effort: A systematic mapping study on existing approaches},
  year={2012},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={54},
  number={10},
  pages={1092-1106},
  author={Elberzhager, Frank and Rosbach, Alla and Münch, Jürgen and Eschbach, Robert},
  url={https://www.sciencedirect.com/science/article/pii/S0950584912000894},
  keywords={Software testing, Mapping study, Quality assurance, Efficiency improvement, Test effort reduction},
  abstract={Context Quality assurance effort, especially testing effort, is often a major cost factor during software development, which sometimes consumes more than 50% of the overall development effort. Consequently, one major goal is often to reduce testing effort. Objective The main goal of the systematic mapping study is the identification of existing approaches that are able to reduce testing effort. Therefore, an overview should be presented both for researchers and practitioners in order to identify, on the one hand, future research directions and, on the other hand, potential for improvements in practical environments. Method Two researchers performed a systematic mapping study, focusing on four databases with an initial result set of 4020 articles. Results In total, we selected and categorized 144 articles. Five different areas were identified that exploit different ways to reduce testing effort: approaches that predict defect-prone parts or defect content, automation, test input reduction approaches, quality assurance techniques applied before testing, and test strategy approaches. Conclusion The results reflect an increased interest in this topic in recent years. A lot of different approaches have been developed, refined, and evaluated in different environments. The highest attention was found with respect to automation and prediction approaches. In addition, some input reduction approaches were found. However, in terms of combining early quality assurance activities with testing to reduce test effort, only a small number of approaches were found. Due to the continuous challenge of reducing test effort, future research in this area is expected.}
}

@article{rayyan-727967144,
  title={Interactions between environmental sustainability goals and software product quality: A mapping study},
  year={2018},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={95},
  pages={108-129},
  author={García-Mireles, Gabriel Alberto and Moraga, Mª Ángeles and García, Félix and Calero, Coral and Piattini, Mario},
  url={https://www.sciencedirect.com/science/article/pii/S0950584917303142},
  keywords={ISO/IEC 25010, Environmental sustainability, Greenability, Interaction, Software product quality, Software},
  abstract={Context Sustainability is considered as either a quality requirement or a quality characteristic that should be included in software when environmental protection concerns are being taken into account. However, addressing sustainability in software projects might have an impact on the quality of the software product delivered. Conflicting goals between sustainability and particular software product characteristics should be studied when developing application software, since achieving users' requirements can be a hindrance in the quest to meet sustainability goals. Objective This paper aims to provide an overview of the approaches found in the literature for dealing with interactions between software product quality and sustainability in the context of application software. Method A systematic mapping study is conducted to identify practices for managing interactions between software quality characteristics and sustainability. The selected papers are classified according to the quality characteristic considered and their influence on sustainability. Results Most of the 66 selected papers focused on validating current technologies concerning their support for sustainability (46%%). The interaction between performance efficiency and energy efficiency is what is reported most and there is a fairly positive interaction. In addition, reliability and usability point to a positive interaction with energy efficiency, while security shows a conflicting interaction with energy efficiency. Functional suitability and maintainability can present both positive and negative interaction, with different goals derived from environmental sustainability. Conclusions Interactions between software quality and sustainability have been addressed within an explorative approach. There is a need for additional research work to characterize the impact of interaction on both software quality and sustainability. Furthermore, proposals should be validated in industrial settings.}
}

@article{rayyan-727967148,
  title={Open source software ecosystems: A Systematic mapping},
  year={2017},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={91},
  pages={160-185},
  author={Franco-Bedoya, Oscar and Ameller, David and Costal, Dolors and Franch, Xavier},
  url={https://www.sciencedirect.com/science/article/pii/S0950584917304512},
  keywords={Systematic mapping, Literature review, Software ecosystem, Open source software, OSS, OSSECO, SECO, Software},
  abstract={Context: Open source software (OSS) and software ecosystems (SECOs) are two consolidated research areas in software engineering. OSS influences the way organizations develop, acquire, use and commercialize software. SECOs have emerged as a paradigm to understand dynamics and heterogeneity in collaborative software development. For this reason, SECOs appear as a valid instrument to analyze OSS systems. However, there are few studies that blend both topics together. Objective: The purpose of this study is to evaluate the current state of the art in OSS ecosystems (OSSECOs) research, specifically: (a) what the most relevant definitions related to OSSECOs are; (b) what the particularities of this type of SECO are; and (c) how the knowledge about OSSECO is represented. Method: We conducted a systematic mapping following recommended practices. We applied automatic and manual searches on different sources and used a rigorous method to elicit the keywords from the research questions and selection criteria to retrieve the final papers. As a result, 82 papers were selected and evaluated. Threats to validity were identified and mitigated whenever possible. Results: The analysis allowed us to answer the research questions. Most notably, we did the following: (a) identified 64 terms related to the OSSECO and arranged them into a taxonomy; (b) built a genealogical tree to understand the genesis of the OSSECO term from related definitions; (c) analyzed the available definitions of SECO in the context of OSS; and (d) classified the existing modelling and analysis techniques of OSSECOs. Conclusion: As a summary of the systematic mapping, we conclude that existing research on several topics related to OSSECOs is still scarce (e.g., modelling and analysis techniques, quality models, standard definitions, etc.). This situation calls for further investigation efforts on how organizations and OSS communities actually understand OSSECOs.}
}

@article{rayyan-727967149,
  title={Continuous deployment of software intensive products and services: A systematic mapping study},
  year={2017},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={123},
  pages={263-291},
  author={Rodríguez, Pilar and Haghighatkhah, Alireza and Lwakatare, Lucy Ellen and Teppola, Susanna and Suomalainen, Tanja and Eskeli, Juho and Karvonen, Teemu and Kuvaja, Pasi and Verner, June M and Oivo, Markku},
  url={https://www.sciencedirect.com/science/article/pii/S0164121215002812},
  keywords={Systematic mapping study, Software development, Continuous deployment, Software},
  abstract={The software intensive industry is moving towards the adoption of a value-driven and adaptive real-time business paradigm. The traditional view of software as an item that evolves through releases every few months is being replaced by the continuous evolution of software functionality. This study aims to classify and analyse the literature related to continuous deployment in the software domain in order to scope the phenomenon, provide an overview of the state-of-the-art, investigate the scientific evidence in the reported results and identify areas suitable for further research. We conducted a systematic mapping study and classified the continuous deployment literature. The benefits and challenges related to continuous deployment were also analysed. RESULTS: The systematic mapping study includes 50 primary studies published between 2001 and 2014. An in-depth analysis of the primary studies revealed ten recurrent themes that characterize continuous deployment and provide researchers with directions for future work. In addition, a set of benefits and challenges of which practitioners may take advantage were identified. CONCLUSION: Overall, although the topic area is very promising, it is still in its infancy, thus offering a plethora of new opportunities for both researchers and software intensive companies.}
}

@article{rayyan-727967157,
  title={A systematic mapping study on software product line evolution: From legacy system reengineering to product line refactoring},
  year={2013},
  journal={Science of Computer Programming},
  issn={0167-6423},
  volume={78},
  number={8},
  pages={1010-1034},
  author={Laguna, Miguel A and Crespo, Yania},
  url={https://www.sciencedirect.com/science/article/pii/S0167642312000895},
  keywords={Software product line, Evolution, Legacy system, Reengineering, Refactoring, Software},
  abstract={Software product lines (SPLs) are used in industry to develop families of similar software systems. Legacy systems, either highly configurable or with a story of versions and local variations, are potential candidates for reconfiguration as SPLs using reengineering techniques. Existing SPLs can also be restructured using specific refactorings to improve their internal quality. Although many contributions (including industrial experiences) can be found in the literature, we lack a global vision covering the whole life cycle of an evolving product line. This study aims to survey existing research on the reengineering of legacy systems into SPLs and the refactoring of existing SPLs in order to identify proven approaches and pending challenges for future research in both subfields. We launched a systematic mapping study to find as much literature as possible, covering the diverse terms involved in the search string (restructuring, refactoring, reengineering, etc. always connected with SPLs) and filtering the papers using relevance criteria. The 74 papers selected were classified with respect to several dimensions: main focus, research and contribution type, academic or industrial validation if included, etc. We classified the research approaches and analyzed their feasibility for use in industry. The results of the study indicate that the initial works focused on the adaptation of generic reengineering processes to SPL extraction. Starting from that foundation, several trends have been detected in recent research: the integrated or guided reengineering of (typically object-oriented) legacy code and requirements; specific aspect-oriented or feature-oriented refactoring into SPLs, and more recently, refactoring for the evolution of existing product lines. A majority of papers include academic or industrial case studies, though only a few are based on quantitative data. The degree of maturity of both subfields is different: Industry examples for the reengineering of the legacy system subfield are abundant, although more evaluation research is needed to provide better evidence for adoption in industry. Product line evolution through refactoring is an emerging topic with some pending challenges. Although it has recently received some attention, the theoretical foundation is rather limited in this subfield and should be addressed in the near future. To sum up, the main contributions of this work are the classification of research approaches as well as the analysis of remaining challenges, open issues, and research opportunities.}
}

@article{rayyan-727967158,
  title={A systematic mapping study of software product lines testing},
  year={2011},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={53},
  number={5},
  pages={407-423},
  author={da Mota Silveira Neto, Paulo Anselmo and do Carmo Machado, Ivan and McGregor, John D and de Almeida, Eduardo Santana and de Lemos Meira, Silvio Romero},
  url={https://www.sciencedirect.com/science/article/pii/S0950584910002193},
  keywords={Software product lines, Software testing, Mapping study, Software},
  abstract={Context In software development, Testing is an important mechanism both to identify defects and assure that completed products work as specified. This is a common practice in single-system development, and continues to hold in Software Product Lines (SPL). Even though extensive research has been done in the SPL Testing field, it is necessary to assess the current state of research and practice, in order to provide practitioners with evidence that enable fostering its further development. Objective This paper focuses on Testing in SPL and has the following goals: investigate state-of-the-art testing practices, synthesize available evidence, and identify gaps between required techniques and existing approaches, available in the literature. Method A systematic mapping study was conducted with a set of nine research questions, in which 120 studies, dated from 1993 to 2009, were evaluated. Results Although several aspects regarding testing have been covered by single-system development approaches, many cannot be directly applied in the SPL context due to specific issues. In addition, particular aspects regarding SPL are not covered by the existing SPL approaches, and when the aspects are covered, the literature just gives brief overviews. This scenario indicates that additional investigation, empirical and practical, should be performed. Conclusion The results can help to understand the needs in SPL Testing, by identifying points that still require additional investigation, since important aspects regarding particular points of software product lines have not been addressed yet.}
}

@article{rayyan-727967161,
  title={A mapping study to investigate component-based software system metrics},
  year={2013},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={86},
  number={3},
  pages={587-603},
  author={Abdellatief, Majdi and Sultan, Abu Bakar Md and Ghani, Abdul Azim Abdul and Jabar, Marzanah A},
  url={https://www.sciencedirect.com/science/article/pii/S0164121212002798},
  keywords={Systematic mapping study, Software metrics, Component-based software system, Software components, Software quality, Metronidazole, Software},
  abstract={A component-based software system (CBSS) is a software system that is developed by integrating components that have been deployed independently. In the last few years, many researchers have proposed metrics to evaluate CBSS attributes. However, the practical use of these metrics can be difficult. For example, some of the metrics have concepts that either overlap or are not well defined, which could hinder their implementation. The aim of this study is to understand, classify and analyze existing research in component-based metrics, focusing on approaches and elements that are used to evaluate the quality of CBSS and its components from a component consumer's point of view. This paper presents a systematic mapping study of several metrics that were proposed to measure the quality of CBSS and its components. We found 17 proposals that could be applied to evaluate CBSSs, while 14 proposals could be applied to evaluate individual components in isolation. Various elements of the software components that were measured are reviewed and discussed. Only a few of the proposed metrics are soundly defined. The quality assessment of the primary studies detected many limitations and suggested guidelines for possibilities for improving and increasing the acceptance of metrics. However, it remains a challenge to characterize and evaluate a CBSS and its components quantitatively. For this reason, much effort must be made to achieve a better evaluation approach in the future.}
}

@article{rayyan-727967162,
  title={How have we evaluated software pattern application? A systematic mapping study of research design practices},
  year={2015},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={65},
  pages={14-38},
  author={Riaz, Maria and Breaux, Travis and Williams, Laurie},
  url={https://www.sciencedirect.com/science/article/pii/S0950584915000774},
  keywords={Systematic review, Mapping study, Empirical design, Empirical evaluation, Software pattern, Research Design, Software},
  abstract={Context Software patterns encapsulate expert knowledge for constructing successful solutions to recurring problems. Although a large collection of software patterns is available in literature, empirical evidence on how well various patterns help in problem solving is limited and inconclusive. The context of these empirical findings is also not well understood, limiting applicability and generalizability of the findings. Objective To characterize the research design of empirical studies exploring software pattern application involving human participants. Method We conducted a systematic mapping study to identify and analyze 30 primary empirical studies on software pattern application, including 24 original studies and 6 replications. We characterize the research design in terms of the questions researchers have explored and the context of empirical research efforts. We also classify the studies in terms of measures used for evaluation, and threats to validity considered during study design and execution. Results Use of software patterns in maintenance is the most commonly investigated theme, explored in 16 studies. Object-oriented design patterns are evaluated in 14 studies while 4 studies evaluate architectural patterns. We identified 10 different constructs with 31 associated measures used to evaluate software patterns. Measures for ‘efficiency' and ‘usability' are commonly used to evaluate the problem solving process. While measures for ‘completeness', ‘correctness' and ‘quality' are commonly used to evaluate the final artifact. Overall, ‘time to complete a task' is the most frequently used measure, employed in 15 studies to measure ‘efficiency'. For qualitative measures, studies do not report approaches for minimizing biases 27% of the time. Nine studies do not discuss any threats to validity. Conclusion Subtle differences in study design and execution can limit comparison of findings. Establishing baselines for participants' experience level, providing appropriate training, standardizing problem sets, and employing commonly used measures to evaluate performance can support replication and comparison of results across studies.}
}

@article{rayyan-727967171,
  title={Development of service-oriented architectures using model-driven development: A mapping study},
  year={2015},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={62},
  pages={42-66},
  author={Ameller, David and Burgués, Xavier and Collell, Oriol and Costal, Dolors and Franch, Xavier and Papazoglou, Mike P},
  url={https://www.sciencedirect.com/science/article/pii/S0950584915000361},
  keywords={Model-driven development, Mapping study, SOA, Service-oriented architecture, State of the art, MDD},
  abstract={Context Model-Driven Development (MDD) and Service-Oriented Architecture (SOA) are two challenging research areas in software engineering. MDD is about improving software development whilst SOA is a service-based conceptual development style, therefore investigating the available proposals in the literature to use MDD when developing SOA may be insightful. However, no studies have been found with this purpose. Objective This work aims at assessing the state of the art in MDD for SOA systems. It mainly focuses on: what are the characteristics of MDD approaches that support SOA; what types of SOA are supported; how do they handle non-functional requirements. Method We conducted a mapping study following a rigorous protocol. We identified the representative set of venues that should be included in the study. We applied a search string over the set of selected venues. As result, 129 papers were selected and analysed (both frequency analysis and correlation analysis) with respect to the defined classification criteria derived from the research questions. Threats to validity were identified and mitigated whenever possible. Results The analysis allows us to answer the research questions. We highlight: (1) predominance of papers from Europe and written by researchers only; (2) predominance of top-down transformation in software development activities; (3) inexistence of consolidated methods; (4) significant percentage of works without tool support; (5) SOA systems and service compositions more targeted than single services and SOA enterprise systems; (6) limited use of metamodels; (7) very limited use of NFRs; and (8) limited application in real cases. Conclusion This mapping study does not just provide the state of the art in the topic, but also identifies several issues that deserve investigation in the future, for instance the need of methods for activities other than software development (e.g., migration) or the need of conducting more real case studies.}
}

@article{rayyan-727967174,
  title={Programming languages for data-Intensive HPC applications: A systematic mapping study},
  year={2020},
  journal={Parallel Computing},
  issn={0167-8191},
  volume={91},
  pages={102584},
  author={Amaral, Vasco and Norberto, Beatriz and Goulão, Miguel and Aldinucci, Marco and Benkner, Siegfried and Bracciali, Andrea and Carreira, Paulo and Celms, Edgars and Correia, Luís and Grelck, Clemens and Karatza, Helen and Kessler, Christoph and Kilpatrick, Peter and Martiniano, Hugo and Mavridis, Ilias and Pllana, Sabri and Respício, Ana and Simão, José and Veiga, Luís and Visa, Ari},
  url={https://www.sciencedirect.com/science/article/pii/S0167819119301759},
  keywords={Big data, Data-intensive applications, Domain-Specific language (DSL), General-Purpose language (GPL), High performance computing (HPC), Programming languages, Systematic mapping study (SMS)},
  abstract={A major challenge in modelling and simulation is the need to combine expertise in both software technologies and a given scientific domain. When High-Performance Computing (HPC) is required to solve a scientific problem, software development becomes a problematic issue. Considering the complexity of the software for HPC, it is useful to identify programming languages that can be used to alleviate this issue. Because the existing literature on the topic of HPC is very dispersed, we performed a Systematic Mapping Study (SMS) in the context of the European COST Action cHiPSet. This literature study maps characteristics of various programming languages for data-intensive HPC applications, including category, typical user profiles, effectiveness, and type of articles. We organised the SMS in two phases. In the first phase, relevant articles are identified employing an automated keyword-based search in eight digital libraries. This lead to an initial sample of 420 papers, which was then narrowed down in a second phase by human inspection of article abstracts, titles and keywords to 152 relevant articles published in the period 2006–2018. The analysis of these articles enabled us to identify 26 programming languages referred to in 33 of relevant articles. We compared the outcome of the mapping study with results of our questionnaire-based survey that involved 57 HPC experts. The mapping study and the survey revealed that the desired features of programming languages for data-intensive HPC applications are portability, performance and usability. Furthermore, we observed that the majority of the programming languages used in the context of data-intensive HPC applications are text-based general-purpose programming languages. Typically these have a steep learning curve, which makes them difficult to adopt. We believe that the outcome of this study will inspire future research and development in programming languages for data-intensive HPC applications.}
}

@article{rayyan-727967175,
  title={Model-based testing of software product lines: Mapping study and research roadmap},
  year={2020},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={167},
  pages={110608},
  author={Petry, Kleber L and OliveiraJr, Edson and Zorzo, Avelino F},
  url={https://www.sciencedirect.com/science/article/pii/S0164121220300868},
  keywords={Systematic mapping study, Software product line, MBT Roadmap, Model-b-ased testing, Reuse of test cases, Variability, Software},
  abstract={Model-Based Testing (MBT) has been successfully applied to Software Product Lines (SPL). This paper provides a panorama of state-of-the-art on MBT of SPLs. We performed a systematic mapping for answering questions related with domains, approaches, solution types, variability, test case automation, artifacts, and evaluation. We built a roadmap from 44 selected studies. Main obtained results are: Software and Automotive domains are most considered; Black-box testing is widely performed; most studies have fully-automated support; variability is considered in most studies; Finite State Machines is the most used model to test SPLs; Behavioral-based and Scenario-based are the most used models; Case Studies and Experiments are used to evaluate MBT solutions and the majority is performed in industrial environments; traceability is not widely explored for MBT solutions. Furthermore, we provide a roadmap synthesizing studies based on used models, more formal artifacts, supporting tools, variability management, (semi-)automation, and traceability. The roadmap contributes to identify related primary studies based on given artifacts, variability management, tools, automation, and traceability techniques and to identify, from a given primary study, which artifacts, tools, variability management, automation and traceability techniques are related. Therefore, the roadmap serves as a guide to researchers and practitioners on how to model-based test SPLs.}
}

@article{rayyan-727967177,
  title={A systematic mapping study on the combination of static and dynamic quality assurance techniques},
  year={2012},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={54},
  number={1},
  pages={1-15},
  author={Elberzhager, Frank and Münch, Jürgen and Nha, Vi Tran Ngoc},
  url={https://www.sciencedirect.com/science/article/pii/S0950584911001388},
  keywords={Systematic mapping study, Testing, Combination, Dynamic quality assurance, Inspection, Static quality assurance},
  abstract={Context A lot of different quality assurance techniques exist to ensure high quality products. However, most often they are applied in isolation. A systematic combination of different static and dynamic quality assurance techniques promises to exploit synergy effects, such as higher defect detection rates or reduced quality assurance costs. However, a systematic overview of such combinations and reported evidence about achieving synergy effects with such kinds of combinations is missing. Objective The main goal of this article is the classification and thematic analysis of existing approaches that combine different static and dynamic quality assurance technique, including reported effects, characteristics, and constraints. The result is an overview of existing approaches and a suitable basis for identifying future research directions. Method A systematic mapping study was performed by two researchers, focusing on four databases with an initial result set of 2498 articles, covering articles published between 1985 and 2010. Results In total, 51 articles were selected and classified according to multiple criteria. The two main dimensions of a combination are integration (i.e., the output of one quality assurance technique is used for the second one) and compilation (i.e., different quality assurance techniques are applied to ensure a common goal, but in isolation). The combination of static and dynamic analyses is one of the most common approaches and usually conducted in an integrated manner. With respect to the combination of inspection and testing techniques, this is done more often in a compiled way than in an integrated way. Conclusion The results show an increased interest in this topic in recent years, especially with respect to the integration of static and dynamic analyses. Inspection and testing techniques are currently mostly performed in an isolated manner. The integration of inspection and testing techniques is a promising research direction for the exploitation of additional synergy effects.}
}

@article{rayyan-727967179,
  title={Quality models for web services: A systematic mapping},
  year={2014},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={56},
  number={10},
  pages={1167-1182},
  author={Oriol, Marc and Marco, Jordi and Franch, Xavier},
  url={https://www.sciencedirect.com/science/article/pii/S0950584914000822},
  keywords={Systematic mapping, Web service, Quality model, Quality of service},
  abstract={Context Quality of Service (QoS) is a major issue in various web service related activities. Quality models have been proposed as the engineering artefact to provide a common framework of understanding for QoS, by defining the quality factors that apply to web service usage. Objective The goal of this study is to evaluate the current state of the art of the proposed quality models for web services, specifically: (1) which are these proposals and how are they related; (2) what are their structural characteristics; (3) what quality factors are the most and least addressed; and (4) what are their most consolidated definitions. Method We have conducted a systematic mapping by defining a robust protocol that combines automatic and manual searches from different sources. We used a rigorous method to elicitate the keywords from the research questions and a selection criteria to retrieve the final papers to evaluate. We have adopted the ISO/IEC 25010 standard to articulate our analysis. Results We have evaluated 47 different quality models from 65 papers that fulfilled the selection criteria. By analyzing in depth these quality models, we have: (1) distributed the proposals along the time dimension and identified their relationships; (2) analyzed their size (visualizing the number of nodes and levels) and definition coverage (as indicator of quality of the proposals); (3) quantified the coverage of the different ISO/IEC 25010 quality factors by the proposals; (4) identified the quality factors that appeared in at least 30% of the surveyed proposals and provided the most consolidated definitions for them. Conclusions We believe that this panoramic view on the anatomy of the quality models for web services may be a good reference for prospective researchers and practitioners in the field and especially may help avoiding the definition of new proposals that do not align with current research.}
}

@article{rayyan-727967180,
  title={A systematic mapping study on open information extraction},
  year={2018},
  journal={Expert Systems with Applications},
  issn={0957-4174},
  volume={112},
  pages={372-387},
  author={Glauber, Rafael and Barreiro Claro, Daniela},
  url={https://www.sciencedirect.com/science/article/pii/S0957417418303932},
  keywords={Systematic mapping study, Open information extraction, Open knowledge acquisition, Open relation extraction, Open relation mapping, Information Storage and Retrieval},
  abstract={Open information extraction (Open IE) is a task for extracting relationship triples in plain texts without previously determining these relationships. The Open IE systems are generally applied to solutions on the web-scale such improving question answering systems, ontology constructions, document filtering and clustering. Since 2007, within the first Open IE system TEXTRUNNER, other related works have been proposed in this area. Despite other secondary studies on Open IE, useful information available to initiate new research in the area is limited. Thus, we propose a review of the literature in Open IE by a systematic mapping study. We have retrieved 2484 articles about Open IE in Science Direct, IEEE Xplore, ACM Digital Library, Scopus and Google Scholar databases. Among them, 2411 were filtered by exclusion criteria proposed in our systematic mapping protocol. The remaining 73 papers represent the state-of-the-art from the past seven years. Different researchers have proposed important contributions and have pointed out some open problems for Open IE. As a result, we summarized these contributions and identified significant gaps that could be envisioned as future works.}
}

@article{rayyan-727967182,
  title={Cost, benefits and quality of software development documentation: A systematic mapping},
  year={2015},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={99},
  pages={175-198},
  author={Zhi, Junji and Garousi-Yusifoğlu, Vahid and Sun, Bo and Garousi, Golara and Shahnewaz, Shawn and Ruhe, Guenther},
  url={https://www.sciencedirect.com/science/article/pii/S0164121214002131},
  keywords={Systematic mapping, Documentation benefit, Software documentation, Software},
  abstract={Context Software documentation is an integral part of any software development process. Researchers and practitioners have expressed concerns about costs, benefits and quality of software documentation in practice. On the one hand, there is a lack of a comprehensive model to evaluate the quality of documentation. On the other hand, researchers and practitioners need to assess whether documentation cost outweighs its benefit. Objectives In this study, we aim to summarize the existing literature and provide an overview of the field of software documentation cost, benefit and quality. Method We use the systematic-mapping methodology to map the existing body of knowledge related to software documentation cost, benefit and quality. To achieve our objectives, 11 Research Questions (RQ) are raised. The primary papers are carefully selected. After applying the inclusion and exclusion criteria, our study pool included a set of 69 papers from 1971 to 2011. A systematic map is developed and refined iteratively. Results We present the results of a systematic mapping covering different research aspects related to software documentation cost, benefit and quality (RQ 1–11). Key findings include: (1) validation research papers are dominating (27 papers), followed by solution proposals (21 papers). (2) Most papers (61 out of 69) do not mention the development life-cycle model explicitly. Agile development is only mentioned in 6 papers. (3) Most papers include only one “System under Study” (SUS) which is mostly academic prototype. The average number of participants in survey-based papers is 106, the highest one having approximately 1000 participants. (4) In terms of focus of papers, 50 papers focused on documentation quality, followed by 37 papers on benefit, and 12 papers on documentation cost. (5) The quality attributes of documentation that appear in most papers are, in order: completeness, consistency and accessibility. Additionally, improved meta-models for documentation cost, benefit and quality are also presented. Furthermore, we have created an online paper repository of the primary papers analyzed and mapped during this study. Conclusion Our study results show that this research area is emerging but far from mature. Firstly, documentation cost aspect seems to have been neglected in the existing literature and there are no systematic methods or models to measure cost. Also, despite a substantial number of solutions proposed during the last 40 years, more and stronger empirical evidences are still needed to enhance our understanding of this area. In particular, what we expect includes (1) more validation or evaluation studies; (2) studies involving large-scale development projects, or from large number of study participants of various organizations; (3) more industry-academia collaborations; (4) more estimation models or methods to assess documentation quality, benefit and, especially, cost.}
}

@article{rayyan-727967184,
  title={Architecting with microservices: A systematic mapping study},
  year={2019},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={150},
  pages={77-97},
  author={Di Francesco, Paolo and Lago, Patricia and Malavolta, Ivano},
  url={https://www.sciencedirect.com/science/article/pii/S0164121219300019},
  keywords={Systematic mapping study, Software architecture, Microservices},
  abstract={Context A microservice architecture is composed of a set of small services, each running in its own process and communicating with lightweight mechanisms. Many aspects on architecting with microservices are still unexplored and existing research is still far from being crispy clear. Objective We aim at identifying, classifying, and evaluating the state of the art on architecting with microservices from the following perspectives: publication trends, focus of research, and potential for industrial adoption. Method We apply the systematic mapping methodology. We rigorously selected 103 primary studies and we defined and applied a classification framework to them for extracting key information for subsequent analysis. We synthesized the obtained data and produced a clear overview of the state of the art. Results This work contributes with (i) a classification framework for research studies on architecting with microservices, (ii) a systematic map of current research of the field, (iii) an evaluation of the potential for industrial adoption of research results, and (iv) a discussion of emerging findings and implications for future research. Conclusion This study provides a solid, rigorous, and replicable picture of the state of the art on architecting with microservices. Its results can benefit both researchers and practitioners of the field.}
}

@article{rayyan-727967186,
  title={Requirement-driven evolution in software product lines: A systematic mapping study},
  year={2016},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={122},
  pages={110-143},
  author={Montalvillo, Leticia and Díaz, Oscar},
  url={https://www.sciencedirect.com/science/article/pii/S0164121216301510},
  keywords={Software product lines, Systematic mapping study, Evolution, Software},
  abstract={CONTEXT. Software Product Lines (SPLs) aim to support the development of a whole family of software products through systematic reuse of shared assets. As SPLs exhibit a long life-span, evolution is an even greater concern than for single-systems. For the purpose of this work, evolution refers to the adaptation of the SPL as a result of changing requirements. Hence, evolution is triggered by requirement changes, and not by bug fixing or refactoring. OBJECTIVE. Research on SPL evolution has not been previously mapped. This work provides a mapping study along Petersen's and Kichenham's guidelines, to identify strong areas of knowledge, trends and gaps. RESULTS. We identified 107 relevant contributions. They were classified according to four facets: evolution activity (e.g., identify, analyze and plan, implement), product-derivation approach (e.g., annotation-based, composition-based), research type (e.g., solution, experience, evaluation), and asset type (i.e., variability model, SPL architecture, code assets and products). CONCLUSION. Analyses of the results indicate that “Solution proposals” are the most common type of contribution (31%). Regarding the evolution activity, “Implement change” (43%) and “Analyze and plan change” (37%) are the most covered ones. A finer-grained analysis uncovered some tasks as being underexposed. A detailed description of the 107 papers is also included.}
}

@article{rayyan-727967188,
  title={The day 1 c-its application green light optimal speed Advisory—A mapping study},
  year={2020},
  journal={Transportation Research Procedia},
  issn={2352-1465},
  volume={49},
  pages={170-182},
  author={Mellegård, Niklas and Reichenberg, Frida},
  url={https://www.sciencedirect.com/science/article/pii/S2352146520307365},
  keywords={Mapping study, C-ITS, Green Light Optimal Speed Advisory (GLOSA), Traffic efficiency},
  abstract={This article reports on a mapping study to investigate the C-ROADS Day 1 C-ITS application Green Light Optimal Speed Advisory (GLOSA). In the study, 64 publications between 2006 and 2019 where reviewed and classified according to a schema developed using thematic analysis of the selected publications. Among the findings were that the typical publication evaluates through simulation benefits for the equipped vehicle, leaving considerable gaps in investigations of societal effects. Additionally, there is a lack of investigation on driver behaviour, both for the equipped vehicle and for fellow road users—the ability to accurately model such behaviour is necessary for reliable simulation results.}
}

@article{rayyan-727967189,
  title={A systematic mapping study on microservices architecture in DevOps},
  year={2020},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={170},
  pages={110798},
  author={Waseem, Muhammad and Liang, Peng and Shahin, Mojtaba},
  url={https://www.sciencedirect.com/science/article/pii/S0164121220302053},
  keywords={Systematic Mapping Study, DevOps, Microservices Architecture},
  abstract={Context: Applying Microservices Architecture (MSA) in DevOps has received significant attention in recent years. However, there exists no comprehensive review of the state of research on this topic. Objective: This work aims to systematically identify, analyze, and classify the literature on MSA in DevOps. Methods: A Systematic Mapping Study (SMS) has been conducted on the literature published between January 2009 and July 2018. Results: Forty-seven studies were finally selected and the key results are: (1) Three themes on the research on MSA in DevOps are “microservices development and operations in DevOps”, “approaches and tool support for MSA based systems in DevOps”, and “MSA migration experiences in DevOps”. (2) 24 problems with their solutions regarding implementing MSA in DevOps are identified. (3) MSA is mainly described by using boxes and lines. (4) Most of the quality attributes are positively affected when employing MSA in DevOps. (5) 50 tools that support building MSA based systems in DevOps are collected. (6) The combination of MSA and DevOps has been applied in a wide range of application domains. Conclusion: The results and findings will benefit researchers and practitioners to conduct further research and bring more dedicated solutions for the issues of MSA in DevOps.}
}

@article{rayyan-727967193,
  title={Software product lines traceability: A systematic mapping study},
  year={2017},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={84},
  pages={1-18},
  author={Vale, Tassio and de Almeida, Eduardo Santana and Alves, Vander and Kulesza, Uirá and Niu, Nan and de Lima, Ricardo},
  url={https://www.sciencedirect.com/science/article/pii/S0950584916304463},
  keywords={Software product lines, Systematic mapping study, Software reuse, Software and systems traceability, Software},
  abstract={Context: Traceability in Software Product Lines (SPL) is the ability to interrelate software engineering artifacts through required links to answer specific questions related to the families of products and underlying development processes. Despite the existence of studies to map out available evidence on traceability for single systems development, there is a lack of understanding on common strategies, activities, artifacts, and research gaps for SPL traceability. Objective: This paper analyzes 62 studies dating from 2001 to 2015 and discusses seven aspects of SPL traceability: main goals, strategies, application domains, research intensity, research challenges, rigor, and industrial relevance. In addition to the analysis, this paper also synthesizes the available evidence, identifies open issues and points out areas calling for further research. Method: To gather evidence, we defined a mapping study process adapted from existing guidelines. Driven by a set of research questions, this process comprises three major phases: planning, conducting, and documenting the review. Results: This work provides a structured understanding of SPL traceability, indicating areas for further research. The lack of evidence regarding the application of research methods indicates the need for more rigorous SPL traceability studies with better description of context, study design, and limitations. For practitioners, although most identified studies have low industrial relevance, a few of them have high relevance and thus could provide some decision making support for application of SPL traceability in practice. Conclusions: This work concludes that SPL traceability is maturing and pinpoints areas where further investigation should be performed. As future work, we intend to improve the comparison between traceability proposals for SPL and single-system development.}
}

@article{rayyan-727967194,
  title={A systematic map of medical data preprocessing in knowledge discovery},
  year={2018},
  journal={Computer Methods and Programs in Biomedicine},
  issn={0169-2607},
  volume={162},
  pages={69-85},
  author={Idri, A and Benhar, H and Fernández-Alemán, J L and Kadi, I},
  url={https://www.sciencedirect.com/science/article/pii/S0169260717313706},
  keywords={Mapping study, Clinical data, Data preprocessing, Electronic heath records, Medical datamining},
  abstract={Background and objective Datamining (DM) has, over the last decade, received increased attention in the medical domain and has been widely used to analyze medical datasets in order to extract useful knowledge and previously unknown patterns. However, historical medical data can often comprise inconsistent, noisy, imbalanced, missing and high dimensional data. These challenges lead to a serious bias in predictive modeling and reduce the performance of DM techniques. Data preprocessing is, therefore, an essential step in knowledge discovery as regards improving the quality of data and making it appropriate and suitable for DM techniques. The objective of this paper is to review the use of preprocessing techniques in clinical datasets. Methods We performed a systematic map of studies regarding the application of data preprocessing to healthcare and published between January 2000 and December 2017. A search string was determined on the basis of the mapping questions and the PICO categories. The search string was then applied in digital databases covering the fields of computer science and medical informatics in order to identify relevant studies. The studies were initially selected by reading their titles, abstracts and keywords. Those that were selected at that stage were then reviewed using a set of inclusion and exclusion criteria in order to eliminate any that were not relevant. This process resulted in 126 primary studies. Results Selected studies were analyzed and classified according to their publication years and channels, research type, empirical type and contribution type. The findings of this mapping study revealed that researchers have paid a considerable amount of attention to preprocessing in medical DM in last decade. A significant number of the selected studies used data reduction and cleaning preprocessing tasks. Moreover, the disciplines in which preprocessing have received most attention are: cardiology, endocrinology and oncology. Conclusions Researchers should develop and implement standards for an effective integration of multiple medical data types. Moreover, we identified the need to perform literature reviews.}
}

@article{rayyan-727967198,
  title={Search-based fault localisation: A systematic mapping study},
  year={2020},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={123},
  pages={106295},
  author={Leitao-Junior, Plinio S and Freitas, Diogo M and Vergilio, Silvia R and Camilo-Junior, Celso G and Harrison, Rachel},
  url={https://www.sciencedirect.com/science/article/pii/S0950584920300458},
  keywords={Systematic mapping, Meta-heuristic algorithms, Search-based fault localisation},
  abstract={Context Software Fault Localisation (FL) refers to finding faulty software elements related to failures produced as a result of test case execution. This is a laborious and time consuming task. To allow FL automation search-based algorithms have been successfully applied in the field of Search-Based Fault Localisation (SBFL). However, there is no study mapping the SBFL field to the best of our knowledge and we believe that such a map is important to promote new advances in this field. Objective To present the results of a mapping study on SBFL, by characterising the proposed methods, identifying sources of used information, adopted evaluation functions, applied algorithms and elements regarding reported experiments. Method Our mapping followed a defined process and a search protocol. The conducted analysis considers different dimensions and categories related to the main characteristics of SBFL methods. Results All methods are grounded on the coverage spectra category. Overall the methods search for solutions related to suspiciousness formulae to identify possible faulty code elements. Most studies use evolutionary algorithms, mainly Genetic Programming, by using a single-objective function. There is little investigation of real-and-multiple-fault scenarios, and the subjects are mostly written in C and Java. No consensus was observed on how to apply the evaluation metrics. Conclusions Search-based fault localisation has seen a rise in interest in the past few years and the number of studies has been growing. We identified some research opportunities such as exploring new sources of fault data, exploring multi-objective algorithms, analysing benchmarks according to some classes of faults, as well as, the use of a unique definition for evaluation measures.}
}

@article{rayyan-727967199,
  title={Understanding cloud-native applications after 10 years of cloud computing - A systematic mapping study},
  year={2017},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={126},
  pages={1-16},
  author={Kratzke, Nane and Quint, Peter-Christian},
  url={https://www.sciencedirect.com/science/article/pii/S0164121217300018},
  keywords={Systematic mapping study, Cloud-native application, CNA, Elastic platform, Microservice, Pattern, Self service, Softwareization},
  abstract={It is common sense that cloud-native applications (CNA) are intentionally designed for the cloud. Although this understanding can be broadly used it does not guide and explain what a cloud-native application exactly is. The term “cloud-native” was used quite frequently in birthday times of cloud computing (2006) which seems somehow obvious nowadays. But the term disappeared almost completely. Suddenly and in the last years the term is used again more and more frequently and shows increasing momentum. This paper summarizes the outcomes of a systematic mapping study analyzing research papers covering “cloud-native” topics, research questions and engineering methodologies. We summarize research focuses and trends dealing with cloud-native application engineering approaches. Furthermore, we provide a definition for the term “cloud-native application” which takes all findings, insights of analyzed publications and already existing and well-defined terminology into account.}
}

@article{rayyan-727967201,
  title={Quality of service approaches in IoT: A systematic mapping},
  year={2017},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={132},
  pages={186-203},
  author={White, Gary and Nallur, Vivek and Clarke, Siobhán},
  url={https://www.sciencedirect.com/science/article/pii/S016412121730105X},
  keywords={Systematic mapping, Monitoring, Quality model, Internet of things (IoT), Quality of service (QoS)},
  abstract={In an Internet of Things (IoT) environment, the existence of a huge number of heterogeneous devices, which are potentially resource-constrained and/or mobile has led to quality of service (QoS) concerns. Quality approaches have been proposed at various layers of the IoT architecture and take into consideration a number of different QoS factors. This paper evaluates the current state of the art of proposed QoS approaches in the IoT, specifically: (1) What layers of the IoT architecture have had the most research on QoS? (2) What quality factors do the quality approaches take into account when measuring performance? (3) What types of research have been conducted in this area? We have conducted a systematic mapping using a number of automated searches from the most relevant academic databases to address these questions. This mapping has identified a number of state of the art approaches which provides a good reference for researchers. The paper also identifies a number of gaps in the research literature at specific layers of the IoT architecture. It identifies which quality factors, research and contribution facets have been underutilised in the state of the art.}
}

@article{rayyan-727967202,
  title={5W+1H pattern: A perspective of systematic mapping studies and a case study on cloud software testing},
  year={2016},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={116},
  pages={206-219},
  author={Jia, Changjiang and Cai, Yan and Yu, Yuen Tak and Tse, T H},
  url={https://www.sciencedirect.com/science/article/pii/S0164121215000370},
  keywords={Systematic mapping study, 5W+1H pattern, Cloud software testing, Software},
  abstract={A common type of study used by researchers to map out the landscape of a research topic is known as mapping study. Such a study typically begins with an exploratory search on the possible ideas of the research topic, which is often done in an unsystematic manner. Hence, the activity of formulating research questions in mapping studies is ill-defined, rendering it difficult for researchers who are new to the topic. There is a need to guide them kicking off a mapping study of an unfamiliar domain. This paper proposes a 5W+1H pattern to help investigators systematically examine a generic set of dimensions in a mapping study toward the formulation of research questions before identifying, reading, and analyzing sufficient articles of the topic. We have validated the feasibility of our proposal by conducting a case study of a mapping study on cloud software testing, that is, software testing for and on cloud computing platforms. The case study reveals that the 5W+1H pattern can lead investigators to define a set of systematic, generic, and complementary research questions, enabling them to kick off and expedite the mapping study process in a well-defined manner. We also share our experiences and lessons learned from our case study on the use of the 5W+1H pattern in mapping studies.}
}

@article{rayyan-727967212,
  title={A systematic mapping study on technical debt and its management},
  year={2015},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={101},
  pages={193-220},
  author={Li, Zengyang and Avgeriou, Paris and Liang, Peng},
  url={https://www.sciencedirect.com/science/article/pii/S0164121214002854},
  keywords={Systematic mapping study, Technical debt, Technical debt management},
  abstract={Context Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system. Objective This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM. Method A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013. Results Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected. Conclusions The term “debt” has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have gained the most attention. There is a need for more empirical studies with high-quality evidence on the whole TDM process and on the application of specific TDM approaches in industrial settings. Moreover, dedicated TDM tools are needed for managing various types of TD in the whole TDM process.}
}

@article{rayyan-727967214,
  title={Empirical studies concerning the maintenance of UML diagrams and their use in the maintenance of code: A systematic mapping study},
  year={2013},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={55},
  number={7},
  pages={1119-1142},
  author={Fernández-Sáez, Ana M and Genero, Marcela and Chaudron, Michel R V},
  url={https://www.sciencedirect.com/science/article/pii/S0950584912002418},
  keywords={Systematic literature review, Systematic mapping study, UML, Software maintenance, Empirical studies},
  abstract={Context The Unified Modelling Language (UML) has, after ten years, become established as the de facto standard for the modelling of object-oriented software systems. It is therefore relevant to investigate whether its use is important as regards the costs involved in its implantation in industry being worthwhile. Method We have carried out a systematic mapping study to collect the empirical studies published in order to discover “What is the current existing empirical evidence with regard to the use of UML diagrams in source code maintenance and the maintenance of the UML diagrams themselves? Results We found 38 papers, which contained 63 experiments and 3 case studies. Conclusion Although there is common belief that the use of UML is beneficial for source code maintenance, since the quality of the modifications is greater when UML diagrams are available, only 3 papers concerning this issue have been published. Most research (60 empirical studies) concerns the maintainability and comprehensibility of the UML diagrams themselves which form part of the system's documentation, since it is assumed that they may influence source code maintainability, although this has not been empirically validated. Moreover, the generalizability of the majority of the experiments is questionable given the material, tasks and subjects used. There is thus a need for more experiments and case studies to be performed in industrial contexts, i.e., with real systems and using maintenance tasks conducted by practitioners under real conditions that truly show the utility of UML diagrams in maintaining code, and that the fact that a diagram is more comprehensible or modifiable influences the maintainability of the code itself. This utility should also be studied from the viewpoint of cost and productivity, and the consistent and simultaneous maintenance of diagrams and code must also be considered in future empirical studies.}
}

@article{rayyan-727967215,
  title={DevOps and software quality: A systematic mapping},
  year={2020},
  journal={Computer Science Review},
  issn={1574-0137},
  volume={38},
  pages={100308},
  author={Mishra, Alok and Otaiwi, Ziadoon},
  url={https://www.sciencedirect.com/science/article/pii/S1574013720304081},
  keywords={Software, Systematic mapping, Automation, Measurement, Software quality, DevOps, Development, Operations},
  abstract={Quality pressure is one of the factors affecting processes for software development in its various stages. DevOps is one of the proposed solutions to such pressure. The primary focus of DevOps is to increase the deployment speed, frequency and quality. DevOps is a mixture of different developments and operations to its multitudinous ramifications in software development industries, DevOps have attracted the interest of many researchers. There are considerable literature surveys on this critical innovation in software development, yet, little attention has been given to DevOps impact on software quality. This research is aimed at analyzing the implications of DevOps features on software quality. DevOps can also be referred to a change in organization cultures aimed at removal of gaps between the development and operations of an organization. The adoption of DevOps in an organization provides many benefits including quality but also brings challenges to an organization. This study presents systematic mapping of the impact of DevOps on software quality. The results of this study provide a better understanding of DevOps on software quality for both professionals and researchers working in this area. The study shows research was mainly focused in automation, culture, continuous delivery, fast feedback of DevOps. There is need of further research in many areas of DevOps (for instance: measurement, development of metrics of different stages to assess its performance, culture, practices toward ensuring quality assurance, and quality factors such as usability, efficiency, software maintainability and portability).}
}

@article{rayyan-727967217,
  title={Software product line testing – A systematic mapping study},
  year={2011},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={53},
  number={1},
  pages={2-13},
  author={Engström, Emelie and Runeson, Per},
  url={https://www.sciencedirect.com/science/article/pii/S0950584910001709},
  keywords={Systematic literature review, Systematic mapping, Testing, Software product line testing, Software},
  abstract={Context Software product lines (SPL) are used in industry to achieve more efficient software development. However, the testing side of SPL is underdeveloped. Objective This study aims at surveying existing research on SPL testing in order to identify useful approaches and needs for future research. Method A systematic mapping study is launched to find as much literature as possible, and the 64 papers found are classified with respect to focus, research type and contribution type. Results A majority of the papers are of proposal research types (64%). System testing is the largest group with respect to research focus (40%), followed by management (23%). Method contributions are in majority. Conclusions More validation and evaluation research is needed to provide a better foundation for SPL testing.}
}

@article{rayyan-727967225,
  title={Approaches to promote product quality within software process improvement initiatives: A mapping study},
  year={2015},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={103},
  pages={150-166},
  author={García-Mireles, Gabriel Alberto and Moraga, M Ángeles and García, Félix and Piattini, Mario},
  url={https://www.sciencedirect.com/science/article/pii/S0164121215000369},
  keywords={Systematic mapping study, Software process improvement, Software product quality, Software},
  abstract={Enhancing product quality might be a main goal of a software process improvement initiative (SPI). Quality is, however, a complex concept, and experts recommend identifying relevant product quality characteristics to satisfy users/customers' needs. There is thus a need to understand how SPI initiatives contribute to the improvement of software product quality characteristics. This paper aims to provide an overview of an up-to-date state-of-the-art regarding initiatives that focus on promoting product quality improvement by applying SPI approaches. This goal was achieved by conducting a systematic mapping study, as a result of which we identified 74 primary papers including both theoretical (75.7%) and empirical (24.3%) papers. The main product quality characteristics addressed are security, usability and reliability. Security-related process models, on the other hand, are those most cited (53%). The empirical papers suggest that traditional process reference models, such as CMM, CMMI or ISO 9001, moderately increase product quality characteristics, these principally being maintainability and reliability. However, there is a need for more empirical research to evaluate the impact of SPI initiatives on software product quality by considering contextual factors. SPI initiatives should be more driven by performance goals related to product quality characteristics.}
}

@article{rayyan-727967227,
  title={Quality of service approaches in cloud computing: A systematic mapping study},
  year={2015},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={101},
  pages={159-179},
  author={Abdelmaboud, Abdelzahir and Jawawi, Dayang N A and Ghani, Imran and Elsafi, Abubakar and Kitchenham, Barbara},
  url={https://www.sciencedirect.com/science/article/pii/S0164121214002830},
  keywords={Systematic mapping study, Quality of service, Cloud services},
  abstract={Context: Cloud computing is a new computing technology that provides services to consumers and businesses. Due to the increasing use of these services, the quality of service (QoS) of cloud computing has become an important and essential issue since there are many open challenges which need to be addressed related to trust in cloud services. Many research issues have been proposed in QoS approaches in the cloud computing area. Objective: The aim of this study is to survey current research on QoS approaches in cloud computing in order to identify where more emphasis should be placed in both current and future research directions. Method: A systematic mapping study was performed to find the related literature, and 67 articles were selected as primary studies that are classified in relation to the focus, research type and contribution type. Result: The majority of the articles are of the validation research type (64%). Infrastructure as a service (48%) was the largest research focus area, followed by software as a service (36%). The majority of contributions concerned methods (48%), followed by models (32%). Conclusion: The results of this study confirm that QoS approaches in cloud computing have become an important topic in the cloud computing area in recent years and there remain open challenges and gaps which require future research exploration. In particular, tools, metrics and evaluation research are needed in order to provide useful and trustworthy cloud computing services that deliver appropriate QoS.}
}

@article{rayyan-727967230,
  title={Knowledge management initiatives in software testing: A mapping study},
  year={2015},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={57},
  pages={378-391},
  author={de Souza, Érica Ferreira and de Almeida Falbo, Ricardo and Vijaykumar, Nandamudi L},
  url={https://www.sciencedirect.com/science/article/pii/S0950584914001335},
  keywords={Software testing, Mapping study, Knowledge management, Software},
  abstract={Context Software testing is a knowledge intensive process, and, thus, Knowledge Management (KM) principles and techniques should be applied to manage software testing knowledge. Objective This study conducts a survey on existing research on KM initiatives in software testing, in order to identify the state of the art in the area as well as the future research. Aspects such as purposes, types of knowledge, technologies and research type are investigated. Method The mapping study was performed by searching seven electronic databases. We considered studies published until December 2013. The initial resulting set was comprised of 562 studies. From this set, a total of 13 studies were selected. For these 13, we performed snowballing and direct search to publications of researchers and research groups that accomplished these studies. Results From the mapping study, we identified 15 studies addressing KM initiatives in software testing that have been reviewed in order to extract relevant information on a set of research questions. Conclusions Although only a few studies were found that addressed KM initiatives in software testing, the mapping shows an increasing interest in the topic in the recent years. Reuse of test cases is the perspective that has received more attention. From the KM point of view, most of the studies discuss aspects related to providing automated support for managing testing knowledge by means of a KM system. Moreover, as a main conclusion, the results show that KM is pointed out as an important strategy for increasing test effectiveness, as well as for improving the selection and application of suited techniques, methods and test cases. On the other hand, inadequacy of existing KM systems appears as the most cited problem related to applying KM in software testing.}
}

@article{rayyan-727967231,
  title={Security patterns: A systematic mapping study},
  year={2020},
  journal={Journal of Computer Languages},
  issn={2590-1184},
  volume={56},
  pages={100938},
  author={Jafari, Abbas Javan and Rasoolzadegan, Abbas},
  url={https://www.sciencedirect.com/science/article/pii/S2590118419300632},
  keywords={Systematic review, Mapping study, Secure software development, Security patterns},
  abstract={Security patterns are a well-established means to encapsulate and communicate proven security solutions and introduce security into the development process. Our objective is to explore the research efforts on security patterns and discuss the current state of the art, which will serve as a guideline for interested researchers, practitioners, and teachers. We have conducted a systematic mapping study of relevant literature from 1997 until the end of 2017 and identified 403 relevant papers, 274 of which were selected for analysis based on quality criteria. This study derives a customized research strategy from established systematic approaches in the literature. The first 3 research questions address the demographics of security pattern research such as topic classification, trends, and distribution between academia and industry, along with prominent researchers and venues. The next 9 research questions focus on more in-depth analyses such as pattern presentation notations and classification criteria, pattern evaluation techniques, and pattern usage environments. We observe that security pattern research is an active and growing field and the patterns are increasingly being used to improve software development approaches. Pattern evaluation is currently the least explored topic by researchers and there is a lack of empirical studies in the field.}
}

@article{rayyan-727967233,
  title={A mapping study on design-time quality attributes and metrics},
  year={2017},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={127},
  pages={52-77},
  author={Arvanitou, Elvira Maria and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander and Galster, Matthias and Avgeriou, Paris},
  url={https://www.sciencedirect.com/science/article/pii/S016412121730016X},
  keywords={Measurement, Mapping study, Software quality, Design-time quality attributes, Metronidazole},
  abstract={Developing a plan for monitoring software quality is a non-trivial task, in the sense that it requires: (a) the selection of relevant quality attributes, based on application domain and development phase, and (b) the selection of appropriate metrics to quantify quality attributes. The metrics selection process is further complicated due to the availability of various metrics for each quality attribute, and the constraints that impact metric selection (e.g., development phase, metric validity, and available tools). In this paper, we shed light on the state-of-research of design-time quality attributes by conducting a mapping study. We have identified 154 papers that have been included as primary studies. The study led to the following outcomes: (a) low-level quality attributes (e.g., cohesion, coupling, etc.) are more frequently studied than high-level ones (e.g., maintainability, reusability, etc.), (b) maintainability is the most frequently examined high-level quality attribute, regardless of the application domain or the development phase, (c) assessment of quality attributes is usually performed by a single metric, rather than a combination of multiple metrics, and (d) metrics are mostly validated in an empirical setting. These outcomes are interpreted and discussed based on related work, offering useful implications to both researchers and practitioners.}
}

@article{rayyan-727967234,
  title={Identification and management of technical debt: A systematic mapping study},
  year={2016},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={70},
  pages={100-121},
  author={Alves, Nicolli S R and Mendes, Thiago S and de Mendonça, Manoel G and Spínola, Rodrigo O and Shull, Forrest and Seaman, Carolyn},
  url={https://www.sciencedirect.com/science/article/pii/S0950584915001743},
  keywords={Systematic mapping, Software engineering, Technical debt, Software maintenance},
  abstract={Context The technical debt metaphor describes the effect of immature artifacts on software maintenance that bring a short-term benefit to the project in terms of increased productivity and lower cost, but that may have to be paid off with interest later. Much research has been performed to propose mechanisms to identify debt and decide the most appropriate moment to pay it off. It is important to investigate the current state of the art in order to provide both researchers and practitioners with information that enables further research activities as well as technical debt management in practice. Objective This paper has the following goals: to characterize the types of technical debt, identify indicators that can be used to find technical debt, identify management strategies, understand the maturity level of each proposal, and identify what visualization techniques have been proposed to support technical debt identification and management activities. Method A systematic mapping study was performed based on a set of three research questions. In total, 100 studies, dated from 2010 to 2014, were evaluated. Results We proposed an initial taxonomy of technical debt types, created a list of indicators that have been proposed to identify technical debt, identified the existing management strategies, and analyzed the current state of art on technical debt, identifying topics where new research efforts can be invested. Conclusion The results of this mapping study can help to identify points that still require further investigation in technical debt research.}
}

@article{rayyan-727967243,
  title={Research state of the art on GoF design patterns: A mapping study},
  year={2013},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={86},
  number={7},
  pages={1945-1964},
  author={Ampatzoglou, Apostolos and Charalampidou, Sofia and Stamelos, Ioannis},
  url={https://www.sciencedirect.com/science/article/pii/S0164121213000757},
  keywords={Mapping study, Design patterns, Software quality attributes},
  abstract={Design patterns are used in software development to provide reusable and documented solutions to common design problems. Although many studies have explored various aspects of design patterns, no research summarizing the state of research related to design patterns existed up to now. This paper presents the results of a mapping study of about 120 primary studies, to provide an overview of the research efforts on Gang of Four (GoF) design patterns. The research questions of this study deal with (a) if design pattern research can be further categorized in research subtopics, (b) which of the above subtopics are the most active ones and (c) what is the reported effect of GoF patterns on software quality attributes. The results suggest that design pattern research can be further categorized to research on GoF patterns formalization, detection and application and on the effect of GoF patterns on software quality attributes. Concerning the intensity of research activity of the abovementioned subtopics, research on pattern detection and on the effect of GoF patterns on software quality attributes appear to be the most active ones. Finally, the reported research to date on the effect of GoF patterns on software quality attributes are controversial; because some studies identify one pattern's effect as beneficial whereas others report the same pattern's effect as harmful.}
}

@article{rayyan-727967244,
  title={Software development in startup companies: A systematic mapping study},
  year={2014},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={56},
  number={10},
  pages={1200-1218},
  author={Paternoster, Nicolò and Giardino, Carmine and Unterkalmsteiner, Michael and Gorschek, Tony and Abrahamsson, Pekka},
  url={https://www.sciencedirect.com/science/article/pii/S0950584914000950},
  keywords={Systematic mapping study, Software development, Startups, Software},
  abstract={Context Software startups are newly created companies with no operating history and fast in producing cutting-edge technologies. These companies develop software under highly uncertain conditions, tackling fast-growing markets under severe lack of resources. Therefore, software startups present a unique combination of characteristics which pose several challenges to software development activities. Objective This study aims to structure and analyze the literature on software development in startup companies, determining thereby the potential for technology transfer and identifying software development work practices reported by practitioners and researchers. Method We conducted a systematic mapping study, developing a classification schema, ranking the selected primary studies according their rigor and relevance, and analyzing reported software development work practices in startups. Results A total of 43 primary studies were identified and mapped, synthesizing the available evidence on software development in startups. Only 16 studies are entirely dedicated to software development in startups, of which 10 result in a weak contribution (advice and implications (6); lesson learned (3); tool (1)). Nineteen studies focus on managerial and organizational factors. Moreover, only 9 studies exhibit high scientific rigor and relevance. From the reviewed primary studies, 213 software engineering work practices were extracted, categorized and analyzed. Conclusion This mapping study provides the first systematic exploration of the state-of-art on software startup research. The existing body of knowledge is limited to a few high quality studies. Furthermore, the results indicate that software engineering work practices are chosen opportunistically, adapted and configured to provide value under the constrains imposed by the startup context.}
}

@article{rayyan-727967247,
  title={Software test-code engineering: A systematic mapping},
  year={2015},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={58},
  pages={123-147},
  author={Garousi Yusifoğlu, Vahid and Amannejad, Yasaman and Betin Can, Aysu},
  url={https://www.sciencedirect.com/science/article/pii/S0950584914001487},
  keywords={Systematic mapping, Survey, Development of test code, Quality assessment of test code, Software test-code engineering, Study repository, Software},
  abstract={Context As a result of automated software testing, large amounts of software test code (script) are usually developed by software teams. Automated test scripts provide many benefits, such as repeatable, predictable, and efficient test executions. However, just like any software development activity, development of test scripts is tedious and error prone. We refer, in this study, to all activities that should be conducted during the entire lifecycle of test-code as Software Test-Code Engineering (STCE). Objective As the STCE research area has matured and the number of related studies has increased, it is important to systematically categorize the current state-of-the-art and to provide an overview of the trends in this field. Such summarized and categorized results provide many benefits to the broader community. For example, they are valuable resources for new researchers (e.g., PhD students) aiming to conduct additional secondary studies. Method In this work, we systematically classify the body of knowledge related to STCE through a systematic mapping (SM) study. As part of this study, we pose a set of research questions, define selection and exclusion criteria, and systematically develop and refine a systematic map. Results Our study pool includes a set of 60 studies published in the area of STCE between 1999 and 2012. Our mapping data is available through an online publicly-accessible repository. We derive the trends for various aspects of STCE. Among our results are the following: (1) There is an acceptable mix of papers with respect to different contribution facets in the field of STCE and the top two leading facets are tool (68%) and method (65%). The studies that presented new processes, however, had a low rate (3%), which denotes the need for more process-related studies in this area. (2) Results of investigation about research facet of studies and comparing our result to other SM studies shows that, similar to other fields in software engineering, STCE is moving towards more rigorous validation approaches. (3) A good mixture of STCE activities has been presented in the primary studies. Among them, the two leading activities are quality assessment and co-maintenance of test-code with production code. The highest growth rate for co-maintenance activities in recent years shows the importance and challenges involved in this activity. (4) There are two main categories of quality assessment activity: detection of test smells and oracle assertion adequacy. (5) JUnit is the leading test framework which has been used in about 50% of the studies. (6) There is a good mixture of SUT types used in the studies: academic experimental systems (or simple code examples), real open-source and commercial systems. (7) Among 41 tools that are proposed for STCE, less than half of the tools (45%) were available for download. It is good to have this percentile of tools to be available, although not perfect, since the availability of tools can lead to higher impact on research community and industry. Conclusion We discuss the emerging trends in STCE, and discuss the implications for researchers and practitioners in this area. The results of our systematic mapping can help researchers to obtain an overview of existing STCE approaches and spot areas in the field that require more attention from the research community.}
}

@article{rayyan-727967248,
  title={A systematic mapping study on soft computing techniques to cloud environment},
  year={2017},
  journal={Procedia Computer Science},
  issn={1877-0509},
  volume={120},
  pages={31-38},
  author={Ejimogu, Obinna H and Başaran, Seren},
  url={https://www.sciencedirect.com/science/article/pii/S1877050917324171},
  keywords={systematic mapping, Cloud computing, power optimiztion, soft computing, task optimization},
  abstract={Cloud computing plays an essential role in storage and transfer of big capacity data due to a rapid increase in size and the number of organizational activities. There exist numerous studies in which diverse soft computing techniques are applied to the cloud environment. The relevant extant literature that were clustered into five main categories with respect to precedence are; task optimization, power optimization, security, service selection and cost optimization. Yet, it was discovered that there is a dearth of systematic review/mapping studies particularly on soft computing techniques in cloud environment so as to obtain exclusive insight, to identify existing gaps and future research directions. Therefore the aim of this paper is to conduct a systematic mapping study of recent literature on soft computing techniques in cloud environment. For this purpose, 163 articles were chosen as primary sources that were published within the last decade, which were classified based on study focus area, type of research, contribution facet and particularly the type of soft computing technique used. Findings revealed that task optimization takes part as the highly preferred research focus area. Secondly, most of the articles found are of validation studies. The contributions of most of the studies are concerned about methods and finally the top three soft computing techniques were detected as particle swarm optimization (PSO), genetic algorithm (GA) and hybrid systems. The results of this study confirm that applying soft computing techniques in cloud computing has gained more and more significant attention recently but there still remain challenges and gaps which calls for further investigation especially in the area of cost optimization and also artificial bee colony.}
}

@article{rayyan-727967250,
  title={The usage of ISBSG data fields in software effort estimation: A systematic mapping study},
  year={2016},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={113},
  pages={188-215},
  author={González-Ladrón-de-Guevara, Fernando and Fernández-Diego, Marta and Lokan, Chris},
  url={https://www.sciencedirect.com/science/article/pii/S0164121215002642},
  keywords={Systematic mapping study, Software effort estimation, ISBSG data field, Software},
  abstract={The International Software Benchmarking Standards Group (ISBSG) maintains a repository of data about completed software projects. A common use of the ISBSG dataset is to investigate models to estimate a software project's size, effort, duration, and cost. The aim of this paper is to determine which and to what extent variables in the ISBSG dataset have been used in software engineering to build effort estimation models. For that purpose a systematic mapping study was applied to 107 research papers, obtained after a filtering process, that were published from 2000 until the end of 2013, and which listed the independent variables used in the effort estimation models. The usage of ISBSG variables for filtering, as dependent variables, and as independent variables is described. The 20 variables (out of 71) mostly used as independent variables for effort estimation are identified and analysed in detail, with reference to the papers and types of estimation methods that used them. We propose guidelines that can help researchers make informed decisions about which ISBSG variables to select for their effort estimation models.}
}

@article{rayyan-727967251,
  title={A systematic mapping study on the combination of software architecture and agile development},
  year={2016},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={111},
  pages={157-184},
  author={Yang, Chen and Liang, Peng and Avgeriou, Paris},
  url={https://www.sciencedirect.com/science/article/pii/S0164121215002125},
  keywords={Software architecture, Agile development, Architecting approach, Software},
  abstract={Context Combining software architecture and agile development has received significant attention in recent years. However, there exists no comprehensive overview of the state of research on the architecture-agility combination. Objective This work aims to analyze the combination of architecture and agile methods for the purpose of exploration and analysis with respect to architecting activities and approaches, agile methods and practices, costs, benefits, challenges, factors, tools, and lessons learned concerning the combination. Method A systematic mapping study (SMS) was conducted, covering the literature on the architecture-agility combination published between February 2001 and January 2014. Results Fifty-four studies were finally included in this SMS. Some of the highlights: (1) a significant difference exists in the proportion of various architecting activities, agile methods, and agile practices employed in the combination. (2) none of the architecting approaches has been widely used in the combination. (3) there is a lack of description and analysis regarding the costs and failure stories of the combination. (4) twenty challenges, twenty-nine factors, and twenty-five lessons learned were identified. Conclusions The results of this SMS help the software engineering community to reflect on the past thirteen years of research and practice on the architecture-agility combination with a number of implications.}
}

@article{rayyan-727967254,
  title={Empirical studies on the use of social software in global software development – A systematic mapping study},
  year={2013},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={55},
  number={7},
  pages={1143-1164},
  author={Giuffrida, Rosalba and Dittrich, Yvonne},
  url={https://www.sciencedirect.com/science/article/pii/S0950584913000153},
  keywords={Systematic mapping study, Social media, Computer-supported cooperative work, Distributed teams, Global software development, Social software, Software},
  abstract={Background In Global Software Development (GSD), informal communication and knowledge sharing play an important role. Social Software (SoSo) has the potential to support and foster this key responsibility. Research on the use of SoSo in GSD is still at an early stage: although a number of empirical studies on the usage of SoSo are available in related fields, there exists no comprehensive overview of what has been investigated to date across them. Objective The aim of this review is to map empirical studies on the usage of SoSo in Software Engineering projects and in distributed teams, and to highlight the findings of research works which could prove to be beneficial for GSD researchers and practitioners. Method A Systematic Mapping Study is conducted using a broad search string that allows identifying a variety of studies which can be beneficial for GSD. Papers have been retrieved through a combination of automatic search and snowballing, hence a wide quantitative map of the research area is provided. Additionally, text extracts from the studies are qualitatively synthesised to investigate benefits and challenges of the use of SoSo. Results SoSo is reported as being chiefly used as a support for collaborative work, fostering awareness, knowledge management and coordination among team members. Contrary to the evident high importance of the social aspects offered by SoSo, socialisation is not the most important usage reported. Conclusions This review reports how SoSo is used in GSD and how it is capable of supporting GSD teams. Four emerging themes in global software engineering were identified: the appropriation and development of usage structures; understanding how an ecology of communication channels and tools are used by teams; the role played by SoSo either as a subtext or as an explicit goal; and finally, the surprising low percentage of observational studies.}
}

@article{rayyan-727967255,
  title={The state of the art on design patterns: A systematic mapping of the literature},
  year={2017},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={125},
  pages={93-118},
  author={Bafandeh Mayvan, B and Rasoolzadegan, A and Ghavidel Yazdi, Z},
  url={https://www.sciencedirect.com/science/article/pii/S0164121216302321},
  keywords={Systematic mapping study, Systematic review, Design patterns},
  abstract={Design patterns are widely used by software developers to build complex systems. Hence, they have been investigated by many researchers in recent decades. This leads to the emergence of various topics in the design patterns field. The objective of this paper is to present an overview of the research efforts on design patterns for those researchers who seek to enter this area. The main contributions are as follows: (a) identifying research topics in design patterns, (b) quantifying the research emphasis on each topic, and (c) describing the demographics of design patterns research. The last secondary study with similar goals in the design patterns field considers the Gang of Four design patterns only. However, the scope of the current study is all of the design patterns. Moreover, our review covers about six additional years and a larger number of publications and venues. In this systematic mapping study, a total of 2775 papers were identified as relevant, and 637 of them were included. According to the results, design patterns can be classified into six different research topics. As a consequence, it is concluded that Pattern Development, Pattern Mining, and Pattern Usage are the most active topics in the field of design patterns.}
}

@article{rayyan-727967261,
  title={Smells in software test code: A survey of knowledge in industry and academia},
  year={2018},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={138},
  pages={52-81},
  author={Garousi, Vahid and Küçük, Barış},
  url={https://www.sciencedirect.com/science/article/pii/S0164121217303060},
  keywords={Software testing, Systematic mapping, Survey, Automated testing, Multivocal literature mapping, Test anti-patterns, Test automation, Test scripts, Test smells, Smell, Software},
  abstract={As a type of anti-pattern, test smells are defined as poorly designed tests and their presence may negatively affect the quality of test suites and production code. Test smells are the subject of active discussions among practitioners and researchers, and various guidelines to handle smells are constantly offered for smell prevention, smell detection, and smell correction. Since there is a vast grey literature as well as a large body of research studies in this domain, it is not practical for practitioners and researchers to locate and synthesize such a large literature. Motivated by the above need and to find out what we, as the community, know about smells in test code, we conducted a ‘multivocal' literature mapping (classification) on both the scientific literature and also practitioners' grey literature. By surveying all the sources on test smells in both industry (120 sources) and academia (46 sources), 166 sources in total, our review presents the largest catalogue of test smells, along with the summary of guidelines/techniques and the tools to deal with those smells. This article aims to benefit the readers (both practitioners and researchers) by serving as an “index” to the vast body of knowledge in this important area, and by helping them develop high-quality test scripts, and minimize occurrences of test smells and their negative consequences in large test automation projects.}
}

@article{rayyan-727967264,
  title={Testing in Service Oriented Architectures with dynamic binding: A mapping study},
  year={2011},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={53},
  number={3},
  pages={171-189},
  author={Palacios, Marcos and García-Fanjul, José and Tuya, Javier},
  url={https://www.sciencedirect.com/science/article/pii/S0950584910002168},
  keywords={Software testing, Systematic literature review, Mapping study, SOA, Dynamic binding, Service Oriented Architectures},
  abstract={Context Service Oriented Architectures (SOA) have emerged as a new paradigm to develop interoperable and highly dynamic applications. Objective This paper aims to identify the state of the art in the research on testing in Service Oriented Architectures with dynamic binding. Method A mapping study has been performed employing both manual and automatic search in journals, conference/workshop proceedings and electronic databases. Results A total of 33 studies have been reviewed in order to extract relevant information regarding a previously defined set of research questions. The detection of faults and the decision making based on the information gathered from the tests have been identified as the main objectives of these studies. To achieve these goals, monitoring and test case generation are the most proposed techniques testing both functional and non-functional properties. Furthermore, different stakeholders have been identified as participants in the tests, which are performed in specific points in time during the life cycle of the services. Finally, it has been observed that a relevant group of studies have not validated their approach yet. Conclusions Although we have only found 33 studies that address the testing of SOA where the discovery and binding of the services are performed at runtime, this number can be considered significant due to the specific nature of the reviewed topic. The results of this study have contributed to provide a body of knowledge that allows identifying current gaps in improving the quality of the dynamic binding in SOA using testing approaches.}
}

@article{rayyan-727967265,
  title={A systematic mapping study of infrastructure as code research},
  year={2019},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={108},
  pages={65-77},
  author={Rahman, Akond and Mahdavi-Hezaveh, Rezvan and Williams, Laurie},
  url={https://www.sciencedirect.com/science/article/pii/S0950584918302507},
  keywords={Systematic mapping study, Software engineering, Continuous deployment, Configuration as code, Configuration script, Devops, Infrastructure as code},
  abstract={Context: Infrastructure as code (IaC) is the practice to automatically configure system dependencies and to provision local and remote instances. Practitioners consider IaC as a fundamental pillar to implement DevOps practices, which helps them to rapidly deliver software and services to end-users. Information technology (IT) organizations, such as GitHub, Mozilla, Facebook, Google and Netflix have adopted IaC. A systematic mapping study on existing IaC research can help researchers to identify potential research areas related to IaC, for example defects and security flaws that may occur in IaC scripts. Objective: The objective of this paper is to help researchers identify research areas related to infrastructure as code (IaC) by conducting a systematic mapping study of IaC-related research. Method: We conduct our research study by searching five scholar databases. We collect a set of 31,498 publications by using seven search strings. By systematically applying inclusion and exclusion criteria, which includes removing duplicates and removing non-English and non peer-reviewed publications, we identify 32 publications related to IaC. We identify topics addressed in these publications by applying qualitative analysis. Results: We identify four topics studied in IaC-related publications: (i) framework/tool for infrastructure as code; (ii) adoption of infrastructure as code; (iii) empirical study related to infrastructure as code; and (iv) testing in infrastructure as code. According to our analysis, 50.0% of the studied 32 publications propose a framework or tool to implement the practice of IaC or extend the functionality of an existing IaC tool. Conclusion: Our findings suggest that framework or tools is a well-studied topic in IaC research. As defects and security flaws can have serious consequences for the deployment and development environments in DevOps, we observe the need for research studies that will study defects and security flaws for IaC.}
}

@article{rayyan-727967271,
  title={Entity reconciliation in big data sources: A systematic mapping study},
  year={2017},
  journal={Expert Systems with Applications},
  issn={0957-4174},
  volume={80},
  pages={14-27},
  author={Enríquez, J G and Domínguez-Mayo, F J and Escalona, M J and Ross, M and Staples, G},
  url={https://www.sciencedirect.com/science/article/pii/S0957417417301550},
  keywords={Systematic mapping study, Big data, Entity reconciliation, Heterogeneous databases},
  abstract={The entity reconciliation (ER) problem aroused much interest as a research topic in today's Big Data era, full of big and open heterogeneous data sources. This problem poses when relevant information on a topic needs to be obtained using methods based on: (i) identifying records that represent the same real world entity, and (ii) identifying those records that are similar but do not correspond to the same real-world entity. ER is an operational intelligence process, whereby organizations can unify different and heterogeneous data sources in order to relate possible matches of non-obvious entities. Besides, the complexity that the heterogeneity of data sources involves, the large number of records and differences among languages, for instance, must be added. This paper describes a Systematic Mapping Study (SMS) of journal articles, conferences and workshops published from 2010 to 2017 to solve the problem described before, first trying to understand the state-of-the-art, and then identifying any gaps in current research. Eleven digital libraries were analyzed following a systematic, semiautomatic and rigorous process that has resulted in 61 primary studies. They represent a great variety of intelligent proposals that aim to solve ER. The conclusion obtained is that most of the research is based on the operational phase as opposed to the design phase, and most studies have been tested on real-world data sources, where a lot of them are heterogeneous, but just a few apply to industry. There is a clear trend in research techniques based on clustering/blocking and graphs, although the level of automation of the proposals is hardly ever mentioned in the research work.}
}

@article{rayyan-727967275,
  title={Assumptions and their management in software development: A systematic mapping study},
  year={2018},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={94},
  pages={82-110},
  author={Yang, Chen and Liang, Peng and Avgeriou, Paris},
  url={https://www.sciencedirect.com/science/article/pii/S0950584916304189},
  keywords={Systematic mapping study, Software development, Assumption, Assumptions management, Software},
  abstract={Context Assumptions are constantly made by stakeholders or generated automatically in software development. However, there is a lack of systematic analysis and comprehensive understanding of the research and practice regarding assumptions and their management. Objective This work aims to explore and analyze the state of the art on assumptions and their management in software development. Method A systematic mapping study that covers the literature from January 2001 to December 2015 on assumptions and their management in software development. Results 134 studies were included: (1) The studies were published in 94 venues, which indicates that assumptions and their management has been a broad topic in software engineering. (2) Only 21 studies defined the assumption concept. (3) Most assumptions are made for or related to the artifacts in requirements engineering and software design, which demonstrates that assumptions should be managed from the early phases of software development. (4) Much effort has been put on Assumptions Making, Description, and Evaluation. Assumptions Maintenance received moderate attention. More than half of the tools identified aim to support assume-guarantee reasoning. For the other tools, most of them can be used to support Assumptions Description. (5) All the identified types of stakeholders are involved in Assumptions Making, followed by Evaluation and Description. Stakeholders involved in requirements engineering, software design, and software construction play a central role in assumptions management. (6) The main challenge is the difficulty of performing assumptions management activities in software development. (7) The identified assumptions management approaches, tools, benefits, and lessons learned are limited to their specific contexts (e.g., context of use). (8) Most of the negative consequences are caused by invalid or implicit assumptions. Conclusions This work provides researchers and practitioners with a reflection of the past fifteen years of research and practice on assumptions and their management in software development.}
}

@article{rayyan-727967279,
  title={Measuring and predicting software productivity: A systematic map and review},
  year={2011},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={53},
  number={4},
  pages={317-343},
  author={Petersen, Kai},
  url={https://www.sciencedirect.com/science/article/pii/S0950584910002156},
  keywords={Software development, Measurement, Performance, Efficiency, Prediction, Software productivity, Software},
  abstract={Context Software productivity measurement is essential in order to control and improve the performance of software development. For example, by identifying role models (e.g. projects, individuals, tasks) when comparing productivity data. The prediction is of relevance to determine whether corrective actions are needed, and to discover which alternative improvement action would yield the best results. Objective In this study we identify studies for software productivity prediction and measurement. Based on the identified studies we first create a classification scheme and map the studies into the scheme (systematic map). Thereafter, a detailed analysis and synthesis of the studies is conducted. Method As a research method for systematically identifying and aggregating the evidence of productivity measurement and prediction approaches systematic mapping and systematic review have been used. Results In total 38 studies have been identified, resulting in a classification scheme for empirical research on software productivity. The mapping allowed to identify the rigor of the evidence with respect to the different productivity approaches. In the detailed analysis the results were tabulated and synthesized to provide recommendations to practitioners. Conclusion Risks with simple ratio-based measurement approaches were shown. In response to the problems data envelopment analysis seems to be a strong approach to capture multivariate productivity measures, and allows to identify reference projects to which inefficient projects should be compared. Regarding simulation no general prediction model can be identified. Simulation and statistical process control are promising methods for software productivity prediction. Overall, further evidence is needed to make stronger claims and recommendations. In particular, the discussion of validity threats should become standard, and models need to be compared with each other.}
}

@article{rayyan-727967287,
  title={Understanding community participation and engagement in open source software Projects: A systematic mapping study},
  year={2020},
  journal={Journal of King Saud University - Computer and Information Sciences},
  issn={1319-1578},
  author={Kaur, Rajdeep and Kaur Chahal, Kuljit and Saini, Munish},
  url={https://www.sciencedirect.com/science/article/pii/S1319157820305139},
  keywords={Systematic mapping study, Open source software, Community dynamics, Community engagement, Community participation, Software},
  abstract={In the Open Source Software (OSS) paradigm, developers along with users form a community for an OSS project as they share an interest in using/developing the project. Active community engagement is essential for an OSS project to succeed. OSS communities should strive for greater community participation and engagement through the use of tools, practices, and processes. The primary goal of this paper is to presents a review of studies on community participation and engagement in OSS projects based on systematic mapping study and snowballing technique. This study also provides an understanding about the research topics and gaps in the area, utilized research methods and publication venues. We have analyzed 67 research papers related to the study topic. The findings revealed that most of the studies used a combination of survey and questionnaire as a research methodology. We found that community participation and engagement research focuses on 5 main research topics joining process, contribution barriers, motivation, retention, and abandonment. The investigated studies provide more evidence on motivation and contribution barriers but less on the joining process and abandonment. The results presented in this paper will be helpful for researchers to understand the latest trends in this area and identifying the corresponding research gaps.}
}

@article{rayyan-727967289,
  title={What's up with software metrics? – A preliminary mapping study},
  year={2010},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={83},
  number={1},
  pages={37-51},
  author={Kitchenham, Barbara},
  url={https://www.sciencedirect.com/science/article/pii/S0164121209001599},
  keywords={Mapping study, Software metrics, Secondary study, Literature survey, Empirical evaluation problems, Influential papers, Metronidazole, Software},
  abstract={Background Many papers are published on the topic of software metrics but it is difficult to assess the current status of metrics research. Aim This paper aims to identify trends in influential software metrics papers and assess the possibility of using secondary studies to integrate research results. Method Search facilities in the SCOPUS tool were used to identify the most cited papers in the years 2000–2005 inclusive. Less cited papers were also selected from 2005. The selected papers were classified according factors such as to main topic, goal and type (empirical or theoretical or mixed). Papers classified as “Evaluation studies” were assessed to investigate the extent to which results could be synthesized. Results Compared with less cited papers, the most cited papers were more frequently journal papers, and empirical validation or data analysis studies. However, there were problems with some empirical validation studies. For example, they sometimes attempted to evaluate theoretically invalid metrics and fail to appreciate the importance of the context in which data are collected. Conclusions This paper, together with other similar papers, confirms that there is a large body of research related to software metrics. However, software metrics researchers may need to refine their empirical methodology before they can answer useful empirical questions.}
}

@article{rayyan-727967290,
  title={The maturity of maturity model research: A systematic mapping study},
  year={2012},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={54},
  number={12},
  pages={1317-1339},
  author={Wendler, Roy},
  url={https://www.sciencedirect.com/science/article/pii/S0950584912001334},
  keywords={Systematic mapping study, Maturity models, Design-oriented research, Software management},
  abstract={Context Maturity models offer organizations a simple but effective possibility to measure the quality of their processes. Emerged out of software engineering, the application fields have widened and maturity model research is becoming more important. During the last two decades the publication amount steadily rose as well. Until today, no studies have been available summarizing the activities and results of the field of maturity model research. Objective The objective of this paper is to structure and analyze the available literature of the field of maturity model research to identify the state-of-the-art research as well as research gaps. Method A systematic mapping study was conducted. It included relevant publications of journals and IS conferences. Mapping studies are a suitable method for structuring a broad research field concerning research questions about contents, methods, and trends in the available publications. Results The mapping of 237 articles showed that current maturity model research is applicable to more than 20 domains, heavily dominated by software development and software engineering. The study revealed that most publications deal with the development of maturity models and empirical studies. Theoretical reflective publications are scarce. Furthermore, the relation between conceptual and design-oriented maturity model development was analyzed, indicating that there is still a gap in evaluating and validating developed maturity models. Finally, a comprehensive research framework was derived from the study results and implications for further research are given. Conclusion The mapping study delivers the first systematic summary of maturity model research. The categorization of available publications helps researchers gain an overview of the state-of-the-art research and current research gaps. The proposed research framework supports researchers categorizing their own projects. In addition, practitioners planning to use a maturity model may use the study as starting point to identify which maturity models are suitable for their domain and where limitations exist.}
}

@article{rayyan-727967294,
  title={Adaptive monitoring: A systematic mapping},
  year={2019},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={105},
  pages={161-189},
  author={Zavala, Edith and Franch, Xavier and Marco, Jordi},
  url={https://www.sciencedirect.com/science/article/pii/S0950584918301861},
  keywords={Systematic mapping study, Literature review, State of the art, Adaptive monitoring, Monitor customization, Monitoring reconfiguration},
  abstract={Context Adaptive monitoring is a method used in a variety of domains for responding to changing conditions. It has been applied in different ways, from monitoring systems' customization to re-composition, in different application domains. However, to the best of our knowledge, there are no studies analyzing how adaptive monitoring differs or resembles among the existing approaches. Objective To characterize the current state of the art on adaptive monitoring, specifically to: (a) identify the main concepts in the adaptive monitoring topic; (b) determine the demographic characteristics of the studies published in this topic; (c) identify how adaptive monitoring is conducted and evaluated by the different approaches; (d) identify patterns in the approaches supporting adaptive monitoring. Method We have conducted a systematic mapping study of adaptive monitoring approaches following recommended practices. We have applied automatic search and snowballing sampling on different sources and used rigorous selection criteria to retrieve the final set of papers. Moreover, we have used an existing qualitative analysis method for extracting relevant data from studies. Finally, we have applied data mining techniques for identifying patterns in the solutions. Results We have evaluated 110 studies organized in 81 approaches that support adaptive monitoring. By analyzing them, we have: (1) surveyed related terms and definitions of adaptive monitoring and proposed a generic one; (2) visualized studies' demographic data and arranged the studies into approaches; (3) characterized the main approaches' contributions; (4) determined how approaches conduct the adaptation process and evaluate their solutions. Conclusions This cross-domain overview of the current state of the art on adaptive monitoring may be a solid and comprehensive baseline for researchers and practitioners in the field. Especially, it may help in identifying opportunities of research; for instance, the need of proposing generic and flexible software engineering solutions for supporting adaptive monitoring in a variety of systems.}
}

@article{rayyan-727967298,
  title={Software-testing education: A systematic literature mapping},
  year={2020},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={165},
  pages={110570},
  author={Garousi, Vahid and Rainer, Austen and Lauvås, Per and Arcuri, Andrea},
  url={https://www.sciencedirect.com/science/article/pii/S0164121220300510},
  keywords={Software testing, Systematic literature review, Systematic literature mapping, Education research, Software-engineering education, Software-testing education, Software},
  abstract={Context With the rising complexity and scale of software systems, there is an ever-increasing demand for sophisticated and cost-effective software testing. To meet such a demand, there is a need for a highly-skilled software testing work-force (test engineers) in the industry. To address that need, many university educators worldwide have included software-testing education in their software engineering (SE) or computer science (CS) programs. Many papers have been published in the last three decades (as early as 1992) to share experience from such undertakings. Objective Our objective in this paper is to summarize the body of experience and knowledge in the area of software-testing education to benefit the readers (both educators and researchers) in designing and delivering software testing courses in university settings, and to also conduct further education research in this area. Method To address the above need, we conducted a systematic literature mapping (SLM) to synthesize what the community of educators have published on this topic. After compiling a candidate pool of 307 papers, and applying a set of inclusion/exclusion criteria, our final pool included 204 papers published between 1992 and 2019. Results The topic of software-testing education is becoming more active, as we can see by the increasing number of papers. Many pedagogical approaches (how to best teach testing), course-ware, and specific tools for testing education have been proposed. Many challenges in testing education and insights on how to overcome those challenges have been proposed. Conclusion This paper provides educators and researchers with a classification of existing studies within software-testing education. We further synthesize challenges and insights reported when teaching software testing. The paper also provides a reference (“index”) to the vast body of knowledge and experience on teaching software testing. Our mapping study aims to help educators and researchers to identify the best practices in this area to effectively plan and deliver their software testing courses, or to conduct further education-research in this important area.}
}

@article{rayyan-727967312,
  title={Systematic mapping study: On the coverage of aspect-oriented methodologies for the early phases of the software development life cycle},
  year={2020},
  journal={Journal of King Saud University - Computer and Information Sciences},
  issn={1319-1578},
  author={Pinciroli, Fernando and Barros Justo, Jose Luis and Forradellas, Raymundo},
  url={https://www.sciencedirect.com/science/article/pii/S1319157820305231},
  keywords={Evidence-based software engineering, Systematic mapping study, Systematic review, Aspect-oriented paradigm benefits, Aspect-oriented paradigm challenges, Aspect-oriented system development, Aspect-oriented tools, notations and techniques, Software},
  abstract={Although the number of aspect-oriented software development techniques and tools proposed by the scientific literature have been increasing since the late 80′s, the evidence about the benefits that the aspect-oriented paradigm have reached in real-world settings is scarce. Our objective is to identify and classify the aspect-oriented software development methodologies used to reduce the effort and costs of moving from traditional approaches to the aspect-oriented approach in real-world settings. We conducted a systematic mapping study (SMS). Our search strategies retrieved a set of 3212 papers out of which 115 were selected as relevant studies. We defined eight categories to classify these studies: aspect-oriented methodologies proposed for early aspects; development early phases covered; notations; modeling techniques; supporting tools; aspect-oriented methodologies used in real-world settings; benefits reported and unsolved issues. As a result, 39 named methodologies were reported; they cover the business modeling (14 papers), requirements (93 papers), test cases (1 paper) and design (41 papers) phases of the software development life cycle (SDLC); we found 36 different notations, with UML as the most mentioned (66 papers); 22 modeling techniques were found, where the use cases were the ones that appeared the most, on 43 occasions; 43 support tools of which none was repeated in more than 3 articles; 15 applications in real-world settings; 17 benefits, modularization being the most mentioned with 4 occurrences; and 15 pending improvement opportunities. Finally, we have obtained conclusions: the literature analyzed demonstrates that there are no prevailing standards on methodologies and notations, beyond that the most employed are those belonging to the OMG; we have not found any methodology that includes all phases of the SDLC; the diagrams corresponding to OMG's standards account for 78% of the results in the facet of modeling techniques; there are no tools that have the greatest predilection and the most used is mentioned only three times; in addition, 41% of the articles do not mention any tool; the evidence of aspect-oriented methodologies application in real-world settings reached just the 10%, although the declared benefits are coincident with those promised in the aspect-orientated literature. The mentioned pending issues can guide new studies (RQ8).}
}

@article{rayyan-727967313,
  title={Publication trends in gamification: A systematic mapping study},
  year={2018},
  journal={Computer Science Review},
  issn={1574-0137},
  volume={27},
  pages={33-44},
  author={Kasurinen, Jussi and Knutas, Antti},
  url={https://www.sciencedirect.com/science/article/pii/S1574013716301769},
  keywords={Systematic literature review, Crowdsourcing, Serious games, Gamification, Games for health, MOOCs, Proof-of-concept studies},
  abstract={The term gamification and gamified systems are a trending area of research. However, gamification can indicate several different things, such as applying the game-like elements into the design of the user interface of a software, but not all gamification is necessarily associated with software products. Overall, it is unclear what different aspects are studied under the umbrella of ‘gamification', and what is the current state of the art in the gamification research. In this paper, 1164 gamification studies are analyzed and classified based on their focus areas and the research topics to establish what the research trends in gamification are. Based on the results, e-learning and proof-of-concept studies in the ecological lifestyle and sustainability, assisting computer science studies and improving motivation are the trendiest areas of gamification research. Currently, the most common types of research are the proof-of-concept studies, and theoretical works on the different concepts and elements of gamification.}
}

@article{rayyan-727967319,
  title={Early software defect prediction: A systematic map and review},
  year={2018},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={144},
  pages={216-239},
  author={Özakıncı, Rana and Tarhan, Ayça},
  url={https://www.sciencedirect.com/science/article/pii/S0164121218301213},
  keywords={Systematic literature review, Systematic mapping, Software quality, Early defect prediction, Prediction model, Software defect, Software},
  abstract={Context Software defect prediction is a trending research topic, and a wide variety of the published papers focus on coding phase or after. A limited number of papers, however, includes the prior (early) phases of the software development lifecycle (SDLC). Objective The goal of this study is to obtain a general view of the characteristics and usefulness of Early Software Defect Prediction (ESDP) models reported in scientific literature. Method A systematic mapping and systematic literature review study has been conducted. We searched for the studies reported between 2000 and 2016. We reviewed 52 studies and analyzed the trend and demographics, maturity of state-of-research, in-depth characteristics, success and benefits of ESDP models. Results We found that categorical models that rely on requirement and design phase metrics, and few continuous models including metrics from requirements phase are very successful. We also found that most studies reported qualitative benefits of using ESDP models. Conclusion We have highlighted the most preferred prediction methods, metrics, datasets and performance evaluation methods, as well as the addressed SDLC phases. We expect the results will be useful for software teams by guiding them to use early predictors effectively in practice, and for researchers in directing their future efforts.}
}

@article{rayyan-727967334,
  title={Requirements engineering: A systematic mapping study in agile software development},
  year={2018},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={139},
  pages={32-50},
  author={Curcio, Karina and Navarro, Tiago and Malucelli, Andreia and Reinehr, Sheila},
  url={https://www.sciencedirect.com/science/article/pii/S0164121218300141},
  keywords={Systematic mapping study, Requirements engineering, Agile software development, Software},
  abstract={Context Requirements engineering in agile software development is a relatively recent software engineering topic and it is not completely explored and understood. The understanding of how this process works on agile world needs a deeper analysis. Objective The goal of this paper is to map the subject area of requirements engineering in agile context to identify the main topics that have been researched and to identify gaps to develop future researches. It is also intended to identify the obstacles that practitioners face when using agile requirements engineering. Method A systematic mapping study was conducted and as a result 2171 papers were initially identified and further narrowed to 104 by applying exclusion criteria and analysis. Conclusion After completing the classification and the analysis of the selected studies it was possible to identify 15 areas (13 based on SWEBOK) where researches were developed. Five of such areas points to the need of future researches, among them are requirements elicitation, change management, measuring requirements, software requirements tools and comparative studies between traditional and agile requirements. In this research, some obstacles that practitioners face dealing with requirements engineering in agile context were also identified. They are related to environment, people and resources.}
}

@article{rayyan-727967337,
  title={A Systematic Mapping Study driven by the margin of error},
  year={2018},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={144},
  pages={439-449},
  author={Kosar, Tomaž and Bohra, Sudev and Mernik, Marjan},
  url={https://www.sciencedirect.com/science/article/pii/S0164121218301353},
  keywords={Software engineering, Systematic review, Systematic Mapping Study, Reliability, Margin of error},
  abstract={Until recently, many Systematic Literature Reviews (SLRs) and Systematic Mapping Studies (SMSs) have been proposed. However, when SMS is performed on a broad topic with a large amount of primary studies, the cost of assessment of all primary studies requires unjustified resources. In this paper, a new approach is introduced for performing SMSs, called SMS driven by the margin of error. The main objective of the described work was to decrease the assessment cost of primary studies by stopping the process of classification of primary studies when enough evidence has been collected. We introduced a statistical approach with random sampling and a margin of error into the design of SMSs when a topic under discussion is broad with a large number of primary studies. In this paper, SMS driven by the margin of error was applied on three different use cases: SMS on Domain-Specific Languages, SMS on Template-based Code Generation, and SMS on Software Reliability Modeling, where it was shown that the proposed approach reduced the cost of assessing primary studies and quantified the reliability of SMS.}
}

@article{rayyan-727967351,
  title={Secondary studies in the academic context: A systematic mapping and survey},
  year={2020},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={170},
  pages={110734},
  author={Felizardo, Katia Romero and de Souza, Érica Ferreira and Napoleão, Bianca Minetto and Vijaykumar, Nandamudi Lankalapalli and Baldassarre, Maria Teresa},
  url={https://www.sciencedirect.com/science/article/pii/S0164121220301655},
  keywords={Systematic literature review, Secondary studies, Systematic mapping, Education},
  abstract={Context: Several researchers have reported their experiences in applying secondary studies (Systematic Literature Reviews — SLRs and Systematic Mappings — SMs) in Software Engineering (SE). However, there is still a lack of studies discussing the value of performing secondary studies in an academic context. Goal: The main goal of this study is to provide an overview on the use of secondary studies in an academic context. Method: Two empirical research methods were used. Initially, we conducted a SM to identify the available and relevant studies on the use of secondary studies as a research methodology for conducting SE research projects. Secondly, a survey was performed with 64 SE researchers to identify their perception related to the value of performing secondary studies to support their research projects. Results: Our results show benefits of using secondary studies in the academic context, such as providing an overview of the literature as well as identifying relevant research literature on a research area enabling to find reasons to explain why a research project should be approved for a grant and/or supporting decisions made in a research project. Difficulties faced by SE graduate students with secondary studies are that they tend to be conducted by a team and it demands more effort than a traditional review. Conclusions: Secondary studies are valuable to graduate students. They should consider conducting a secondary study for their research project due to the benefits and contributions provided to develop the overall project. However, the advice of an experienced supervisor is essential to avoid bias. In addition, the acquisition of skills can increase student's motivation to pursue their research projects and prepare them for both academic or industrial careers.}
}

@article{rayyan-727967355,
  title={Analogy-based software development effort estimation: A systematic mapping and review},
  year={2015},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={58},
  pages={206-230},
  author={Idri, Ali and azzahra Amazal, Fatima and Abran, Alain},
  url={https://www.sciencedirect.com/science/article/pii/S0950584914001815},
  keywords={Systematic literature review, Analogy, Mapping study, Case-based reasoning, Software development effort estimation, Software},
  abstract={Context Analogy-based Software development Effort Estimation (ASEE) techniques have gained considerable attention from the software engineering community. However, existing systematic map and review studies on software development effort prediction have not investigated in depth several issues of ASEE techniques, to the exception of comparisons with other types of estimation techniques. Objective The objective of this research is twofold: (1) to classify ASEE studies which primary goal is to propose new or modified ASEE techniques according to five criteria: research approach, contribution type, techniques used in combination with ASEE methods, and ASEE steps, as well as identifying publication channels and trends and (2) to analyze these studies from five perspectives: estimation accuracy, accuracy comparison, estimation context, impact of the techniques used in combination with ASEE methods, and ASEE tools. Method We performed a systematic mapping of studies for which the primary goal is to develop or to improve ASEE techniques published in the period 1990–2012, and reviewed them based on an automated search of four electronic databases. Results In total, we identified 65 studies published between 1990 and 2012, and classified them based on our predefined classification criteria. The mapping study revealed that most researchers focus on addressing problems related to the first step of an ASEE process, that is, feature and case subset selection. The results of our detailed analysis show that ASEE methods outperform the eight techniques with which they were compared, and tend to yield acceptable results especially when combining ASEE techniques with Fuzzy Logic (FL) or Genetic Algorithms (GA). Conclusion Based on the findings of this study, the use of other techniques such FL and GA in combination with an ASEE method is promising to generate more accurate estimates. However, the use of ASEE techniques by practitioners is still limited: developing more ASEE tools may facilitate the application of these techniques and then lead to increasing the use of ASEE techniques in industry.}
}

@article{rayyan-727967363,
  title={Software startup engineering: A systematic mapping study},
  year={2018},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={144},
  pages={255-274},
  author={Berg, Vebjørn and Birkeland, Jørgen and Nguyen-Duc, Anh and Pappas, Ilias O and Jaccheri, Letizia},
  url={https://www.sciencedirect.com/science/article/pii/S0164121218301286},
  keywords={Systematic mapping study, Software engineering, Software development, Software startup, Startup, Software},
  abstract={Software startups have long been a significant driver in economic growth and innovation. The on-going failure of the major number of startups calls for a better understanding of state-of-the-practice of startup activities. Objective With a focus on engineering perspective, this study aims at identifying the change in focus of research area and thematic concepts operating startup research. A systematic mapping study on 74 primary papers (in which 27 papers are newly selected) from 1994 to 2017 was conducted with a comparison with findings from previous mapping studies. A classification schema was developed, and the primary studies were ranked according to their rigour. We discovered that most research has been conducted within the SWEBOK knowledge areas software engineering process, management, construction, design, and requirements, with the shift of focus towards process and management areas. We also provide an alternative classification for future startup research. We find that the rigour of the primary papers was assessed to be higher between 2013–2017 than that of 1994–2013. We also find an inconsistency of characterizing startups. Future work can focus on certain research themes, such as startup evolution models and human aspects, and consolidate the thematic concepts describing software startups.}
}

@article{rayyan-727967371,
  title={The impact of Use Cases in real-world software development projects: A systematic mapping study},
  year={2019},
  journal={Computer Standards & Interfaces},
  issn={0920-5489},
  volume={66},
  pages={103362},
  author={Barros-Justo, José L and Benitti, Fabiane B V and Tiwari, Saurabh},
  url={https://www.sciencedirect.com/science/article/pii/S0920548919301254},
  keywords={Evidence-based software engineering, Systematic mapping study, Software engineering, Impact in industry, UML Use Cases, Software},
  abstract={Context There is abundant literature on the application of UML Use Cases. However, the impact that these applications have had on real projects (in industry) is not well known. It is necessary to know what the impact of the Use Cases really is, so that both, researchers and professionals can make the most pertinent decisions. Objective To identify and classify the positive and negative impacts of using Use Cases in real-world settings. Method We conducted a systematic mapping study. The search strategies retrieved a set of 4431 papers out of which 47 were selected as primary studies. We defined four facets to classify these studies: 1) the positive impact (advantages), 2) the negative impact (disadvantages), 3) the industry's domain and 4) the type of research reported. Results Our study identified eight categories of advantages related to the application of Use Cases. The most mentioned were estimation, analysis and automation. These advantages had a heterogeneous distribution along the years. On the other hand, the granularity of the scenarios described in the Use Cases, the lack of a standardized format for specifying requirements, and the lack of appropriate guidelines for analysing them were the most mentioned disadvantages. We identified a variety of industry domains, grouped into seven categories. As we can expect most of the papers report experiences in the Information Technology domain, followed by financials applications. Almost half the papers applied evaluation research, including an empirical validation. Only one third of the analysed papers reported threats to validity, the most mentioned being generalizability (38%). Conclusions Use Cases have proven to be a useful tool in software development, particularly during the early stages. The positive effects far outweigh the few negative effects reported, although this may be due to the researchers' tendency of not reporting negative results.}
}

@article{rayyan-727967416,
  title={Automotive software engineering: A systematic mapping study},
  year={2017},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={128},
  pages={25-55},
  author={Haghighatkhah, Alireza and Banijamali, Ahmad and Pakanen, Olli-Pekka and Oivo, Markku and Kuvaja, Pasi},
  url={https://www.sciencedirect.com/science/article/pii/S0164121217300560},
  keywords={Systematic mapping study, Embedded systems, Literature survey, Automotive software engineering, Automotive systems, Software-intensive systems, Software},
  abstract={The automotive industry is going through a fundamental change by moving from a mechanical to a software-intensive industry in which most innovation and competition rely on software engineering competence. Over the last few decades, the importance of software engineering in the automotive industry has increased significantly and has attracted much attention from both scholars and practitioners. A large body-of-knowledge on automotive software engineering has accumulated in several scientific publications, yet there is no systematic analysis of that knowledge. This systematic mapping study aims to classify and analyze the literature related to automotive software engineering in order to provide a structured body-of-knowledge, identify well-established topics and potential research gaps. The review includes 679 articles from multiple research sub-area, published between 1990 and 2015. The primary studies were analyzed and classified with respect to five different dimensions. Furthermore, potential research gaps and recommendations for future research are presented. Three areas, namely system/software architecture and design, qualification testing, and reuse were the most frequently addressed topics in the literature. There were fewer comparative and validation studies, and the literature lacks practitioner-oriented guidelines. Overall, research activity on automotive software engineering seems to have high industrial relevance but is relatively lower in its scientific rigor.}
}

@article{rayyan-727967425,
  title={Taxonomies in software engineering: A Systematic mapping study and a revised taxonomy development method},
  year={2017},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={85},
  pages={43-59},
  author={Usman, Muhammad and Britto, Ricardo and Börstler, Jürgen and Mendes, Emilia},
  url={https://www.sciencedirect.com/science/article/pii/S0950584917300472},
  keywords={Systematic mapping study, Software engineering, Classification, Taxonomy, Software},
  abstract={Context: Software Engineering (SE) is an evolving discipline with new subareas being continuously developed and added. To structure and better understand the SE body of knowledge, taxonomies have been proposed in all SE knowledge areas. Objective: The objective of this paper is to characterize the state-of-the-art research on SE taxonomies. Method: A systematic mapping study was conducted, based on 270 primary studies. Results: An increasing number of SE taxonomies have been published since 2000 in a broad range of venues, including the top SE journals and conferences. The majority of taxonomies can be grouped into the following SWEBOK knowledge areas: construction (19.55%), design (19.55%), requirements (15.50%) and maintenance (11.81%). Illustration (45.76%) is the most frequently used approach for taxonomy validation. Hierarchy (53.14%) and faceted analysis (39.48%) are the most frequently used classification structures. Most taxonomies rely on qualitative procedures to classify subject matter instances, but in most cases (86.53%) these procedures are not described in sufficient detail. The majority of the taxonomies (97%) target unique subject matters and many taxonomy-papers are cited frequently. Most SE taxonomies are designed in an ad-hoc way. To address this issue, we have revised an existing method for developing taxonomies in a more systematic way. Conclusion: There is a strong interest in taxonomies in SE, but few taxonomies are extended or revised. Taxonomy design decisions regarding the used classification structures, procedures and descriptive bases are usually not well described and motivated.}
}

@article{rayyan-727967455,
  title={Safety for mobile robotic systems: A systematic mapping study from a software engineering perspective},
  year={2019},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={151},
  pages={150-179},
  author={Bozhinoski, Darko and Di Ruscio, Davide and Malavolta, Ivano and Pelliccione, Patrizio and Crnkovic, Ivica},
  url={https://www.sciencedirect.com/science/article/pii/S0164121219300317},
  keywords={Software, Systematic mapping study, Safety for mobile robots, Robotics},
  abstract={Robotic research is making huge progress. However, existing solutions are facing a number of challenges preventing them from being used in our everyday tasks: (i) robots operate in unknown environments, (ii) robots collaborate with each other and even with humans, and (iii) robots shall never injure people or create damages. Researchers are targeting those challenges from various perspectives, producing a fragmented research landscape. We aim at providing a comprehensive and replicable picture of the state of the art from a software engineering perspective on existing solutions aiming at managing safety for mobile robotic systems. We apply the systematic mapping methodology on an initial set of 1274 potentially relevant research papers, we selected 58 primary studies and analyzed them according to a systematically-defined classification framework. This work contributes with (i) a classification framework for methods or techniques for managing safety when dealing with the software of mobile robotic systems (MSRs), (ii) a map of current software methods or techniques for software safety for MRSs, (iii) an elaboration on emerging challenges and implications for future research, and (iv) a replication package for independent replication and verification of this study. Our results confirm that generally existing solutions are not yet ready to be used in everyday life. There is the need of turn-key solutions ready to deal with all the challenges mentioned above.}
}

@article{rayyan-727967511,
  title={Forty years of research on personality in software engineering: A mapping study},
  year={2015},
  journal={Computers in Human Behavior},
  issn={0747-5632},
  volume={46},
  pages={94-113},
  author={Cruz, Shirley and da Silva, Fabio Q B and Capretz, Luiz Fernando},
  url={https://www.sciencedirect.com/science/article/pii/S0747563214007237},
  keywords={Systematic literature review, Empirical software engineering, Mapping study, Human factors in software engineering, Software psychology, Software},
  abstract={In this article, we present a systematic mapping study of research on personality in software engineering. The goal is to plot the landscape of current published empirical and theoretical studies that deal with the role of personality in software engineering. We applied the systematic review method to search and select published articles, and to extract and synthesize data from the selected articles that reported studies about personality. Our search retrieved more than 19,000 articles, from which we selected 90 articles published between 1970 and 2010. Nearly 72% of the studies were published after 2002 and 83% of the studies reported empirical research findings. Data extracted from the 90 studies showed that education and pair programming were the most recurring research topics, and that MBTI was the most used test. Research related to pair programming, education, team effectiveness, software process allocation, software engineer personality characteristics, and individual performance concentrated over 88% of the studies, while team process, behavior and preferences, and leadership performance were the topics with the smallest number of studies. We conclude that the number of articles has grown in the last few years, but contradictory evidence was found that might have been caused by differences in context, research method, and versions of the tests used in the studies. While this raises a warning for practitioners that wish to use personality tests in practice, it shows several opportunities for the research community to improve and extend findings in this field.}
}

@article{rayyan-727967532,
  title={Investigations about replication of empirical studies in software engineering: A systematic mapping study},
  year={2015},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={64},
  pages={76-101},
  author={de Magalhães, Cleyton V C and da Silva, Fabio Q B and Santos, Ronnie E S and Suassuna, Marcos},
  url={https://www.sciencedirect.com/science/article/pii/S0950584915000300},
  keywords={Systematic literature review, Software engineering, Experiments, Mapping study, Empirical studies, Replications, Software},
  abstract={Context Two recent mapping studies which were intended to verify the current state of replication of empirical studies in Software Engineering (SE) identified two sets of studies: empirical studies actually reporting replications (published between 1994 and 2012) and a second group of studies that are concerned with definitions, classifications, processes, guidelines, and other research topics or themes about replication work in empirical software engineering research (published between 1996 and 2012). Objective In this current article, our goal is to analyze and discuss the contents of the second set of studies about replications to increase our understanding of the current state of the work on replication in empirical software engineering research. Method We applied the systematic literature review method to build a systematic mapping study, in which the primary studies were collected by two previous mapping studies covering the period 1996–2012 complemented by manual and automatic search procedures that collected articles published in 2013. Results We analyzed 37 papers reporting studies about replication published in the last 17years. These papers explore different topics related to concepts and classifications, presented guidelines, and discuss theoretical issues that are relevant for our understanding of replication in our field. We also investigated how these 37 papers have been cited in the 135 replication papers published between 1994 and 2012. Conclusions Replication in SE still lacks a set of standardized concepts and terminology, which has a negative impact on the replication work in our field. To improve this situation, it is important that the SE research community engage on an effort to create and evaluate taxonomy, frameworks, guidelines, and methodologies to fully support the development of replications.}
}

@article{rayyan-727967553,
  title={CERSE - Catalog for empirical research in software engineering: A Systematic mapping study},
  year={2019},
  journal={Information and Software Technology},
  issn={0950-5849},
  volume={105},
  pages={117-149},
  author={Molléri, Jefferson Seide and Petersen, Kai and Mendes, Emilia},
  url={https://www.sciencedirect.com/science/article/pii/S0950584917301118},
  keywords={Mapping study, Empirical research, Empirical methods, Software},
  abstract={Context Empirical research in software engineering contributes towards developing scientific knowledge in this field, which in turn is relevant to inform decision-making in industry. A number of empirical studies have been carried out to date in software engineering, and the need for guidelines for conducting and evaluating such research has been stressed. Objective: The main goal of this mapping study is to identify and summarize the body of knowledge on research guidelines, assessment instruments and knowledge organization systems on how to conduct and evaluate empirical research in software engineering. Method: A systematic mapping study employing manual search and snowballing techniques was carried out to identify the suitable papers. To build up the catalog, we extracted and categorized information provided by the identified papers. Results: The mapping study comprises a list of 341 methodological papers, classified according to research methods, research phases covered, and type of instrument provided. Later, we derived a brief explanatory review of the instruments provided for each of the research methods. Conclusion: We provide: an aggregated body of knowledge on the state of the art relating to guidelines, assessment instruments and knowledge organization systems for carrying out empirical software engineering research; an exemplary usage scenario that can be used to guide those carrying out such studies is also provided. Finally, we discuss the catalog's implications for research practice and the needs for further research.}
}

@article{rayyan-727967554,
  title={Kanban in software engineering: A systematic mapping study},
  year={2018},
  journal={Journal of Systems and Software},
  issn={0164-1212},
  volume={137},
  pages={96-113},
  author={Ahmad, Muhammad Ovais and Dennehy, Denis and Conboy, Kieran and Oivo, Markku},
  url={https://www.sciencedirect.com/science/article/pii/S0164121217302820},
  keywords={Software engineering, Software development, Kanban, Lean, Software},
  abstract={Following a well-established track record of success in other domains such as manufacturing, Kanban is increasingly used to achieve continuous development and delivery of value in the software industry. However, while research on Kanban in software is growing, these articles are largely descriptive, and there is limited rigorous research on its application and with little cohesive building of cumulative knowledge. As a result, it is extremely difficult to determine the true value of Kanban in software engineering. This study investigates the scientific evidence to date regarding Kanban by conducting a systematic mapping of Kanban literature in software engineering between 2006 and 2016. The search strategy resulted in 382 studies, of which 23 were identified as primary papers relevant to this research. This study is unique as it compares the findings of these primary papers with insights from a review of 23 Kanban experience reports during the same period. This study makes four important contributions, (i) a state-of-the-art of Kanban research is provided, (ii) the reported benefits and challenges are identified in both the primary papers and experience reports, (iii) recommended practices from both the primary papers and experience reports are listed and (iv) opportunities for future Kanban research are identified.}
}

@article{rayyan-727967639,
  title={Continuous experimentation and A/B testing: A mapping study},
  year={2018},
  issn={978-1-4503-5745-6},
  pages={35-41},
  author={Ros, Rasmus and Runeson, Per},
  url={https://doi.org/10.1145/3194760.3194766},
  publisher={Association for Computing Machinery},
  series={RCoSE '18},
  keywords={mapping study, A/B testing, continuous experimentation},
  abstract={Background. Continuous experimentation (CE) has recently emerged as an established industry practice and as a research subject. Our aim is to study the application of CE and A/B testing in various industrial contexts. Objective. We wanted to investigate whether CE is used in different sectors of industry, by how it is reported in academic studies. We also wanted to explore the main topics researched to give an overview of the subject and discuss future research directions. Method. We performed a systematic mapping study of the published literature and included 62 papers, using a combination of database search and snowballing. Results. Most reported software experiments are done online and with software delivered as a service, although varied exemptions exist for e.g., financial software and games. The most frequently researched topics are challenges to conduct experiments and statistical methods for software experiments. Conclusions. The software engineering research on CE is still in its infancy. There are future research opportunities in evaluation research of technical topics and investigations of ethical experimentation. We conclude that the included studies show that A/B testing is applicable to a diversity of software and organisations.}
}

@article{rayyan-727967668,
  title={Historical, conceptual, and methodological aspects of the publications of the brazilian symposium on software engineering: A systematic mapping study},
  year={2011},
  pages={14-23},
  author={Cavalcanti, Thiago Rodrigues and da Silva, Fabio Q B},
  keywords={Software, Software engineering, Systematics, Guidelines, Conferences, engenharia de software, estudo secundÃ¡rio, Glass, Knowledge engineering, revisÃ£o de literatura.},
  abstract={The goal of this article is to provide a comprehensive and systematic analysis of the scientific work published in the Brazilian Symposium on Software Engineering (SBES). We used a systematic literature review methodology to extract, catalog, analyze, and synthesize data from all articles published in each of the 24 editions of SBES, with respect to historical, conceptual, and methodological aspects. The results of our review showed that 509 articles have been published, which were authored and co-authored by 818 researchers from 151 organizations, demonstrating the relevance of the SBES to bring together a significant portion of the Brazilian Software Engineering research community. Consistent with other studies, our results show that research published at SBES is diversified on the topics of software engineering addressed, but narrow on research approach and methods used. Besides, there is a strong concentration on technical aspects and much less studies addressing human or social aspects. We discuss the implications of these results for research and practice of software engineering in Brazil.}
}

@article{rayyan-727967675,
  title={Evidence relating to object-oriented software design: A survey},
  year={2007},
  pages={482-484},
  author={Bailey, John and Budgen, David and Turner, Mark and Kitchenham, Barbara and Brereton, Pearl and Linkman, Stephen},
  keywords={Software engineering, Software measurement, Data mining, Quality assessment, Software design, Computer science, Computer languages, Performance analysis, Protocols, Software Design, Software},
  abstract={There is little empirical knowledge of the effectiveness of the object-oriented paradigm. To conduct a systematic review of the literature describing empirical studies of this paradigm. We undertook a Mapping Study of the literature. 138 papers have been identified and classified by topic, form of study involved, and source. The majority of empirical studies of OO (object oriented software) concentrate on metrics, relatively few consider effectiveness.}
}

@article{rayyan-727967705,
  title={On using grey literature and google scholar in systematic literature reviews in software engineering},
  year={2020},
  journal={IEEE Access},
  issn={2169-3536},
  volume={8},
  pages={36226-36243},
  author={Yasin, Affan and Fatima, Rubia and Wen, Lijie and Afzal, Wasif and Azhar, Muhammad and Torkar, Richard},
  keywords={Internet, software engineering, tertiary study, Software engineering, Systematics, Bibliographies, Guidelines, systematic mapping, Databases, Grey literature, Google, empirical evaluation, Google scholar, gray, quality checklist, Software},
  abstract={Context: The inclusion of grey literature (GL) is important to remove publication bias while gathering available evidence regarding a certain topic. The number of systematic literature reviews (SLRs) in Software Engineering (SE) is increasing but we do not know about the extent of GL usage in these SLRs. Moreover, Google Scholar is rapidly becoming a search engine of choice for many researchers but the extent to which it can find the primary studies is not known. Objective: This tertiary study is an attempt to i) measure the usage of GL in SLRs in SE. Furthermore this study proposes strategies for categorizing GL and a quality checklist to use for GL in future SLRs; ii) explore if it is feasible to use only Google Scholar for finding scholarly articles for academic research. Method: We have conducted a systematic mapping study to measure the extent of GL usage in SE SLRs as well as to measure the feasibility of finding primary studies using Google Scholar. Results and conclusions: a) Grey Literature: 76.09% SLRs (105 out of 138) in SE have included one or more GL studies as primary studies. Among total primary studies across all SLRs (6307), 582 are classified as GL, making the frequency of GL citing as 9.23%. The intensity of GL use indicate that each SLR contains 5 primary studies on average (total intensity of GL use being 5.54). The ranking of GL tells us that conference papers are the most used form 43.3% followed by technical reports 28.52%. Universities, research institutes, labs and scientific societies together make up 67.7% of GL used, indicating that these are useful sources for searching GL. We additionally propose strategies for categorizing GL and criteria for evaluating GL quality, which can become a basis for more detailed guidelines for including GL in future SLRs. b) Google Scholar Results: The results show that Google Scholar was able to retrieve 96% of primary studies of these SLRs. Most of the primary studies that were not found using Google Scholar were from grey sources.}
}

@article{rayyan-727967728,
  title={What do we know about the effectiveness of software design patterns?},
  year={2012},
  journal={IEEE Transactions on Software Engineering},
  issn={1939-3520},
  volume={38},
  number={5},
  pages={1213-1231},
  author={Zhang, Cheng and Budgen, David},
  keywords={systematic literature review, Software engineering, Systematics, Software design, Design patterns, Terminology, empirical software engineering, Search engines, Maintenance engineering, Software Design, Software},
  abstract={Context. Although research in software engineering largely seeks to improve the practices and products of software development, many practices are based upon codification of expert knowledge, often with little or no underpinning from objective empirical evidence. Software design patterns seek to codify expert knowledge to share experience about successful design structures. Objectives. To investigate how extensively the use of software design patterns has been subjected to empirical study and what evidence is available about how and when their use can provide an effective mechanism for knowledge transfer about design. Method. We conducted a systematic literature review in the form of a mapping study, searching the literature up to the end of 2009 to identify relevant primary studies about the use of the 23 patterns catalogued in the widely referenced book by the “Gang of Four.” These studies were then categorized according to the forms of study employed, the patterns that were studied, as well as the context within which the study took place. Results. Our searches identified 611 candidate papers. Applying our inclusion/exclusion criteria resulted in a final set of 10 papers that described 11 instances of “formal” experimental studies of object-oriented design patterns. We augmented our analysis by including seven “experience” reports that described application of patterns using less rigorous observational forms. We report and review the profiles of the empirical evidence for those patterns for which multiple studies exist. Conclusions. We could not identify firm support for any of the claims made for patterns in general, although there was some support for the usefulness of patterns in providing a framework for maintenance, and some qualitative indication that they do not help novices learn about design. For future studies we recommend that researchers use case studies that focus upon some key patterns, and seek to identify the impact that their use can have upon maintenance.}
}

@article{rayyan-727967843,
  title={Replication of empirical studies in software engineering: Preliminary findings from a systematic mapping study},
  year={2011},
  pages={61-70},
  author={da Silva, Fabio Q B and Suassuna, Marcos and Lopes, Rodrigo. F and Gouveia, Tatiana B and Franca, A Cesar A and de Oliveira, Joao Paulo N and de Oliveira, Leonardo F M and Santos, Andre L M},
  keywords={Software, software engineering, mapping study, Software engineering, Systematics, Data mining, Manuals, literature review, experiments, empirical studies, Knowledge engineering, replications, Sections},
  abstract={Our goal in this study is to review the research related to the replication of empirical studies in software engineering in terms of replications of empirical studies and conceptual or theoretical work about replications. In this article we present the preliminary findings of this review, concentrating on the studies reporting replications and the related original studies. We applied the systematic review method to perform a mapping study about the current state of the replication work of empirical studies performed in software engineering research. We analyzed 16,126 articles, from which we extracted 93 articles reporting 125 replications performed between 1994 and 2010, of 76 original studies. Over 60% of the replications were performed in the last six years and 71% percent of the studies were internal replications. The topics of software construction, testing, and maintenance concentrate nearly 50% of the replication work, while software design, configuration management and software tools and methods are the topics with least replications. The number of replications grew in the last few years, but the absolute number of replications is still very small, in particular considering the breadth of topics in software engineering. Incentive to perform external replications and better standards to report empirical studies and their replications are still needed.}
}

@article{rayyan-727967846,
  title={Towards greener software engineering using software analytics: A systematic mapping},
  year={2017},
  pages={157-166},
  author={Anwar, Hina and Pfahl, Dietmar},
  keywords={Software, Software engineering, Systematics, systematic mapping, Measurement, software analytics, Energy efficiency, Green products, green software engineering, sustainability, Sustainable development},
  abstract={Sustainability in software engineering is a relatively new and fast growing field of research. Green software engineering aims to produce sustainable software products with minimum negative impact on the environment. In order to make greener software products, software practitioners need actionable timely information, to make useful trade-offs between energy efficiency and other quality attributes, like performance, during development. Software analytics could be used to provide this support, as it combines information from different software artifacts and converts it into useful information. The objective of this paper is to provide an overview of the sub-domains, contribution types, research types, research methods, future research potentials and the role of software analytics in the field of green software engineering in 2015-16. We applied the systematic mapping method and conducted a search for studies in six online databases. Screening of papers was done according to inclusion/exclusion criteria and 50 selected studies were classified after analysis and data extraction. We found that there are many validation studies but hardly any evaluation and experience papers in the domain of green software engineering. Only 11 out of 50 papers in the green software engineering domain used software analytics techniques to foster green software engineering. Our results indicate the need to develop new/improved automated software analytics tools for software practitioners along with metrics explaining the correlation between energy usage and other quality attributes.}
}

@article{rayyan-727967864,
  title={Security in telehealth systems from a software engineering viewpoint: A systematic mapping study},
  year={2020},
  journal={IEEE Access},
  issn={2169-3536},
  volume={8},
  pages={10933-10950},
  author={Márquez, Gastón and Astudillo, Hernán and Taramasco, Carla},
  keywords={Software, software engineering, Software engineering, Systematics, Security, systematic mapping study, Databases, security, Medical services, Telehealth systems, Telemedicine},
  abstract={Telehealth systems deliver remote care of elderly and physically less able patients as well as remote surgeries, treatments, and diagnoses. In this regard, several systemic properties must be satisfied (such as security) in order to ensure the functionality of Telehealth systems. Although existing studies discuss different security episodes that involve Telehealth systems, it is difficult to have a clear standpoint about which are the most reported security issues and which solutions have been proposed. Furthermore, since Telehealth systems are composed of several software systems, it is not clear which critical areas of Software Engineering are relevant to develop secure Telehealth systems. This article reports a systematic mapping study (SMS) whose purpose is to detect, organize, and characterize security issues in Telehealth systems. Based on the SMS results, we examine how Software Engineering may help to develop secure Telehealth systems. From over a thousand studies, we distinguished and classified 41 primary studies. Results show that (i) four security classifications (attacks, vulnerabilities, weaknesses, and threats) concentrate the most reported security issues; (ii) three security strategies (detect attacks, stop or mitigate attacks and react to attacks) characterize security issues, and (iii) the most relevant research themes are related to insecure data transmission and privacy. The SMS's findings suggest that software design, requirements, and models are key areas to develop secure Telehealth systems.}
}

@article{rayyan-727967870,
  title={Performance analysis for object-oriented software: A systematic mapping},
  year={2015},
  journal={IEEE Transactions on Software Engineering},
  issn={1939-3520},
  volume={41},
  number={7},
  pages={691-710},
  author={Maplesden, David and Tempero, Ewan and Hosking, John and Grundy, John C},
  keywords={Systematics, survey, Software performance, Systematic review, Databases, performance, Performance analysis, Mathematical model, Runtime, object-oriented, Software},
  abstract={Performance is a crucial attribute for most software, making performance analysis an important software engineering task. The difficulty is that modern applications are challenging to analyse for performance. Many profiling techniques used in real-world software development struggle to provide useful results when applied to large-scale object-oriented applications. There is a substantial body of research into software performance generally but currently there exists no survey of this research that would help identify approaches useful for object-oriented software. To provide such a review we performed a systematic mapping study of empirical performance analysis approaches that are applicable to object-oriented software. Using keyword searches against leading software engineering research databases and manual searches of relevant venues we identified over 5,000 related articles published since January 2000. From these we systematically selected 253 applicable articles and categorised them according to ten facets that capture the intent, implementation and evaluation of the approaches. Our mapping study results allow us to highlight the main contributions of the existing literature and identify areas where there are interesting opportunities. We also find that, despite the research including approaches specifically aimed at object-oriented software, there are significant challenges in providing actionable feedback on the performance of large-scale object-oriented applications.}
}

@article{rayyan-727967890,
  title={A mapping study of the definitions used for Service Oriented Architecture},
  year={2012},
  pages={57-61},
  author={Anjum, Maria and Budgen, David},
  abstract={Context: Service Oriented Architecture (SOA) has formed the basis for many workshops, conferences and books. However these do not always seem to have used a consistent set of concepts. Objectives: To identify the key characteristics of an SOA as identified from the literature. Method: We report on our experience of undertaking a mapping study (a form of systematic literature review) to identify the different definitions of SOA being used in the literature. Results: We found 921 candidate studies, of which only 98 were explicit about the definitions of SOA that were used. Conclusion: We have demonstrated that a mapping study can be usefully employed to identify inconsistencies and help to create a model of SOA.}
}

@article{rayyan-727967902,
  title={Security compliance in agile software development: A systematic mapping study},
  year={2020},
  pages={413-420},
  author={Moyón, Fabiola and Almeida, Pamela and Riofrío, Daniel and Mendez, Daniel and Kalinowski, Marcos},
  keywords={Software, Software engineering, Systematics, Security, Systematic Mapping Study, Programming, Regulation, Standards, Agile Software Engineering, Secure Software Engineering, Security Compliance},
  abstract={Companies adopting agile development tend to face challenges in complying with security norms. Existing research either focuses on how to integrate security into agile methods or on discussing compliance issues of agile methods but independently of the regulation type, in particular of security standards. A comprehensive overview of this scattered field is still missing and we know little about how to achieve security compliance in agile software development. Existing secondary studies (mapping studies and literature reviews) analyze publications on secure agile development, but they do not analyze implications of security standard compliance, e.g., integration of specific standard requirements or compliance assessments. To close this gap, we report on a systematic mapping study. Starting with a set of 2,383 papers, our work distills 11 relevant publications addressing security compliance in agile software development. With this study, we contribute by describing the maturity of the field, as well as domains where security compliant agile software engineering was investigated. Moreover, we make explicit which phases of a secure development process are covered by the field and which agile principles are analyzed when aiming at compliance with international security standards, country-specific security regulations, industry-specific security standards, and other well-known security frameworks.}
}

@article{rayyan-727967906,
  title={A systematic mapping study on software engineering testbeds},
  year={2011},
  pages={107-116},
  author={Barreiros, Emanoel and Almeida, Adauto and Saraiva, Juliana and Soares, Sergio},
  keywords={Systematics, Empirical software engineering, Software architecture, Context, Software systems, Protocols, technology evaluation, technology transfer, testbeds, Software},
  abstract={Even though empirical research has grown in interest, techniques, methodologies and best practices are still in debate. In this context, test beds are effective when one needs to evaluate and compare technologies. The concept is well disseminated in other areas such as Computer Networks, but remains poorly explored in Software Engineering (SE). This paper presents a systematic mapping study on the SE test beds literature. From the initial set of 4239 studies, 13 primary studies were selected and categorized. Based on that, we found that Software Architecture is the most investigated topic, controlled experiment is the most used method to evaluate such test beds, 20 benefits of using test beds in SE have been identified and that test beds comprise very heterogeneous structural elements.}
}

@article{rayyan-727967925,
  title={Risk Management in software engineering: A scoping study},
  year={2012},
  pages={243-252},
  author={Lobato, Luanna Lopes and do Carmo Machado, Ivan and da Mota Silveira Neto, Paulo Anselmo and de Almeida, Eduardo Santana and de Lemos Meira, Silvio Romero},
  keywords={Software Engineering, Risk Management, Scoping Study, Software},
  abstract={Background - Risk Management (RM) practices are usually established towards avoiding or minimizing problems, likely to occur during software development. It can be stated as the task of analyzing and managing the impact of every important action to be performed in the project. Aim - In the context of RM practices, we developed a scoping study, aiming at analyzing the current scenario of RM practices in software development. Method - We analyzed 74 studies published by the most important venues published up to the year 2011. Based on the analyzed dataset, we sketched a set of useful practices for applying RM in software projects. Results - The analysis indicate that most of the studies subjectively describe ways to evaluate risks, instead of providing readers with details on how RM is to be performed. Conclusions - Such findings points out to the need of further research in the field of RM, specially due to its importance for software development projects.}
}

@article{rayyan-727967926,
  title={Smart tools in software engineering: A systematic mapping study},
  year={2019},
  pages={1509-1513},
  author={Savchenko, Dmitrii and Kasurinen, Jussi and Taipale, Ossi},
  keywords={Software, Software engineering, Systematics, Tools, Unified modeling language, Industries, Technological innovation},
  abstract={Software development processes such as waterfall development model have been around for over fifty years, but still, even modern software development approaches, such as DevOps or Test-driven development, fundamentally rely on the same principles and phases as everything before them. Yet, the modern world imposes new challenges for software businesses, and new ways of digital distribution require new ways of resource provisioning and ability to reduce the time-to-market to its absolute minimum. In this study, we identify and analyze the technologies which may be useful for software companies to ease the development and maintenance work by assisting the experts to collect relevant information and observe issues before they cause process disturbances. As a result, we describe a mapping study, which identifies different approaches to developing a smart software engineering tools applying potential technologies such as artificial intelligence, cloud-based service models, adaptive measurement, and other approaches, which could offer significant benefits to the software development process.}
}

@article{rayyan-727967949,
  title={A systematic mapping study on the open source software development process},
  year={2012},
  pages={42-46},
  author={Acuña, Silvia T and Castro, John W and Dieste, Oscar and Juristo, Natalia},
  keywords={software engineering, systematic mapping study, open source software development, Software},
  abstract={Background: There is no globally accepted open source software development process to define how open source software is developed in practice. A process description is important for coordinating all the software development activities involving both people and technology. Aim: The research question that this study sets out to answer is: What activities do open source software process models contain? The activity groups on which it focuses are Concept Exploration, Software Requirements, Design, Maintenance and Evaluation. Method: We conduct a systematic mapping study (SMS). A SMS is a form of systematic literature review that aims to identify and classify available research papers concerning a particular issue. Results: We located a total of 29 primary studies, which we categorized by the open source software project that they examine and by activity types (Concept Exploration, Software Requirements, Design, Maintenance and Evaluation). The activities present in most of the open source software development processes were Execute Tests and Conduct Reviews, which belong to the Evaluation activities group. Maintenance is the only group that has primary studies addressing all the activities that it contains. Conclusions: The primary studies located by the SMS are the starting point for analyzing the open source software development process and proposing a process model for this community. The papers in our paper pool that describe a specific open source software project provide more regarding our research question than the papers that talk about open source software development without referring to a specific open source software project.}
}

@article{rayyan-727967975,
  title={Software cost estimation for global software development a systematic map and review study},
  year={2015},
  pages={197-206},
  author={El Bajta, Manal and Idri, Ali and Fernández-Alemán, José Luis and Ros, Joaquin Nicolas and Toval, Ambrosio},
  keywords={Software, Systematics, Data mining, Estimation, Systematic Mapping Study, Context, Conferences, Mathematical model, Software Cost Estimation, Global Software Development},
  abstract={Software cost estimation plays a central role in the success of software project management in the context of global software development (GSD). The importance of mastering software cost estimation may appear to be obvious. However, as regards the issue of customer satisfaction, end-users are often unsatisfied with software project management results. In this paper, a systematic mapping study (SMS) is carried out with the aim of summarising software cost estimation in the context of GSD research by answering nine mapping questions. A total, of 16 articles were selected and classified according to nine criteria: publication source, publication year, research type, research approach, contribution type, software cost estimation techniques, software cost estimation activity, cost drivers and cost estimation performances for GSD projects. The results show that the interest in estimating software cost for GSD projects has increased in recent years and reveal that conferences are the most frequently targeted publications. Most software cost estimation for GSD research has focused on theory. The dominant contribution type of software cost estimation for GSD research is that of models, while the predominant activity was identified as being software development cost. Identifying empirical solutions to address software cost estimation for GSD is a promising direction for researchers.}
}

@article{rayyan-727967980,
  title={What should I document? A preliminary systematic mapping study into API documentation knowledge},
  year={2019},
  pages={1-6},
  author={Cummaudo, Alex and Vasa, Rajesh and Grundy, John},
  keywords={Software, Software engineering, Systematics, documentation, Guidelines, Tools, systematic mapping study, Taxonomy, taxonomy, Documentation, API, DevX},
  abstract={Background: Good API documentation facilitates the development process, improving productivity and quality. While the topic of API documentation quality has been of interest for the last two decades, there have been few studies to map the specific constructs needed to create a good document. In effect, we still need a structured taxonomy that captures such knowledge systematically.Aims: This study reports emerging results of a systematic mapping study. We capture key conclusions from previous studies that assess API documentation quality, and synthesise the results into a single framework.Method: By conducting a systematic review of 21 key works, we have developed a five dimensional taxonomy based on 34 categorised weighted recommendations.Results: All studies utilise field study techniques to arrive at their recommendations, with seven studies employing some form of interview and questionnaire, and four conducting documentation analysis. The taxonomy we synthesise reinforces that usage description details (code snippets, tutorials, and reference documents) are generally highly weighted as helpful in API documentation, in addition to design rationale and presentation.Conclusions: We propose extensions to this study aligned to developer utility for each of the taxonomy's categories.}
}

@article{rayyan-727967986,
  title={Current state of research on continuous experimentation: A systematic mapping study},
  year={2018},
  pages={335-344},
  author={Auer, Florian and Felderer, Michael},
  keywords={Software engineering, Systematics, Bibliographies, Data mining, Search problems, systematic mapping study, Databases, continuous experimentation},
  abstract={The systematic evaluation of ideas by experiments are the foundation of continuous experimentation. It allows to assess the value of an idea, remove guessing and subjective opinions from the discussion. The enormous interest of it by practitioners and researchers let the body of knowledge consistently grow. New framework, methods and techniques are developed and its application is constantly expanded to new fields like cyber-physical systems or social networks. In this paper we present a systematic mapping study to characterize the current state of research on continuous experimentation. Our study analyzes the following aspects: intensity of research activity and industry-academia collaboration, influential authors and publications, frequent research types and topics, kind of contributions and terms used for continuous experimentation. Our findings show amongst others that the intensity of research activities increases consistently, the collaboration between industry and academia is high and the most cited publications are experience reports from practitioners.}
}

@article{rayyan-727967998,
  title={Machine learning applied to software testing: A systematic mapping study},
  year={2019},
  journal={IEEE Transactions on Reliability},
  issn={1558-1721},
  volume={68},
  number={3},
  pages={1189-1212},
  author={Durelli, Vinicius H S and Durelli, Rafael S and Borges, Simone S and Endo, Andre T and Eler, Marcelo M and Dias, Diego R C and Guimarães, Marcelo P},
  keywords={Software testing, Software engineering, Systematics, systematic mapping study, Software systems, software testing, Software algorithms, Machine learning (ML), Software, Learning},
  abstract={Software testing involves probing into the behavior of software systems to uncover faults. Most testing activities are complex and costly, so a practical strategy that has been adopted to circumvent these issues is to automate software testing. There has been a growing interest in applying machine learning (ML) to automate various software engineering activities, including testing-related ones. In this paper, we set out to review the state-of-the art of how ML has been explored to automate and streamline software testing and provide an overview of the research at the intersection of these two fields by conducting a systematic mapping study. We selected 48 primary studies. These selected studies were then categorized according to study type, testing activity, and ML algorithm employed to automate the testing activity. The results highlight the most widely used ML algorithms and identify several avenues for future research. We found that ML algorithms have been used mainly for test-case generation, refinement, and evaluation. Also, ML has been used to evaluate test oracle construction and to predict the cost of testing-related activities. The results of this paper outline the ML algorithms that are most commonly used to automate software-testing activities, helping researchers to understand the current state of research concerning ML applied to software testing. We also found that there is a need for better empirical studies examining how ML algorithms have been used to automate software-testing activities.}
}

@article{rayyan-727967999,
  title={Software project management approaches for global software development: a systematic mapping study},
  year={2018},
  journal={Tsinghua Science and Technology},
  issn={1007-0214},
  volume={23},
  number={6},
  pages={690-714},
  author={El Bajta, Manal and Idri, Ali and Ros, Joaquín Nicolás and Fernández-Alemán, José Luis and de Gea, Juan Manuel and García, Félix and Toval, Ambrosio},
  keywords={Software, Software engineering, Systematics, Monitoring, Project management, Planning, Standards, Global Software Development (GSD), Software Project Management (SPM), SPM approaches, Systematic Mapping Study (SMS)},
  abstract={Global Software Development (GSD) is a well established field of software engineering with the benefits of a global environment. Software Project Management (SPM) plays a key role in the success of GSD. As a result, the need has arisen to study and evaluate the downsides of SPM for GSD, to thereby pave the way for the development of new methods, techniques, and tools with which to tackle them. This paper aims to identify and classify research on SPM approaches for GSD that are available in the literature, to identify their current weaknesses and strengths, and to analyze their applications in industry. We performed a Systematic Mapping Study (SMS) based on six classification criteria. Eighty-four papers were selected and analyzed. The results indicate that interest in SPM for GSD has been increasing since 2006. As a class of approaches, the most frequently reported methods (40%) are those used for coordination, planning, and monitoring, along with estimation techniques that can be used to better match a distributed project. SPM for GSD requires further investigation by researchers and practitioners, particularly with respect to cost and time estimations. These findings will help overcome the challenges that must to be considered in future SPM research for GSD, especially regarding collaboration and time-zone differences.}
}

@article{rayyan-727968011,
  title={What do we know about software product management? - a systematic mapping study},
  year={2011},
  pages={26-35},
  author={Maglyas, Andrey and Nikula, Uolevi and Smolander, Kari},
  keywords={Software, systematic literature review, Systematics, Project management, systematic mapping study, Databases, Context, Companies, cloud environment, services, software product management},
  abstract={Software product management (SPM) offers tools and practices for achieving business goals of a company as well as for increasing the predictability and profitability of software product development. Despite the importance of this topic, the studies of SPM have this far been fragmented. The goal of the present study is to summarize the existing knowledge in software product management and identify the areas which need further research. The paper reports the conduct and the results of a systematic mapping study which identified 25 studies on SPM. Still, most of the papers had only hypotheses and theories that were not empirically confirmed or the confirmation was based on a small set of cases. The existing knowledge of software product management consists of small and unconnected pieces. In addition to this, our specific interest, software product management in the cloud environment has not been studied at all. However, since both researchers and practitioners find research in SPM important, this area needs more research in the future.}
}

@article{rayyan-727968027,
  title={Usable results from the field of API usability: A systematic mapping and further analysis},
  year={2012},
  pages={179-182},
  author={Burns, Chris and Ferreira, Jennifer and Hellmann, Theodore D and Maurer, Frank},
  keywords={meta-analysis, systematic review, Software engineering, Systematics, Visualization, API usability, Usability, Conferences, Abstracts, systematic map, application programming interface},
  abstract={Modern software development often involves the use of complex, reusable components called Application Programming Interfaces (APIs). Developers use APIs to complete tasks they could not otherwise accomplish in a reasonable time. These components are now vital to mainstream software development. But as APIs have become more important, understanding how to make them more usable is becoming a significant research question. To assess the current state of research in the field, we conducted a systematic mapping. A total of 28 papers were reviewed and categorized based on their research type and on the evaluation method employed by its authors. We extended the analysis of a subset of the papers we reviewed beyond the usual limits of a systematic map in order to more closely examine details of their evaluations - such as their structure and validity - and to summarize their recommendations. Based on these results, common problems in the field are discussed and future research directions are suggested.}
}

@article{rayyan-727968032,
  title={Systematic mapping study of dealing with error in software development effort estimation},
  year={2016},
  pages={140-147},
  author={Koutbi, Salma El and Idri, Ali and Abran, Alain},
  keywords={Software, Systematics, Quality assessment, systematic mapping study, Uncertainty, Databases, error, Estimation error, software development effort estimation, uncertainty},
  abstract={Over the last decades, the software engineering community has investigated new techniques for software development effort estimation. Unfortunately, the estimates were not always accurate. Error approaches are then, aninteresting track for improving the projects running performances and their financial profitability. The aim of this systematic mapping study is to summarize and synthesize theexisting studies dealing with effort estimation error and uncertainty and to classify them based on research approaches, contribution types, accuracy criteria, datasets, error approaches and effort estimation techniques used. In total 19papers published between 1990 and 2015 were selected. We observed a balance between the managerial approaches and the technical ones. Furthermore, the proposed errortechniques and frameworks improve in general the accuracy ofeffort estimation techniques. Fuzzy logic, bootstrapping andrisk analysis are promising avenues that could be combined with various estimation techniques.}
}

@article{rayyan-727968034,
  title={Energy management software systems based on ISO 50001 standard: A preliminary systematic mapping study},
  year={2017},
  pages={1-7},
  author={Castro, John W and Fonseca, C Efraín R and Meléndez, M Pablo},
  keywords={software engineering, Systematics, systematic mapping study, Software systems, Standards organizations, ISO Standards, Energy management, energy management systems, ISO 50001, Software},
  abstract={The United Nations Organization for Industrial Development requested the International Organization for Standardization the development of an international standard for energy management, within the framework of the industries' needs to have an effective response to climate changes. As a result, the ISO 50001 standard was published in 2011. This standard specifies the guidelines for the implementation of Energy Management Systems in companies, through a continuous cycle of improvements. Due to the standard's recentness, it is necessary to determine the software systems and its application that could support the industry to facilitate the standard's application. This work aims to know the current software systems development trend regarding the use of ISO 50001 standard. We perform a preliminary Systematic Mapping Study (SMS), as a research method, in order to establish the state of the art about the incorporation of ISO 50001 standard into software systems for energy management. 8 primary studies were found as a result of this research, which were categorized into two groups: studies who describe a methodology to apply the standard, and studies who propose a software system for implement the standard. There are few studies reporting software systems for energy management based on ISO 50001 standard; hence, we believe that it is necessary to make a greater effort for the research and development of this area.}
}

@article{rayyan-727968036,
  title={Adopting software product lines: A systematic mapping study},
  year={2011},
  pages={11-20},
  author={Bastos, Jonatas Ferreira and da Mota Silveira Neto, Paulo Anselmo and de Almeida, Eduardo Santana and de Lemos Meira, Silvio Romero},
  keywords={Software},
  abstract={Context: The benefits of taking a product line approach in order to achieve significant reductions in cost and time to market and, at the same time, increasing the quality has encouraged product line adoption. Objective: In this context, this study focuses on some SPL adoption aspects and has the following goals: investigate state-of-the-art SPL adoption, synthesize available evidence, and identify gaps between required strategies, organizational structures, maturity level and existing adoption barriers, available in the literature. Method: A systematic mapping study was undertaken to analyze the important aspects that should be considered when adopting SPL approaches. A set of four questions were defined in which 34 primary studies were evaluated. Results: A total of 34 primary studies were considered. They reported four different strategies (Incremental, Big Bang, Tactical and Pilot project), however there is insufficient information about how such strategies link to factors as organizational structure and process maturity. By investigating all primary studies we found 23 barriers to adoption. Conclusions: Researchers need to consider the relationships between SPL adoption and factors such as company maturity and organization structure in more detail. There is also a need for patterns to assist in SPL adoption and overcoming SPL adoption barriers.}
}

@article{rayyan-727968042,
  title={A systematic mapping study on security in agile requirements engineering},
  year={2018},
  pages={454-461},
  author={Villamizar, Hugo and Kalinowski, Marcos and Viana, Marx and Fernández, Daniel Méndez},
  keywords={Software, Software engineering, Systematics, Requirements engineering, Security, systematic mapping study, Libraries, security, Proposals, requirements engineering, agile methods},
  abstract={[Background] The rapidly changing business environments in which many companies operate is challenging traditional Requirements Engineering (RE) approaches. This gave rise to agile approaches for RE. Security, at the same time, is an essential non-functional requirement that still tends to be difficult to address in agile development contexts. Given the fuzzy notion of "agile" in context of RE and the difficulties of appropriately handling security requirements, the overall understanding of how to handle security requirements in agile RE is still vague. [Objective] Our goal is to characterize the publication landscape of approaches that handle security requirements in agile software projects. [Method] We conducted a systematic mapping to outline relevant work and contemporary gaps for future research. [Results] In total, we identified 21 studies that met our inclusion criteria, dated from 2005 to 2017. We found that the approaches typically involve modifying agile methods, introducing new artifacts (e.g., extending the concept of user story to abuser story), or introducing guidelines to handle security issues. We also identified limitations of using these approaches related to environment, people, effort and resources. [Conclusion] Our analysis suggests that more effort needs to be invested into empirically evaluating the existing approaches and that there is an avenue for future research in the direction of mitigating the identified limitations.}
}

@article{rayyan-727968043,
  title={Partnership models for software ecosystems: A systematic mapping study},
  year={2019},
  pages={387-394},
  author={Belo, Ítalo and Alves, Carina},
  keywords={Software engineering, systematic mapping study, Three-dimensional displays, C# languages, partnership models, software ecosystem, Software},
  abstract={[Background] Partnership models enable the generation and sharing of value among stakeholders of software ecosystems. Large companies like SAP and Microsoft form partnerships with complementors to develop applications and service solutions for customers. Partnership models are important strategic tools to manage software ecosystems. Several partnership models have been proposed and discussed in the literature. So far, there is no comprehensive understanding of the key elements and goals of such models. [Objective] This paper aims to synthesize the research knowledge in partnership models for software ecosystems. [Method] We conducted a systematic mapping study to understand the goals of partnership models and discuss their benefits and application domains. [Results] We found 23 studies published between 2006 and 2018. Partnership models provide coordination mechanisms that structure the definition of benefits, roles and responsibilities of actors in an ecosystem. We identified the key goals of the proposed models are related to the creation and maintenance of partnerships. [Conclusion] We observed the opportunity to develop partnership models focusing on the co-creation of value and the definition of business models. Our analysis also suggests the need for further studies in the context of open source ecosystems.}
}

@article{rayyan-727968044,
  title={Quality and success in open source software: A systematic mapping},
  year={2019},
  pages={363-370},
  author={Gezici, Bahar and Özdemir, Nurseda and Yılmaz, Nebi and Coşkun, Evren and Tarhan, Ayça and Chouseinoglou, Oumout},
  keywords={Software, Software engineering, Systematics, Bibliographies, Data mining, systematic mapping, Measurement, OSS, software, Organizations, open source, success, quality, software metrics},
  abstract={As the number of available Open Source Software (OSS) and the interest they attract are increasing, numerous product attributes are provided to developers and users for evaluating the quality and success of an OSS. Accordingly, various articles in the literature assess the quality and success of OSS, by using different quality attributes and metrics and different approaches. Though this variety can be considered as a positive indicator of research interest and maturation on one side, it creates a kind of jungle in defining and understanding the terms 'quality' and 'success' on the other side. Based on this challenge, in this study, we targeted a systematic mapping (SM) of the articles on quality and success of OSS. More than 474 articles have appeared in this area between the years 2002 and 2017, and the final pool of 128 articles is obtained by defining and applying inclusion and exclusion criteria. SM was employed to develop a classification scheme and categorized the existing body of articles with respect to five research questions (RQs) on: contribution and research types, quality criteria and metrics, success criteria and metrics, the relation of quality and success, and demographics. We observed that the majority of the articles assess the concept of quality as 'code quality', whereas the concept of success is mostly perceived as 'market success' and/or 'developer activity'. Moreover, the metrics of 'contributing developers/users', and the quality attribute of 'functionality' are the quality criteria most employed in the assessment of success.}
}

@article{rayyan-727968049,
  title={Awareness, collaboration and comunication's tools for distributed software development: A systematic mapping},
  year={2016},
  pages={1-8},
  author={Damato, Marco Aurélio Panizza and L'Erario, Alexandre and Fabri, José Augusto},
  keywords={Software, Software engineering, Collaboration, Tools, Project management, Distributed Software Development, Context, Communication, Libraries, IEEE Xplore, Awareness, DSD},
  abstract={Context: Increased competitiveness in the market, coupled with other factors such as the lack of skilled labor and cost reduction, makes the distributed software development a common practice in nowadays. Aims: With the complex scenario involving DSD environment (distributed software development), we aim to research tools to supporting this challenging environment. Method: We use a systematic mapping, in order to select primary studies and later refine the search, in order to show solutions and tools that support this scenario. Result: As a result, we found 20 tools divided into areas, which greatly facilitated the understanding and study, it will substantially succeed in DSD environments. Conclusion: We conclude that there are several tools for DSD scenario, and that are of high relevance in supporting collective awareness, collaboration, knowledge and communication.}
}

@article{rayyan-727968060,
  title={A systematic mapping study for intelligent user interfaces - IUI},
  year={2017},
  pages={361-368},
  author={Sanchez, Cristina and Cedillo, Priscila and Bermeo, Alexandra},
  keywords={Software, Systematics, Ambient assisted living, Libraries, Conferences, User interfaces, Ambient Assisted Living, Systematic Mapping, Adaptive User Interface, Human – Computer Interaction, Intelligent User Interface, Intelligence},
  abstract={Intelligent User Interfaces (IUI) facilitate human-machine interaction, through which the user makes use of a general system in a more efficient way. These interfaces are helpful for different types of users, specifically for people with disabilities, seniors, among others. These interfaces belong to a type of intelligent systems that are capable of self-adapt to users with different health problems, this is possible through the determination of behavior characteristics that distinguishes each user from another. In this paper, a systematic mapping of the Intelligent User Interfaces is presented, which allow developers to determine which applications are adopting those interfaces with emphasis on Ambient Assisted Living (AAL) technologies. The Kitchenham's methodology has been applied in order to perform this secondary study, after the execution of the review, a total of 43 primary studies was selected and classified, thus allowing us to obtain the results presented in this contribution.}
}

@article{rayyan-727968061,
  title={Aspect-oriented software maintenance metrics: A systematic mapping study},
  year={2012},
  pages={253-262},
  author={Saraiva, Juliana and Barreiros, Emanoel and Almeida, Adauto and Lima, Flávio and Alencar, Aline and Lima, Gustavo and Soares, Sergio and Castor, Fernando},
  keywords={Metronidazole, Software},
  abstract={Background: Despite the number of empirical studies that assess Aspect-Oriented Software Development (AOSD) techniques, more research is required to investigate, for example, how software maintainability is impacted when these techniques are employed. One way to minimize the effort and increase the reliability of results in further research is to systematize empirical studies in Aspect-Oriented Software Maintainability (AOSM). In this context, metrics are useful as indicators to quantify software quality attributes, such as maintenance. Currently, a high number of metrics have been used throughout the literature to measure software maintainability. However, there is no comprehensive catalogue showing which metrics can be used to measure AOSM. Aim: To identify an AOSM metrics suite to be used by researchers in AOSM research. Method: We performed a systematic mapping study based on Kitchenham and Charters' guidelines, which derived a research protocol, and used well known digital libraries engines to search the literature. Conclusions: A total of 138 primary studies were selected. They describe 67 aspect-oriented (AO) maintainability metrics. Also, out of the 575 object-oriented maintainability metrics that we analyzed, 469 can be adapted to AO software. This catalogue provides an objective guide to researchers looking for maintainability metrics to be used as indicators in their quantitative and qualitative assessments. We provide information such as authors, metrics description, and studies that used the metric. Researchers can use this information to decide which metrics are more suited for their studies.}
}

@article{rayyan-727968062,
  title={A systematic mapping study on architectural analysis},
  year={2013},
  pages={661-664},
  author={Catal, Cagatay and Atalay, Muratcan},
  keywords={Software, Evidence-based software engineering, Systematics, survey, ATAM, Software architecture, Inspection, Databases, literature review, Computer architecture, software architecture},
  abstract={We conduct a Systematic Mapping Study to categorize the primary research papers in architectural analysis. Systematic mapping studies can change the research perspective in an area and they can help to find the ignored researched areas. The objective of this study is to investigate the techniques used in papers on architectural analysis, identify the current trends, and provide suggestions for the future research studies. We search for papers published within the last ten years in the following databases: IEEE Explorer, ACM Digital Library, Science Direct, and Wiley. We conclude that more validation and evaluation research is needed to provide a better foundation for architectural analysis.}
}

@article{rayyan-727968079,
  title={On the dependability for dynamic software product lines: A comparative systematic mapping study},
  year={2016},
  pages={323-330},
  author={Dirce Alves Sandim Eleuterio, Jane and Gaia, Felipe Nunes and Bondavalli, Andrea and Lollini, Paolo and Rodrigues, Genaína Nunes and Fischer Rubira, Cecília Mary},
  keywords={Software, Software product lines, Systematics, systematic mapping study, Context, Reliability, Proposals, Runtime, dependability, dynamic software product line, dynamically adaptive systems},
  abstract={Software Product Lines (SPLs) are techniques where several artefacts are reused (domain), and some are customised (variation points). An SPL can bind variation points statically (compilation time) or dynamically (runtime). Dynamic Software Product Lines (DSPLs) use dynamic binding to adapt to the environment or requirements changes. DSPLs are commonly used to build dependable systems, defined as systems with the ability to avoid more frequent or severe service failures than the acceptable. The main dependability attributes are availability, confidentiality, integrity, reliability, maintainability, and safety. To better understand this context, a Systematic Mapping Study (SMS) was applied searching proposals that include dependability attributes in DSPLs. Our results suggest that few solutions handle dependability in DSPL context. We selected nine primary studies in this regard. We performed a comparative study of the results, analysing other dimensions, and facets, aiming for a better understanding of this research area.}
}

@article{rayyan-727968084,
  title={A systematic mapping study on test generation from Input/Output transition systems},
  year={2015},
  pages={333-340},
  author={Da Costa Paiva, Sofia Larissa and Da Silva Simao, Adenilso},
  keywords={Systematics, Data mining, Testing, systematic mapping study, Taxonomy, Protocols, Data models, test generation, Inference algorithms, Input/Output Transition Systems},
  abstract={Context: The construction of complex systems has increased the adoption of technologies that aim at automating the testing activity. Model-Based Testing (MBT) has emerged as an approach to automate the generation of high-quality test suites from behavioural models. Input/Output Transition Systems(IOTSs) have been used in MBT because they are more expressive than other formalisms. Objective: This paper focuses on methods for test generation from IOTSs, aiming at synthesizing available knowledge and identifying gaps in the existing approaches. Method: A systematic mapping was conducted, in which 84 studies were evaluated and categorized in the taxonomy of MBT approaches. Results: The results indicate most of the reported approaches apply non-deterministic algorithms to test generation which do not employ measures of coverage or quality. This scenario underscores the importance of further research into this topic. Conclusion: The evidences indicate that the generation of complete test suites is guaranteed in theory without satisfying a certain test selection criterion. This result points out the need of additional investigation in this topic.}
}

@article{rayyan-727968085,
  title={Functional safety in product lines – a systematic mapping study},
  year={2016},
  pages={313-322},
  author={Baumgart, Stephan and Fröberg, Joakim},
  keywords={Software, Systematics, Safety, Systematic Mapping Study, Databases, Context, Standards, Focusing, Functional Safety, Product Line Engineering},
  abstract={Software product line engineering is a widely used approach to plan and manage reuse of software. When safety critical products are developed, achieving functional safety standard compliance must be shown. The requirements stated in the functional safety standards also apply when safety critical products are developed in product lines. Managing functional safety in industrial product lines is challenging and work around solutions are applied in practice. The objective of this research is to collect and review reported research publications focusing on achieving safety in product lines and to identify gaps in todays research. We conduct a systematic mapping study of research publications reported until January 2016. We identify 39 research articles to be included in a list of primary studies and analyze how product lines are documented, which safety-related topics are covered and which evaluation method the studies apply. Generally, we find that the area of how to achieve functional safety in product lines needs more attention. Our study provides an overview on which topics have been discussed until now and which safety-related topics need more attention.}
}

@article{rayyan-727968086,
  title={A mapping study on requirements engineering in agile software development},
  year={2015},
  pages={199-207},
  author={Heikkilä, Ville T and Damian, Daniela and Lassenius, Casper and Paasivaara, Maria},
  keywords={mapping study, Bibliographies, Requirements engineering, Agile software development, Context, Usability, requirements engineering, Documentation, scrum, agile development, Software},
  abstract={Agile software development (ASD) methods have gained popularity in the industry and been the subject of an increasing amount of academic research. Although requirements engineering (RE) in ASD has been studied, the overall understanding of RE in ASD as a phenomenon is still weak. We conducted a mapping study of RE in ASD to review the scientific literature. 28 articles on the topic were identified and analyzed. The results indicate that the definition of agile RE is vague. The proposed benefits from agile RE included lower process overheads, a better requirements understanding, a reduced tendency to over allocate development resources, responsiveness to change, rapid delivery of value, and improved customer relationships. The problematic areas of agile RE were the use of customer representatives, the user story requirements format, the prioritization of requirements, growing technical debt, tacit requirements knowledge, and imprecise effort estimation. We also report proposed solutions to the identified problems.}
}

@article{rayyan-727968088,
  title={Business process management in digital and software ecosystems: A systematic mapping study},
  year={2020},
  pages={226-233},
  author={Afonso, Anderson Tavares Queiroz and Chueri, Luciana Vilanova and dos Santos, Rodrigo Pereira},
  keywords={Software, Ecosystems, Software architecture, Systematic Mapping Study, Business process management, Conferences, Process control, Business Process Management, Digital Ecosystem, Software Ecosystem},
  abstract={Modern companies need to revisit and constantly improve their business practices in order to remain profitable in the light of the global competition. Digital Ecosystems (DE) have emerged as an innovative approach to business because they transcend traditional collaborative environments towards an interactive digital environment with the intensive participation of diverse external actors. However, adjusting the existing business processes to the digital environment is not simple, especially taking into account the culture of the DE actors and the characteristics of such environment. The same issue applies when the ecosystem is focused on software development as investigated in a Software Ecosystem (SECO). In this context, this study aims to understand how the management of traditional business processes can be applied into DE or SECO management. To this end, a systematic mapping study regarding business process management in DE and SECO is presented. This study is important since it helps researchers and practitioners to understand how these processes can provide inputs for modeling relationships among the DE actors, besides providing support to ecosystem managers. The study confirms that the use of business process management techniques or methods as a support for DE or SECO managers or developers is an emergent field.}
}

@article{rayyan-727968090,
  title={Decision trees based software development effort estimation: A systematic mapping study},
  year={2019},
  pages={1-6},
  author={Najm, Assia and Zakrani, Abdelali and Marzak, Abdelaziz},
  keywords={Software, Systematics, Data mining, Estimation, Systematic Mapping Study, Libraries, Market research, Decision Tree, Decision trees, Regression Tree, Software Development Effort Estimation, Decision Trees, Trees},
  abstract={The decision tree (DT) represents a nonparametric estimation method that has been mostly used for both classification and regression problems. DTs were adopted for software development effort estimation (SDEE) generally for their simplicity of use and interpretation contrary to other learning methods. Nevertheless, to our self-knowledge, no systematic mapping has been devoted especially to decision trees. The aim of this study is to elaborate a systematic mapping study that classifies DTs papers in conformity with the succeeding criteria: research approach, contribution type, techniques employed in combination with DT methods besides identifying publication channels and trends. An automated search of five digital libraries was made to carry out a systematic mapping of DT studies mainly devoted to SDEE that were published in the period 1985-2017. We identify 46 relevant studies. Basically, the results revealed that most researchers focus on technique contribution type. In addition, the majority of papers deal with improving the existing DT models while few studies have proposed novel models to improve the reliability of SDEE. Furthermore, solution proposal and case study are the most frequently used approaches.}
}

@article{rayyan-727968091,
  title={Software developers sentiment analysis: A systematic mapping},
  year={2018},
  pages={60-69},
  author={Coelho, André A N and Silva, Thalita T O and Oliveira, Alessandreia M and David, José Maria N},
  keywords={Software, Systematics, Tools, Software Development, Software algorithms, Delays, Emotion Analysis, Sentiment analysis, Sentiment Analysis, Tagging},
  abstract={Sentiment Analysis is a research area that has been also focused on software developers in the latest years. However, there is a need to map the way in which this area is structured. The goal of this article is to answer research questions through a systematic mapping in order to be aware of the existing works in this area. As a result, a growth curve related to the number of publications has been perceived as well as the association between the emotional condition of a developer and his/her performance in software projects.}
}

@article{rayyan-727968092,
  title={Spreadsheet smells: A systematic mapping study},
  year={2019},
  pages={345-3455},
  author={Azam, Awais and Alam, Khubaib Amjad and Umair, Areeba},
  keywords={Software Engineering, Systematic Mapping, Spreadsheet Programming, Spreadsheet Smells, Spreadsheets, Smell},
  abstract={Spreadsheets provide a very flexible programming environment and are used by almost every organization, company, institution or business for data processing and data storage tasks. The main objectives of this research are: (1) to have an overview of the research that is being done related to spreadsheet smells; (2) to classify the spreadsheet smells research according to ten criteria: techniques, year of publication, publication venues, publication channels, datasets, countries, contribution type, research approaches, tools used, tools/techniques proposed; and (3) analyze studies from different perspectives like study objectives, methods, method accuracy and limitations. We performed a systematic mapping on the spreadsheet smells studies published in the time span of 2010-2019, and adopted proper methods to classify, review and analyze them. In total, we were able to identify 28 studies and map the results of these studies.}
}

@article{rayyan-727968094,
  title={A systematic mapping study on dynamic metrics and software quality},
  year={2012},
  pages={326-335},
  author={Tahir, Amjed and MacDonell, Stephen G},
  keywords={Software, mapping study, Manuals, Software metrics, software quality, Conferences, Performance analysis, software metrics, dynamic analysis, dynamic metrics, Metronidazole},
  abstract={Several important aspects of software product quality can be evaluated using dynamic metrics that effectively capture and reflect the software's true runtime behavior. While the extent of research in this field is still relatively limited, particularly when compared to research on static metrics, the field is growing, given the inherent advantages of dynamic metrics. The aim of this work is to systematically investigate the body of research on dynamic software metrics to identify issues associated with their selection, design and implementation. Mapping studies are being increasingly used in software engineering to characterize an emerging body of research and to identify gaps in the field under investigation. In this study we identified and evaluated 60 works based on a set of defined selection criteria. These studies were further classified and analyzed to identify their relativity to future dynamic metrics research. The classification was based on three different facets: research focus, research type and contribution type. We found a strong body of research related to dynamic coupling and cohesion metrics, with most works also addressing the abstract notion of software complexity. Specific opportunities for future work relate to a much broader range of quality dimensions.}
}

@article{rayyan-727968096,
  title={Handling of categorical data in software development effort estimation: A systematic mapping study},
  year={2019},
  pages={763-770},
  author={Amazal, Fatima Azzahra and Idri, Ali},
  keywords={Software, Software engineering, Systematics, Data mining, Computer science, Conferences, Market research},
  abstract={Producing reliable and accurate estimates of software effort remains a difficult task in software project management, especially at the early stages of the software life cycle where the information available is more categorical than numerical. In this paper, we conducted a systematic mapping study of papers dealing with categorical data in software development effort estimation. In total, 27 papers were identified from 1997 to January 2019. The selected studies were analyzed and classified according to eight criteria: publication channels, year of publication, research approach, contribution type, SDEE technique, Technique used to handle categorical data, types of categorical data and datasets used. The results showed that most of the selected papers investigate the use of both nominal and ordinal data. Furthermore, Euclidean distance, fuzzy logic, and fuzzy clustering techniques were the most used techniques to handle categorical data using analogy. Using regression, most papers employed ANOVA and combination of categories.}
}

@article{rayyan-727968119,
  title={Heuristic optimization for the resource constrained Project Scheduling Problem: A systematic mapping},
  year={2016},
  pages={619-626},
  author={Ciupe, Aurelia and Meza, Serban and Orza, Bogdan},
  keywords={Systematics, Guidelines, Optimization, Databases, Filtering, Heuristic algorithms, Job shop scheduling},
  abstract={Context: Heuristic optimization has been of strong focus in the recent modeling of the Resource Constrained Project Scheduling Problem (RCPSP), but lack of evidence exists in systematic assessments. New solution methods arise from random evaluation of existing studies. Objective: The current work conducts a secondary study, aiming to systemize existing primary studies in heuristic optimization techniques applied to solving classes of RCPSPs. Method: The systemizing framework consists of performing a systematic mapping study (SM), following a 3-steped protocol. Results: 371 primary studies have been depicted from the multi-stage search and filtering process, to which inclusion and exclusion criteria have been applied. Results have been visually mapped in several distributions. Conclusions: Specific RCPSP classes have been grounded and therefore a rigorous classification is required before performing a systematic mapping. Focusing on recent developments of the RCPSP (2010-2015, a strong interest has been acknowledged on solution methods incorporating AI techniques in meta- and hyper-heuristic algorithms.}
}

@article{rayyan-727968120,
  title={Blockchain application for central banks: A systematic mapping study},
  year={2020},
  journal={IEEE Access},
  issn={2169-3536},
  volume={8},
  pages={139918-139952},
  author={Dashkevich, Natalia and Counsell, Steve and Destefanis, Giuseppe},
  keywords={mapping study, Systematics, literature review, challenges, Law, blockchain, assets ownership, Assets transfer, audit trail, CBDC, central bank, central bank digital currency, distributed ledger technology, DLT, financial regulation, opportunities, payment clearing and settlement, PCS, regulatory compliance, research maturity, research trend, use-case},
  abstract={Blockchain is a novel technology capturing the attention of Central Banks and a technology with significant disruptive potential. However, a gap in research effort between practitioners and academics seems to have emerged. This paper analyses and maps that gap by exploring trends in peer-reviewed research contributions through thematic categorisation of academic literature on Distributed Ledger Technology (DLT) use-cases for services, operations and functions performed by central banks. Furthermore, this paper provides summaries of opportunities and challenges for central banks arising from blockchain adaptation to each of those use-cases. To achieve this goal, we utilise a Systematic Mapping Study approach. The paper presents an in-depth assessment of statistical and thematic analysis of research maturity and the types of researchers, with specific emphasis on types of central bank use-cases considered for blockchain adaptation. Our work contributes to an understanding of where the most or least attention is directed, allowing for identification of gaps and opportunities for both academics, practitioners and combinations of each. Results show that the research topic is a comparatively new domain. It confirms the gap between depth and volume of the research provision from industry and academia, with industry leading the trend. Our study also found that the most research-intensive use-cases are those for: 1) Central Bank issued Digital Currency (CBDC), 2) Regulatory Compliance and 3) Payment Clearing and Settlement Systems (PCS) operated by central banks; a comparatively low engagement was found in the areas of 4) Assets Transfer/Ownership and 5) Audit Trail.}
}

@article{rayyan-727968121,
  title={Using GORE in big data: A systematic mapping study},
  year={2019},
  journal={IEEE Latin America Transactions},
  issn={1548-0992},
  volume={17},
  number={3},
  pages={493-504},
  author={Cravero, Ania and Sepúlveda, Samuel},
  keywords={Software, Systematics, systematic mapping, Big Data, Business, Adaptation models, IEEE transactions, Data models, requirements, goal-oriented, GORE},
  abstract={Big Data has developed rapidly into a hot topic that generates great attention in academia, industry and governments around the world because of its ability to process large volumes of data at a reasonable speed. The real value of Big Data lies in the help to business decision making, so it requires appropriate methods and techniques to find the requirements of the system to be developed. However, the Big Data community has focused mainly on technologies to obtain information, and not on the goal of the business. The objective of this paper is to offer an overview of how some Goal Oriented Requirements Engineering (GORE) proposals are used to obtain the requirements of the Big Data system, serving as a starting point for future research. The methodology used is the Systematic Mapping. The goal models identified it is used as conceptual models for different situations: understanding the nature of business and analyzing the technical aspects for purposes of functional and non-functional requirements of Big Data system.}
}

@article{rayyan-727968134,
  title={A systematic mapping study of the empirical MOOC literature},
  year={2019},
  journal={IEEE Access},
  issn={2169-3536},
  volume={7},
  pages={124809-124827},
  author={Rasheed, Rasheed Abubakar and Kamsin, Amirrudin and Abdullah, Nor Aniza and Zakari, Abubakar and Haruna, Khalid},
  keywords={Systematics, systematic mapping study, Computer science, Information technology, Market research, Focusing, Electronic learning, MOOC, distance education, E-learning, massive open online course},
  abstract={Massive open online courses (MOOCs) have revolutionized todays education by offering a global accessible form of online learning. Over the years, MOOCs have been an attractive research area and have yielded an ample amount of research publications. However, the existing review studies in MOOCs are characterized by short year coverage or focusing on a specific theme. As such, a systematic mapping methodology was adopted to provide a fine-grain overview of MOOC research domain by identifying the quantity, types of research, available results and publication trends in educational aspects of MOOCs from 2009 to 2018. Key findings show that I) MOOC research have been on the rise since MOOCs became mainstream in 2011. II) MOOC research largely resides in the United States and few European countries. II) Most of MOOC studies focused on addressing learners' completion/dropout/retention. In addition, we proposed some recommendations for future research on MOOCs.}
}

@article{rayyan-727968141,
  title={A systematic mapping study on the verification of cyber-physical systems},
  year={2018},
  journal={IEEE Access},
  issn={2169-3536},
  volume={6},
  pages={59043-59064},
  author={Duan, Pengfei and Zhou, Ying and Gong, Xufang and Li, Bixin},
  keywords={Systematic mapping study, Systematics, Guidelines, Tools, Cyber-physical systems, Databases, Statistics, Sociology, abstraction methods, assistance tools, verification challenges, verification of cyber-physical system, verification scenarios, verification techniques},
  abstract={Cyber-physical system (CPS) is a kind of complex real-time hybrid system which involves deep interactions between computation processors, communication network, and physical environments are deemed as the key enablers of next generation computer applications. However, how to verify CPS effectively is always a great challenge. Based on current scientific works about CPS verification, this paper aims at identifying the gap of current studies and suggesting promising areas for the future works. For this purpose, we conduct a systematic mapping study over the topic on verification of cyber-physical system. We carry out a widely search of publications from 2006 to 2018 in 11 electronic databases. After the step of study selection, 80 papers are selected as primary studies for answering proposed research questions, focused questions, and statistical questions. According to these questions and their answers, this paper not only presents a quantitative and comprehensive analysis of verification challenges, abstraction methods, verification techniques, assistance tools, and verification scenarios that represent each step of verification works, but also summarizes CPS systematic natures, main routine of verification and future research directions. We believe that this survey can identify gaps in current research works and reveal new insights for the future works.}
}

@article{rayyan-727968143,
  title={Parallel programming in computing undergraduate courses: a systematic mapping of the literature},
  year={2019},
  journal={IEEE Latin America Transactions},
  issn={1548-0992},
  volume={17},
  number={8},
  pages={1371-1381},
  author={Lara Soares, Felipe Augusto and Neri Nobre, Cristiane and de Freitas, Henrique},
  keywords={Learning, IEEE transactions, Parallel programming, Computer aided instruction, Distributed Computing, Instruction sets, Parallel processing, Parallel Programming, Teaching, Undergraduate, Software},
  abstract={Due to the current scenario in which multi-core architectures are predominant in most personal computers and servers, the knowledge of parallel programming content becomes fundamental for computer students to develop software capable of obtaining the best performance of these architectures. Considering the importance of this context, this paper presents the results of a systematic mapping of the literature related to the teaching-learning process of parallel programming in the computing programmes in three important databases: ACM, IEEE and Science Direct. The results obtained showed that in order to solve the challenges and differences found in teaching-learning parallel programming, reorganization is necessary in the undergraduate programmes. A standard for parallel programming teaching is important. This can be established by defining where and how to insert parallelism in the courses, adopting a methodology to teach the contents of parallelism in several different courses, beginning the study in the first year. The main languages, libraries, difficulties encountered and methods of classroom and distance teaching for parallel programming are presented in this paper. Distance learning is still little explored in this area of knowledge, but it can support the teaching and study of these contents.}
}

@article{rayyan-727968151,
  title={A systematic mapping study of quality assessment models for software products},
  year={2017},
  pages={63-71},
  author={Yan, Meng and Xia, Xin and Zhang, Xiaohong and Xu, Ling and Yang, Dan},
  keywords={Systematic mapping study, Measurement, Software quality, Databases, Predictive models, Q-factor, Quadrature amplitude modulation, Quality assessment model, Software},
  abstract={Quality model is regarded as a well-accepted approach for assessing, managing and improving software product quality. There are three categories of quality models for software products, i.e., definition model, assessment model, and prediction model. Quality assessment model (QAM) is a metric-based approach to assess the software quality. It is typically regarded as of high importance for its clear method on how to assess a system. However, the current state-of-the-art in QAM research is under limited investigation. To address this gap, the paper provides an organized and synthesized summary of the current QAMs. In detail, we conduct a systematic mapping study (SMS) for structuring the relevant articles. We obtain a total of 716 papers from the five databases, and 31 papers are selected as relevant studies at last. In summary, our work focuses on QAMs from the following aspects: software metrics, quality factors, evaluation methods and tool support.}
}

@article{rayyan-727968153,
  title={Maker in electrical engineering education based on emergent technology: Mapping study},
  year={2019},
  journal={IEEE Revista Iberoamericana de Tecnologias del Aprendizaje},
  issn={1932-8540},
  volume={14},
  number={4},
  pages={135-144},
  author={Martinez-Lopez, Ruth},
  keywords={technology, reviews, Computer aided instruction, Educational courses, educational technology, Electrical engineering, Electrical engineering computing, Electrical engineering education},
  abstract={“Hands-on activities” with emergent technology is being integrated into the curriculum of Electrical Engineering education. This mapping study carry out an overview of the evidence of the Making movement using emergent technology in Electrical Engineering education. Primary studies in the literature were selected, classified and analysed according to the type of technology used and, the design-based research (DBR) intervention. 20 primary studies were identified. Making related to activities with Robotics is the application most used at the undergraduate level. The most of the studies reported an intervention focused on the instructional approach of the curriculum unit and, that students improved motivation.}
}

@article{rayyan-727968155,
  title={Agile testing: A systematic mapping across three conferences: Understanding agile testing in the XP/Agile universe, agile, and XP conferences},
  year={2013},
  pages={32-41},
  author={Hellmann, Theodore D and Chokshi, Apoorve and Abad, Zahra Shakeri Hossein and Pratte, Sydney and Maurer, Frank},
  keywords={Software, Systematics, systematic mapping, Testing, Context, software testing, empirical, agile software development, Abstracts, Graphical user interfaces, Electric breakdown, test-driven development, testing tools},
  abstract={Unit and acceptance testing are central to agile software development, but is that all there is to agile testing? We build on previous work to provide a systematic mapping of agile testing publications at major agile conferences. The analysis presented in this paper allows us to answer research questions like: what is agile testing used for, what types of studies on agile testing have been published, what problems do people have when performing agile testing, and what benefits do these publications offer? We additionally explore topics such as: who are the major authors in this field, in which countries do these authors work, what tools are mentioned, and is the field driven by academics, practitioners, or collaborations? This paper presents our analysis of these topics in order to better structure future work in the field of agile testing and to provide a better understanding of what this field actually entails.}
}

@article{rayyan-727968159,
  title={Usability evaluation in Brazil: A systematic mapping},
  year={2014},
  pages={1-7},
  author={Francisco, Lourival and Benitti, Fabiane Barreto Vavassori},
  keywords={Systematics, Guidelines, systematic mapping, Testing, Usability, Google, usability, TV, Brazil},
  abstract={This paper examines the Brazilian research on techniques for usability evaluation with regard to the scope of use. Through a systematic mapping this study identified 116 studies that reported empirical evidence on the different technical and evaluations in different environments. Results indicate that the empirical technique is the most used and the web environment was chosen by 60% of the studies. This study noted that assessments of an educational product are the most applied ones (33 studies). In addition to mapping research in the area, this study also contributes to point out areas for further research.}
}

@article{rayyan-727968165,
  title={Interactive data exploration of distributed raw files: A systematic mapping study},
  year={2019},
  journal={IEEE Access},
  issn={2169-3536},
  volume={7},
  pages={10691-10717},
  author={Alvarez-Ayllon, Alejandro and Palomo-Duarte, Manuel and Dodero, Juan-Manuel},
  keywords={Systematics, Data mining, systematic mapping study, Time factors, Indexing, Distributed databases, Big data applications, data analysis, data engineering, data exploration, Data structures, database systems, interactive systems},
  abstract={When exploring big amounts of data without a clear target, providing an interactive experience becomes really difficult, since this tentative inspection usually defeats any early decision on data structures or indexing strategies. This is also true in the physics domain, specifically in high-energy physics, where the huge volume of data generated by the detectors are normally explored via C++ code using batch processing, which introduces a considerable latency. An interactive tool, when integrated into the existing data management systems, can add a great value to the usability of these platforms. Here, we intend to review the current state-of-the-art of interactive data exploration, aiming at satisfying three requirements: access to raw data files, stored in a distributed environment, and with a reasonably low latency. This paper follows the guidelines for systematic mapping studies, which is well suited for gathering and classifying available studies. We summarize the results after classifying the 242 papers that passed our inclusion criteria. While there are many proposed solutions that tackle the problem in different manners, there is little evidence available about their implementation in practice. Almost all of the solutions found by this paper cover a subset of our requirements, with only one partially satisfying the three. The solutions for data exploration abound. It is an active research area and, considering the continuous growth of data volume and variety, is only to become harder. There is a niche for research on a solution that covers our requirements, and the required building blocks are there.}
}

@article{rayyan-727968170,
  title={Artificial intelligence for cybersecurity: A systematic mapping of literature},
  year={2020},
  journal={IEEE Access},
  issn={2169-3536},
  volume={8},
  pages={146598-146612},
  author={Wiafe, Isaac and Koranteng, Felix Nti and Obeng, Emmanuel Nyarko and Assyne, Nana and Wiafe, Abigail and Gulliver, Stephen R},
  keywords={machine learning, systematic reviews, Systematics, Machine learning, Protocols, Computer crime, Artificial intelligence and cybersecurity, information security, Intelligence},
  abstract={Due to the ever-increasing complexities in cybercrimes, there is the need for cybersecurity methods to be more robust and intelligent. This will make defense mechanisms to be capable of making real-time decisions that can effectively respond to sophisticated attacks. To support this, both researchers and practitioners need to be familiar with current methods of ensuring cybersecurity (CyberSec). In particular, the use of artificial intelligence for combating cybercrimes. However, there is lack of summaries on artificial intelligent methods for combating cybercrimes. To address this knowledge gap, this study sampled 131 articles from two main scholarly databases (ACM digital library and IEEE Xplore). Using a systematic mapping, the articles were analyzed using quantitative and qualitative methods. It was observed that artificial intelligent methods have made remarkable contributions to combating cybercrimes with significant improvement in intrusion detection systems. It was also observed that there is a reduction in computational complexity, model training times and false alarms. However, there is a significant skewness within the domain. Most studies have focused on intrusion detection and prevention systems, and the most dominant technique used was support vector machines. The findings also revealed that majority of the studies were published in two journal outlets. It is therefore suggested that to enhance research in artificial intelligence for CyberSec, researchers need to adopt newer techniques and also publish in other related outlets.}
}

@article{rayyan-727968176,
  title={A systematic mapping study of usability vs security},
  year={2018},
  pages={1-6},
  author={MERDANOĞLU, Nur and ONAY DURDU, Pınar},
  keywords={Systematic mapping study, Systematics, Usability, Software systems, security, usability, Market research, Authentication, Control engineering, usable security},
  abstract={Usability and security are two of the inevitable but conflicting quality factors in today's multi-user modern computing environment. Although usability is considered to be an essential component of a secure system, not many studies focused on these two factors together. This study aimed to determine the general trends regarding the usability and security issues. Therefore, a systematic mapping approach was applied with the articles published on these two issues together between years 2006 and 2016 to reveal the research trends in this research area. 179 papers, which were indexed in web of science, were included for the mapping. The results revealed that many researches dealt with usability and security issues. They reported problems of efficiency and learnability from usability perspective and authentication from security perspective. They mainly adopt usability evaluation methods rather than any specific usability-security specific method and a few proposed recommendations or a method for design or improvement of usable security.}
}

@article{rayyan-727968182,
  title={Built-in testing in component-based software - a mapping study},
  year={2015},
  pages={159-168},
  author={Divya and Gill, Nasib S and Singh, Latika},
  keywords={Software, Data mining, Testing, Computational modeling, Maintenance engineering, Heuristic algorithms, Runtime, Built-in test, Component based software},
  abstract={Component-based software development (CBSD)has proved to be a highly useful way of developing software using re-usable components, especially within a short time frame. The biggest challenge faced during development (specially testing) of component-based software is that the source-code of components is not available. Due to this, the traditional testing techniques cannot be applied directly while testing the software. Amongst several techniques proposed to bridge this gap, built-in testing has emerged out to be a popular choice. Built-in tests are test-cases/testing functionalities that are added to a component that analyze the component within the software during development and runtime. It is increasingly being used to perform testing during development and maintenance of various kinds of component-based software. This paper aims to identify the state-of-the-art research on built-in testing in component-based software. A mapping study has been performed employing searches in journals, conference proceedings, and electronic databases. A total of 26 studies have been reviewed in order to extract relevant information regarding a previously defined set of research questions. Although only 26 studies have addressed the use of built-in tests in component-based software, this number can be considered significant due to the specific nature of the reviewed topic. The results of the present study have shown the limitations and help to set further guidelines.}
}

@article{rayyan-727968185,
  title={A systematic mapping on the role-permission relationship in role based access control models},
  year={2012},
  journal={IEEE Latin America Transactions},
  issn={1548-0992},
  volume={10},
  number={1},
  pages={1243-1250},
  author={Ueda, Eduardo Takeo and Ruggiero, Wilson Vicente},
  keywords={Systematics, Data mining, Context modeling, Libraries, Computational modeling, Adaptation models, Access control, RBAC, Role Based Access Control, Role-Permission Relationship},
  abstract={Access control is a key component of security in any computer system. In the last two decades, the research on Role Based Access Control Models was intense. One of the most important components of a Role Based Model is the Role-Permission Relationship. In this paper, the technique of systematic mapping is used to identify, extract and analyze many approaches applied to establish the Role-Permission Relationship. The main goal of this mapping is pointing directions of significant research in the area of Role Based Access Control Models.}
}

@article{rayyan-727968190,
  title={How to describe SPL variabilities in textual use cases: A systematic mapping study},
  year={2014},
  pages={64-73},
  author={Santos, Ismayle Sousa and Andrade, Rossana M C Castro and Santos Neto, Pedro A},
  keywords={Software, Systematics, Data mining, systematic mapping study, Databases, Protocols, Abstracts, Adaptation models, software product line, use case},
  abstract={In the Software Product Line (SPL) paradigm, the variability description is an important issue for the requirements engineering process. In this scenario, there are several approaches in the literature focusing on how to describe variability in use cases. However, to the best of our knowledge, no efforts have been made to collect and summarize the existing templates for textual use case description in the SPL paradigm. This paper addresses this gap, presenting a systematic mapping study about SPL variability description in textual use cases. We found with this mapping, nine use case templates and four different ways to describe SPL variabilities in a use case description. From these templates, only one deal with the five variability types identified and we did not find any experimental study comparing these templates in terms of ease of use or comprehensibility.}
}

@article{rayyan-727968197,
  title={Empirical evidence of code decay: A systematic mapping study},
  year={2013},
  pages={341-350},
  author={Bandi, Ajay and Williams, Byron J and Allen, Edward B},
  keywords={Software, Systematics, Data mining, Coupling, Measurement, Metrics, History, Conferences, Computer architecture, Software Evolution, Architecture Violations, Code Decay, Design Rules},
  abstract={Code decay is a gradual process that negatively impacts the quality of a software system. Developers need trusted measurement techniques to evaluate whether their systems have decayed. The research aims to find what is currently known about code decay detection techniques and metrics used to evaluate decay. We performed a systematic mapping study to determine which techniques and metrics have been empirically evaluated. A review protocol was developed and followed to identify 30 primary studies with empirical evidence of code decay. We categorized detection techniques into two broad groups: human-based and metric-based approaches. We describe the attributes of each approach and distinguish features of several subcategories of both high-level groups. A tabular overview of code decay metrics is also presented. We exclude studies that do not use time (i.e., do not use evaluation of multiple software versions) as a factor when evaluating code decay. This limitation serves to focus the review. We found that coupling metrics are the most widely used at identifying code decay. Researchers use various terms to define code decay, and we recommend additional research to operationalize the terms to provide more consistent analysis.}
}

@article{rayyan-727968199,
  title={A disturbing question: What is the economical impact of cloud computing? A systematic mapping},
  year={2018},
  pages={853-856},
  author={Ferraz, Felipe and Ribeiro, Francisco and Lima, Wallace and Sampaio, Carlos},
  keywords={Systematics, Security, Cloud computing, Challenges, Cloud Computing, Companies, Biological system modeling, Economics, Systematic Mapping, Economic Impacts, Opportunities},
  abstract={Cloud Computing is ranked as one of the most impacting technologies in present times. It represents a great change in how companies organize their budget, allowing then to save money otherwise spent in building and maintaining in-house data centers. If that were the only gain in the adoption of Cloud Computing technologies, it would be already a tremendous saving in costs, but Cloud solutions can provide users with furthermore services and options. With that in mind, what is the real impact of cloud computing to companies solutions and services? This paper conducts a systematic mapping in order to depict the economical and other impacts of cloud computing in companies and solution, analyzing aspects that go beyond technological questions.}
}

@article{rayyan-727968205,
  title={Emergent behavior in system-of-systems: A systematic mapping study},
  year={2019},
  issn={978-1-4503-7651-8},
  pages={140-149},
  author={Inocêncio, Thiago J and Gonzales, Gustavo R and Cavalcante, Everton and Horita, Flávio E A},
  url={https://doi.org/10.1145/3350768.3350779},
  publisher={Association for Computing Machinery},
  series={SBES 2019},
  keywords={Systematic mapping study, Systems-of-Systems, emergent behavior},
  abstract={A systems-of-systems (SoS) is a class of systems characterized by the collaboration among independent constituent systems, each one with its own purposes and functionalities and interacting with the others aiming to meet common global missions. An essential characteristic of any SoS is the so-called emergent behavior, which stands for the ability of an SoS of providing new functionalities resulted from the runtime collaboration among the constituent systems and that are not performed by any of them in isolation. Despite the importance of this subject, it is possible to notice that there are some lacks related to understanding emergent behavior in SoS, how it manifests, and which challenges it imposes to the development of this class of systems. This paper presents a systematic mapping study aimed to elicit and analyze the state-of-the-art on emergent behavior in SoS. By following a systematic procedure of search and selection of primary studies, a set of 37 existing studies was analyzed with respect to contributions related to emergent behavior in SoS. Obtained results show that the studies do not deeply investigate emergent behavior even though they mention this characteristic. Grounded on such a discussion, this work also presents a research agenda with directions for further work on the topic.}
}

@article{rayyan-727968213,
  title={Software metrics for measuring the understandability of architectural structures: A systematic mapping study},
  year={2015},
  issn={978-1-4503-3350-4},
  author={Stevanetic, Srdjan and Zdun, Uwe},
  url={https://doi.org/10.1145/2745802.2745822},
  publisher={Association for Computing Machinery},
  series={EASE '15},
  keywords={Metronidazole, Software},
  abstract={The main idea of software architecture is to concentrate on the "big picture" of a software system. In the context of object-oriented software systems higher-level architectural structures or views above the level of classes are frequently used to capture the "big picture" of the system. One of the critical aspects of these higher-level views is understandability, as one of their main purposes is to enable designers to abstract away fine-grained details. In this article we present a systematic mapping study on software metrics related to the understandability concepts of such higher-level software structures with regard to their relations to the system implementation. In our systematic mapping study, we started from 3951 studies obtained using an electronic search in the four digital libraries from ACM, IEEE, Scopus, and Springer. After applying our inclusion/exclusion criteria as well as the snowballing technique we selected 268 studies for in-depth study. From those, we selected 25 studies that contain relevant metrics. We classify the identified studies and metrics with regard to the measured artefacts, attributes, quality characteristics, and representation model used for the metrics definitions. Additionally, we present the assessment of the maturity level of the identified studies. Overall, there is a lack of maturity in the studies. We discuss possible techniques how to mitigate the identified problems. From the academic point of view we believe that our study is a good starting point for future studies aiming at improving the existing works. From a practitioner's point of view, the results of our study can be used as a catalogue and an indication of the maturity of the existing research results.}
}

@article{rayyan-727968218,
  title={UML consistency rules: A systematic mapping study},
  year={2014},
  issn={978-1-4503-2476-2},
  author={Torre, Damiano and Labiche, Yvan and Genero, Marcela},
  url={https://doi.org/10.1145/2601248.2601292},
  publisher={Association for Computing Machinery},
  series={EASE '14},
  keywords={systematic mapping study, UML consistency rules, unified modeling language (UML), Unified Medical Language System},
  abstract={Context: The Unified Modeling Language (UML), with its 14 different diagram types, is the de-facto standard modeling language for object-oriented modeling and documentation. Since the various UML diagrams describe different aspects of one, and only one, software under development, they are not independent but strongly depend on each other in many ways. In other words, the UML diagrams describing a software product must be consistent. Inconsistencies between these diagrams may be a source of faults in software systems. It is therefore paramount that these inconsistencies be detected, analyzed and hopefully fixed.Objective: The aim of this article is to deliver a comprehensive summary of UML consistency rules as they are described in the literature to date to obtain an extensive and detailed overview of the current research in this area.Method: We performed a Systematic Mapping Study by following well-known guidelines. We selected 95 primary studies from a search with seven search engines performed in December 2012.Results: Different results are worth mentioning. First it appears that researchers tend to discuss very similar consistency rules, over and over again. Most rules are horizontal (98.10%) and syntactic (88.21%). The most used diagrams are the class diagram (71.58%), the sequence diagram (47.37%) and the state machine diagram (42.11%).Conclusion: The fact that many rules are duplicated in primary studies confirms the need for a well-accepted list of consistency rules. This paper is a first step in this direction. Results indicate that much more work is needed to develop consistency rules for all 14 UML diagrams, in all dimensions of consistency (e.g., semantic and syntactic on the one hand, horizontal, vertical and evolution on the other hand).}
}

@article{rayyan-727968248,
  title={Software process improvement: Where is the evidence?: Initial findings from a systematic mapping study},
  year={2015},
  issn={978-1-4503-3346-7},
  pages={107-116},
  author={Kuhrmann, Marco and Konopka, Claudia and Nellemann, Peter and Diebold, Philipp and Münch, Jürgen},
  url={https://doi.org/10.1145/2785592.2785600},
  publisher={Association for Computing Machinery},
  series={ICSSP 2015},
  keywords={systematic mapping study, software process improvement, software process, Software},
  abstract={Software process improvement (SPI) is around for decades: frameworks are proposed, success factors are studied, and experiences have been reported. However, the sheer mass of concepts, approaches, and standards published over the years overwhelms practitioners as well as researchers. What is out there? Are there new emerging approaches? What are open issues? Still, we struggle to answer the question for what is the current state of SPI and related research? In this paper, we present initial results from a systematic mapping study to shed light on the field of SPI and to draw conclusions for future research directions. An analysis of 635 publications draws a big picture of SPI-related research of the past 25 years. Our study shows a high number of solution proposals, experience reports, and secondary studies, but only few theories. In particular, standard SPI models like CMMI and ISO/IEC 15504 are analyzed, enhanced, and evaluated for applicability, whereas these standards are critically discussed from the perspective of SPI in small-to-medium-sized companies, which leads to new specialized frameworks. Furthermore, we find a growing interest in success factors to aid companies in conducting SPI.}
}

@article{rayyan-727968252,
  title={Service-oriented product lines: A systematic mapping study},
  year={2014},
  journal={SIGSOFT Softw. Eng. Notes},
  issn={0163-5948},
  volume={39},
  number={2},
  pages={1-6},
  author={Castelluccia, Daniela and Boffoli, Nicola},
  url={https://doi.org/10.1145/2579281.2579294},
  keywords={mapping study, empirical study, software product line, product line development, service-oriented architecture, service-oriented computing, variability management},
  abstract={Software product line engineering and service-oriented architectures both enable organizations to capitalize on reuse of existing software assets and capabilities and improve competitive advantage in terms of development savings, product flexibility, time-to-market. Both approaches accommodate variation of assets, including services, by changing the software being reused or composing services according a new orchestration. Therefore, variability management in Service-oriented Product Lines (SoPL) is one of the main challenges today. In order to highlight the emerging evidence-based results from the research community, we apply the well-defined method of systematic mapping in order to populate a classification scheme for the SoPL field of interest. The analysis of results throws light on the current open issues. Moreover, different facets of the scheme can be combined to answer more specific research questions. The report reveals the need for more empirical research able to provide new metrics measuring efficiency and efficacy of the proposed models, new methods and tools supporting variability management in SoPL, especially during maintenance and verification and validation. The mapping study about SoPL opens further investigations by means of a complete systematic review to select and validate the most efficient solutions to variability management in SoPL.}
}

@article{rayyan-727968255,
  title={A systematic map on verifying and validating software process simulation models},
  year={2017},
  issn={978-1-4503-5270-3},
  pages={50-59},
  author={Gong, Haojie and Zhang, He and Yu, Dexian and Liu, Bohan},
  url={https://doi.org/10.1145/3084100.3084106},
  publisher={Association for Computing Machinery},
  series={ICSSP 2017},
  keywords={systematic mapping study, model verification and validation, process modeling, process simulation, Software Validation, Software},
  abstract={Verification and Validation (V&V) is a critical step in software process modelling to secure the model's quality and credibility. Software Process Simulation Models (SPSMs) that are based on descriptive process models offer the executability that is able to demonstrate the dynamic changes of software process over time. The V&V of process simulation models go beyond static process models and turn to be more complex and challenging to software modelers. This study aims to identify what aspects of process simulation models are verified and validated by using which V&V methods in what conditions in software engineering research. We conducted a systematic literature review (mapping study) on the studies of software process simulation that report of their V&V activities. We identified 72 relevant studies from a pool of 331 papers on SPSM until 2015. These studies can be mapped to ten V&V methods applied for five aspects of process models to be verified and validated, i.e., syntactic quality, semantic quality, pragmatic quality, performance, and value. A systematic map is presented to illustrate the relationships between the identified V&V methods and their supporting aspects of process models. This mapping will provide the community reference value when developing, verifying, and validating software process (simulation) models.}
}

@article{rayyan-727968262,
  title={A systematic mapping study on intrusion alert analysis in intrusion detection systems},
  year={2018},
  journal={ACM Computing Surveys},
  issn={0360-0300},
  volume={51},
  number={3},
  author={Ramaki, Ali Ahmadian and Rasoolzadegan, Abbas and Bafghi, Abbas Ghaemi},
  url={https://doi.org/10.1145/3184898},
  keywords={systematic review, Network security, alert correlation, intrusion alert analysis, systematic mapping study (SMS)},
  abstract={Intrusion alert analysis is an attractive and active topic in the area of intrusion detection systems. In recent decades, many research communities have been working in this field. The main objective of this article is to achieve a taxonomy of research fields in intrusion alert analysis by using a systematic mapping study of 468 high-quality papers. The results show that there are 10 different research topics in the field, which can be classified into three broad groups: pre-processing, processing, and post-processing. The processing group contains most of the research works, and the post-processing group is newer than others.}
}

@article{rayyan-727968266,
  title={Where do we stand in requirements engineering improvement today? First results from a mapping study},
  year={2014},
  issn={978-1-4503-2774-9},
  author={Fernández, Daniel Méndez and Ognawala, Saahil and Wagner, Stefan and Daneva, Maya},
  url={https://doi.org/10.1145/2652524.2652555},
  publisher={Association for Computing Machinery},
  series={ESEM '14},
  keywords={systematic mapping study, requirements engineering, software process improvement},
  abstract={Context: Requirements engineering process improvement (REPI) approaches have gained much attention in research and practice. Goal: So far, there is no comprehensive view on the research in REPI in terms of solutions and current state of reported evidence. We aims to provide an overview on the existing solutions, their underlying principles and their research type facets, i.e. their state of empirical evidence. Method: To this end, we conducted a systematic mapping study of the REPI publication space. Results: This paper reports on the first findings regarding research type facets of the contributions as well as selected methodological principles. We found a strong focus in the existing research on solution proposals for REPI approaches that concentrate on normative assessments and benchmarks of the RE activities rather than on holistic RE improvements according to individual goals of companies. Conclusions: We conclude, so far, that there is a need to broaden the work and to investigate more problem-driven REPI which also targets the improvement of the quality of the underlying RE artefacts, which currently seem out of scope.}
}

@article{rayyan-727968273,
  title={Coupling and cohesion metrics for object-oriented software: A systematic mapping study},
  year={2018},
  issn={978-1-4503-6398-3},
  author={Tiwari, Saurabh and Rathore, Santosh Singh},
  url={https://doi.org/10.1145/3172871.3172878},
  publisher={Association for Computing Machinery},
  series={ISEC '18},
  keywords={systematic mapping, Coupling/cohesion metrics, metrics evolution, Software, Metronidazole},
  abstract={Coupling and Cohesion are two fundamental concepts that can be applied to design better modular object-oriented software. This study aims at reviewing existing research on coupling and cohesion metrics in order to identify the potential ones and needs for the future research. A systematic mapping study is presented to identify the popular coupling and cohesion metrics, and their applicability in practice. A total of 137 papers were found and classified into four different classes- evolution of coupling and cohesion metrics, research type, contribution, and context focus. Our study revealed that the significance of coupling and cohesion metrics in various software development activities has been advocated by various researchers. However, some issues such as the lack of availability of information about the contextual usages of these metrics and their multiple interpretations by different researchers need to be resolved to establish the practical use of these metrics.}
}

@article{rayyan-727968275,
  title={Usability and user EXperience evaluation of conversational systems: A systematic mapping study},
  year={2020},
  issn={978-1-4503-8753-8},
  pages={427-436},
  author={Guerino, Guilherme Corredato and Valentim, Natasha Malveira Costa},
  url={https://doi.org/10.1145/3422392.3422421},
  publisher={Association for Computing Machinery},
  series={SBES '20},
  keywords={Systematic Mapping Study, Usability, User eXperience, Software Quality, Conversational Systems},
  abstract={Conversational Systems (CSs) are software that uses the user's voice to perform some action. Before these systems were available to users, they must be evaluated. In this sense, Usability and User eXperience (UX) evaluations contribute to the verification of software quality, since they evaluate several aspects such as efficiency, effectiveness, immersion, and user satisfaction. Therefore, the goal of our Systematic Mapping Study (SMS) is to identify the evaluation technologies (methods, techniques, models, among others) used by researchers and professionals to evaluate Usability and UX of CSs. We selected 39 papers for data extraction and, based on these works, we identified 31 different evaluation technologies. Besides, our SMS extracted the characteristics of technologies, CSs, and empirical studies described in the papers. Our results identify a lack of evaluation technologies of CSs that unite the concepts of Usability and UX and undergo empirical evaluations. Moreover, we observed researchers tend to create their questionnaires according to the needs of the study. Overall, our SMS presents data about the researched topic, describing the gaps, and contributing to the scientific community that evaluates Usability and UX of CSs.}
}

@article{rayyan-727968279,
  title={Requirements engineering and software testing in agile methodologies: A systematic mapping},
  year={2019},
  issn={978-1-4503-7651-8},
  pages={322-331},
  author={Coutinho, Jarbele C S and Andrade, Wilkerson L and Machado, Patrícia D L},
  url={https://doi.org/10.1145/3350768.3352584},
  publisher={Association for Computing Machinery},
  series={SBES 2019},
  keywords={systematic mapping study, software testing, agile, software requirements, Software},
  abstract={The insertion of agile practices in software development has increased exponentially. Both industry and academic staff constantly face challenges related to requirements specification and testing in this context. In this study, we conducted a systematic mapping of the literature to investigate the practices, strategies, techniques, tools, and challenges met in the association of Requirements Engineering with Software Testing (REST) in the agile context. By searching seven major bibliographic databases, we identified 1.099 papers related to Agile REST. Based on the systematic mapping guidelines, we selected 14 of them for a more specific analysis. In general, the main findings include the fact that weekly meetings should be held to establish frequent communication with stakeholders. Also, most projects adopt use cases as conceptual models and perform use case detailing. Test cases are an important artifact with test case design as a Software Testing practice. For the automation of test cases, fit tables have been recommended as an artifact. Finally, proper project documentation constitutes a critical basis in Agile REST.}
}

@article{rayyan-727968282,
  title={A systematic mapping study on serious game quality},
  year={2014},
  issn={978-1-4503-2476-2},
  author={Vargas, Juan A and García-Mundo, Lilia and Genero, Marcela and Piattini, Mario},
  url={https://doi.org/10.1145/2601248.2601261},
  publisher={Association for Computing Machinery},
  series={EASE '14},
  keywords={systematic mapping study, serious games, quality, ISO 25010},
  abstract={Context: A Serious Game (SG) is a game for purposes other than entertainment [12]. SGs are currently in widespread use and their popularity has begun to steadily increase; their application areas now extend not only to education, but also to military, health and corporate [9] [12] sectors. SGs are of vital importance at present, as they can be a means to achieve relevant goals from both a personal and an institutional point of view. This may take place in fields as diverse as defense, education, scientific exploration, health care, emergency management, city planning, engineering, religion, and politics. The number of users of these systems grows each day, signifying that their impact is very high, and it is precisely for this reason that more extensive research on SG quality is needed.Objective: The aim of this study is to discover the current state of SG quality initiatives, identifying gaps that merit future investigation.Method: We conducted a systematic mapping study (SMS) on SG quality, following the guidelines proposed by Kitchenham and Charters [7]. We selected 112 papers found in six digital libraries until April of 2013.Results: Since 2007, research on SG quality proves to have grown very significantly. Research has focused mostly on addressing the effectiveness of SGs (78.57%), in addition to several entertainment characteristics that are principally related to pleasure (62.50%). The most widely-researched software artifact was the final product (97.32%), with design coming very far behind (7.14%). Less than half of all the research reviewed had been validated by means of experiments, and in most of these cases, experiments were conducted by the same researchers who had proposed the SG. The majority of experiments have not been replicated. The most common research outcome was questionnaires, closely followed by the confirmation of knowledge. Most of these outcomes evaluated the quality of a particular SG.Conclusion: Results show that SG quality has undergone a very important growth, thus making SG quality an area of opportunity for future research. Researchers are mainly concerned with demonstrating or confirming the effectiveness of SGs, but very little research has been conducted as regards the characteristics of playability that make SGs more effective. Since effectiveness and playability are evaluated in the final product there is a need to provide quality assurance methods that incorporate quality issues from the early stages of SG development. Further empirical validation is also needed, and in particular, external replications must be performed in order to corroborate and generalize the findings obtained.}
}

@article{rayyan-727968283,
  title={Testing strategies for smart cities applications: A systematic mapping study},
  year={2018},
  issn={978-1-4503-6555-0},
  pages={20-28},
  author={Costa, Alex and Teixeira, Leopoldo},
  url={https://doi.org/10.1145/3266003.3266005},
  publisher={Association for Computing Machinery},
  series={SAST '18},
  keywords={Mapping Study, Smart City, Tests},
  abstract={Context: Smart Cities are urban areas that enable the development of applications to improve city resources management, through the use of information technology such as Internet of Things and cloud computing, as well as government data availability and citizen participation. Some challenges identified in the development of solutions for this context are: scalability, modularity and security. Goal: Testing activities are critical to the verification and validation of Smart City solutions, so our goal is to develop a map of test strategies for applications developed in the context of Smart Cities. Method: For this study we defined a systematic literature review protocol to identify, select, analyze and synthesize the results of previously published empirical studies in the software engineering literature, related to testing Smart Cities applications. Results: In this systematic mapping, 13 articles were selected, that have identified test strategies used by developers for the application testing process. We have also identified some difficulties faced in the process of testing these applications through reports present in the works selected in this mapping. Conclusion: Our research synthesized evidence that we hope might serve as a data source for academic research and industrial practice. As future work we plan to apply our results highlighting a case study in real applications to validate the collected evidence.}
}

@article{rayyan-727968285,
  title={Strategies for consistency checking on software product lines: A mapping study},
  year={2015},
  issn={978-1-4503-3350-4},
  author={Santos, Alcemir Rodrigues and de Oliveira, Raphael Pereira and de Almeida, Eduardo Santana},
  url={https://doi.org/10.1145/2745802.2745806},
  publisher={Association for Computing Machinery},
  series={EASE '15},
  keywords={mapping study, literature review, consistency checking, software product line engineering, Software},
  abstract={Context. Software Product Lines (SPL) has become one of the most prominents way to promote the systematic reuse of software artifacts. Like any other piece of software, with the SPL aging, it becomes necessary to manage their evolution. However, in this process, engineers might introduce divergences among the SPL artifacts. Thus, a number of initiatives address the management of such inconsistencies. Objective. In this paper, we mapped the existing approaches to inconsistency management within SPL. Method. We used the systematic mapping study methodology. Results. We classified and performed a characterization of the approaches found, which we mangaged to arrange in three main categories. Most papers selected proposed new methods as solution research. Besides, there is still a need for validation and evaluation studies. Conclusion. We identified a lack of support for a number of activities of consistency assurance. For instance, no paper addressed the tracking of findings, decisions, and actions, as well as, few papers describing either the handling or a management policy for identified inconsistencies.}
}

@article{rayyan-727968308,
  title={Ontologies supporting the distributed software development: A systematic mapping study},
  year={2013},
  issn={978-1-4503-1848-8},
  pages={153-164},
  author={Borges, Alex and Soares, Sérgio and Meira, Silvio and Tomaz, Hilário and Rocha, Rodrigo and Costa, Catarina},
  url={https://doi.org/10.1145/2460999.2461022},
  publisher={Association for Computing Machinery},
  series={EASE '13},
  keywords={systematic mapping study, ontology, empirical software engineering, distributed software development, Software},
  abstract={Background: Along the last decade, there has been a significant increase in the adoption of the approaches based on Distributed Software Development (DSD). This approach has brought several competitive advantages, as well as new challenges such as communication and information sharing. In this context, the ontologies can provide benefits such as the definition, standardization and sharing of knowledge involved in the project, allowing a uniform understanding of information and facilitating the collaboration among distributed software development teams. Aim: Identifying evidence to determine which tools, models, techniques and best practices that use ontologies to support the DSD projects, and which ontologies proposed in this context. Method: This paper presents a systematic mapping study conducted in order to investigate how ontologies are being applied as a support to the DSD. The research protocol was based on Kitchenham's, and Travassos and Biolchini's guidelines. Searches were performed both in manual and automatic way in a set of digital libraries engines and leading conferences in the Software Engineering field. Results: From the initial set of 1588 studies, it was selected a total of 38 primary studies that answer the two research questions. Conclusions: This work presents evidences from each paper collected and an analysis of results reached. The results support the foundation for proposing and developing a feature based on ontologies to support the DSD, besides encouraging further researches that may promote advancements in this area and fostering the adoption of these types of resources by the global software industry.}
}

@article{rayyan-727968317,
  title={Visual notations for software pattern languages: A mapping study},
  year={2018},
  issn={978-1-4503-6503-1},
  pages={72-81},
  author={da Silva Quirino, Glaice Kelly and Barcellos, Monalessa Perini and de Almeida Falbo, Ricardo},
  url={https://doi.org/10.1145/3266237.3266266},
  publisher={Association for Computing Machinery},
  series={SBES '18},
  keywords={mapping study, pattern language, visual notation, Software},
  abstract={Reuse has been recognized as an important practice in software engineering. The use of patterns makes it easier to reuse successful solutions, speeds up the development process, and promotes the application of good practices. Related patterns can be organized in a Pattern Language (PL), which represents the patterns and their relations, and provides guidance on how to select, reuse and integrate them. Visual notations are often used to provide a graphical representation to PLs. Aiming to investigate how PLs related to software have been visually represented, we carried out a systematic mapping. We identified and analyzed 64 PLs. As a result, we noticed a lack of consensus on the elements that should be represented in a PL and the symbols used to represent them. Moreover, most PLs have ambiguous or inexpressive visual representations.}
}

@article{rayyan-727968323,
  title={Costing secure software development: A systematic mapping study},
  year={2019},
  issn={978-1-4503-7164-3},
  author={Venson, Elaine and Guo, Xiaomeng and Yan, Zidi and Boehm, Barry},
  url={https://doi.org/10.1145/3339252.3339263},
  publisher={Association for Computing Machinery},
  series={ARES '19},
  keywords={Software security, software development effort estimation, secure software development, software cost model, Software},
  abstract={Building more secure software is a recent concern for software engineers due to increasing incidences of data breaches and other types of cyber attacks. However, software security, through the introduction of specialized practices in the software development life cycle, leads to an increase in the development cost. Although there are many studies on software cost models, few address the additional costs required to build secure software. We conducted a systematic review in the form of a mapping study to classify and analyze the literature related to the impact of security in software development costs. Our search strategy strove to achieve high completeness by the identification of a quasi-gold-standard set of papers, which we then used to establish a search string and retrieve papers from research databases automatically. The application of inclusion/exclusion criteria resulted in a final set of 54 papers, which were categorized according to the approach to software security cost analysis. Perform Security Review, Apply Threat Modeling, and Perform Security Testing were the three most frequent activities related to cost, and Common Criteria was the most applied standard. We also identified ten approaches to estimating software security costs for development projects; however, their validation remains a challenge, which could be addressed in future studies.}
}

@article{rayyan-727968359,
  title={A mapping study on method engineering: First results},
  year={2013},
  issn={978-1-4503-1848-8},
  pages={165-170},
  author={Kuhrmann, Marco and Fernández, Daniel Méndez and Tiessler, Michaela},
  url={https://doi.org/10.1145/2460999.2461023},
  publisher={Association for Computing Machinery},
  series={EASE '13},
  keywords={systematic literature review, mapping study, situational method engineering},
  abstract={Context: Software processes have become inherently complex to cope with the various situations we face in industrial project environments. In response to this problem, the research area of Method Engineering arose in the 1990s aiming at the systematization of process construction. Objective: Although the research area has gained much attention and offered a plethora of contributions so far, we still have little knowledge about the feasibility of Method Engineering. To overcome this shortcoming, necessary is a systematic investigation of the respective publication flora. Method: We conduct a systematic mapping study and investigate, inter alia, which contributions were made over time and which research type facet they address to distill a common understanding of the state-of-the-art. Results: Based on the review of 64 publications, our results show that most of those contributions only repeat and discuss formerly introduced concepts, whereas empirically sound evidence on the feasibility of Method Engineering, is still missing. Conclusion: Although the research area constitutes many contributions, yet missing are empirically sound investigations that would allow for practical application and experience extraction.}
}

@article{rayyan-727968371,
  title={Software engineering aspects of green and sustainable software: A systematic mapping study},
  year={2017},
  issn={978-1-4503-4856-0},
  pages={34-44},
  author={Marimuthu, C and Chandrasekaran, K},
  url={https://doi.org/10.1145/3021460.3021464},
  publisher={Association for Computing Machinery},
  series={ISEC '17},
  keywords={systematic mapping study, green and sustainable software engineering, green software, Software},
  abstract={Green and sustainable software engineering is an emerging research field which aims at creating, using, and disposing the energy-efficient software in an environment friendly manner with less negative impacts. The research community strongly believes that the energy efficiency and sustainability of the software can be improved by modifying the existing software engineering methods. This systematic mapping study identifies and map such methods for green and sustainable software development. Especially, this study identifies the research types, research goals, software engineering research topics, accepted validation methods and publication fora that are used in the field of green and sustainable software engineering. This study was conducted with 7 research questions and analyzed 82 relevant studies. We have used snowballing reading to find out the relevant studies that were published from 2010 to May, 2016. One of the important finding of this study is, there are less number of contributions on software design and construction. In future, sufficient research works and tools support must be provided to make this research field more matured. The main contribution of this study is to summarize the body of knowledge in the field of green and sustainable software engineering and provides a platform to conduct future research.}
}

@article{rayyan-727968388,
  title={Support mechanisms to conduct empirical studies in software engineering: A systematic mapping study},
  year={2015},
  issn={978-1-4503-3350-4},
  author={Borges, Alex and Ferreira, Waldemar and Barreiros, Emanoel and Almeida, Adauto and Fonseca, Liliane and Teixeira, Eudis and Silva, Diogo and Alencar, Aline and Soares, Sergio},
  url={https://doi.org/10.1145/2745802.2745823},
  publisher={Association for Computing Machinery},
  series={EASE '15},
  keywords={systematic mapping study, empirical software engineering, empirical strategies, support mechanisms, Software},
  abstract={Context: Empirical studies are gaining recognition in the Software Engineering (SE) research community, allowing improved quality of research and accelerating the adoption of new technologies in the software market. However, empirical studies in this area are still limited. In order to foster empirical research in SE, it is essential to understand the resources available to aid these studies. Goal: Identify support mechanisms (methodology, tool, guideline, process, etc.) used to conduct empirical studies in the Empirical Software Engineering (ESE) community. Method: We performed a systematic mapping study that included all full papers published at EASE, ESEM and ESEJ since their first editions. Were selected 891 studies between 1996 and 2013. Results: A total of 375 support mechanisms were identified. We provide the full list of mechanisms and the strategies that uses them. Despite this, we identified a high number of studies that do not cite any mechanism to support their empirical strategies: 433 studies (48%). Experiment is the strategy that has more resources to support their activities. And guideline was the most used type of mechanism. Moreover we observed that the most mechanisms used as reference to empirical studies are not specific to SE area. And some mechanisms were used only in specific activities of empirical research, such as statistical and qualitative data analysis. Experiment and case studies are the strategies most applied. Conclusions: The use of empirical methods in SE has increased over the years. Despite this, many studies did not apply these methods and do not cite any resource to guide their research. Therefore, the list of support mechanisms, where and how they were applied is a major asset to the SE community. Such asset can encourage empirical studies aiding the choice regarding which strategies and mechanisms to use in a research, as well as pointing out examples where they were used, mainly to novice researchers. We also identified new perspectives and gaps that foster other research for the improvement of empirical research in this area.}
}

@article{rayyan-727968403,
  title={Social metrics included in prediction models on software engineering: A mapping study},
  year={2014},
  issn={978-1-4503-2898-2},
  pages={72-81},
  author={Wiese, Igor Scaliante and Côgo, Filipe Roseiro and Ré, Reginaldo and Steinmacher, Igor and Gerosa, Marco Aurélio},
  url={https://doi.org/10.1145/2639490.2639505},
  publisher={Association for Computing Machinery},
  series={PROMISE '14},
  keywords={mapping study, social network analysis, prediction models, social metrics, Metronidazole, Software},
  abstract={Context: Previous work that used prediction models on Software Engineering included few social metrics as predictors, even though many researchers argue that Software Engineering is a social activity. Even when social metrics were considered, they were classified as part of other dimensions, such as process, history, or change. Moreover, few papers report the individual effects of social metrics. Thus, it is not clear yet which social metrics are used in prediction models and what are the results of their use in different contexts. Objective: To identify, characterize, and classify social metrics included in prediction models reported in the literature. Method: We conducted a mapping study (MS) using a snowballing citation analysis. We built an initial seed list adapting strings of two previous systematic reviews on software prediction models. After that, we conducted backward and forward citation analysis using the initial seed list. Finally, we visited the profile of each distinct author identified in the previous steps and contacted each author that published more than 2 papers to ask for additional candidate studies. Results: We identified 48 primary studies and 51 social metrics. We organized the metrics into nine categories, which were divided into three groups - communication, project, and commit-related. We also mapped the applications of each group of metrics, indicating their positive or negative effects. Conclusions: This mapping may support researchers and practitioners to build their prediction models considering more social metrics.}
}

@article{rayyan-727968456,
  title={The use of systematic reviews in evidence based software engineering: A systematic mapping study},
  year={2014},
  issn={978-1-4503-2774-9},
  author={Santos, Ronnie E S and de Magalhães, Cleyton V C and da Silva, Fabio Q B},
  url={https://doi.org/10.1145/2652524.2652553},
  publisher={Association for Computing Machinery},
  series={ESEM '14},
  keywords={systematic literature review, software engineering, mapping study, evidence-based software engineering, Software},
  abstract={Context. A decade ago, Kitchenham, Dybå and Jørgensen argued that software engineering could benefit from an evidence-based research approach similar that that used in medicine, introducing the basis for Evidence Based Software Engineering (EBSE). Objective. Our main goal is to understand the evolution of the use of systematic reviews as the main research method in EBSE, as proposed by Kitchenham et al., by investigating primary and tertiary studies that explore any aspect, theory, or concept around the use of systematic reviews in software engineering. Method. A systematic mapping study protocol was used to find and selected studies about EBSE and systematic reviews in SE, published between 2004 and 2013. Results. We selected 52 unique papers classified as non-empirical studies (12), empirical studies (31), and tertiary studies (9). Conclusion. SLR has become an important component of software engineering research with nearly 200 unique reviews catalogued by the tertiary studies. Most important limitations are related to the industrial relevance and application of the results of reviews and the poor use of synthesis method to aggregate evidence}
}

@article{rayyan-727968472,
  title={The state of the art on secure software engineering: A systematic mapping study},
  year={2020},
  issn={978-1-4503-7731-7},
  pages={487-492},
  author={Khan, Rafiq A and Khan, Siffat U and Ilyas, Muhammad and Idris, Mohd Y},
  url={https://doi.org/10.1145/3383219.3383290},
  publisher={Association for Computing Machinery},
  series={EASE '20},
  keywords={Software Engineering, Systematic mapping study, Software Development Life Cycle, Software Security, Software},
  abstract={Secure Software Development (SSD) is becoming a major challenge, due to the increasing complexity, openness and extensibility of Information and Communication Technologies (ICTs). These make the overall security requirements analysis very difficult. Many techniques have been theoretically developed, however, there is a lack of empirical evidence of its application in building secure software system. A Systematic Mapping Study (SMS) has been conducted in this paper to examine the existence of software security frameworks, models and methods. In total, we selected 116 primary studies. After examining the selected studies, we identified 37 Secure Software Engineering (SSE) paradigms/frameworks/models. The results show that the most frequently used SSE frameworks/models are "Microsoft Software Development Life Cycle (MS-SDL)", "Misuse case modeling", "Abuse case modeling", "Knowledge Acquisition for Automated Specification", "System Security Engineering-Capability Maturity Model (SSE-CMM)" and "Secure Tropos Methodology". This work will help organizations in the development of software to better understand existing security initiatives used in the development of secure software. It can also provide researchers with a basis for designing and developing new methods of software security and identifying new axis of research.}
}

@article{rayyan-727968477,
  title={Flipped classroom in software engineering: A systematic mapping study},
  year={2020},
  issn={978-1-4503-8753-8},
  pages={720-729},
  author={Veras, Nécio L and Rocha, Lincoln S and Viana, Windson},
  url={https://doi.org/10.1145/3422392.3422490},
  publisher={Association for Computing Machinery},
  series={SBES '20},
  keywords={software engineering education, active learning, flipped classroom, Software},
  abstract={Context. Software Engineering (SE) teaching is evolving continually, with new methods being developed and evaluated. In this sense, it is important to gain more knowledge of how such methods are actually implemented. Objective. The aim of this study is to systematically examine the literature on the use of the flipped classroom method in SE teaching. Method. To achieve the study objective, we conducted a Systematic Mapping Study (SMS) starting with 769 studies. After the filtering process, we extracted data from 26 primaries studies, which meet the study selection criteria. Results. We found papers from 2008 to 2020, most of them published in SE conferences. In fifteen papers, the content is delivered to the students before class, nine of them using a specific system developed to this task. We found that the in-class activities follow three main strategies: (1) project-based learning (38.3%); (2) problem-based learning and self-direct learning (50.0%); and (3) team-based learning (7.7%). Reviewed studies reported challenges in implementing FC in ES course such as overworked and time-constrained professors and difficulty in sustaining student motivation. Also, we found studies reporting improvements in student learning and motivation Conclusion. Based on our findings, we conclude the use of an active method has proved to be useful for in-class practical activities, especially related to the software development field. We also observed that adaptive educational content delivery has not been explored in software engineering studies with flipped classes.}
}

